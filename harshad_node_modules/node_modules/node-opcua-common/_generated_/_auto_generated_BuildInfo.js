// --------- This code has been automatically generated !!! 2018-04-16T04:56:45.303Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/BuildInfo_schema").BuildInfo_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * Server build Info
 * 
 * @class BuildInfo
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function BuildInfo(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        return ;
    }

    /**
      * A description for the ProductUri Variable.
      * @property productUri
      * @type {String}
      */
    self.productUri = initialize_field(schema.fields[0], options.productUri);

    /**
      * the name of the manufacturer
      * @property manufacturerName
      * @type {String}
      */
    self.manufacturerName = initialize_field(schema.fields[1], options.manufacturerName);

    /**
      * the product name
      * @property productName
      * @type {String}
      */
    self.productName = initialize_field(schema.fields[2], options.productName);

    /**
      * the software version
      * @property softwareVersion
      * @type {String}
      */
    self.softwareVersion = initialize_field(schema.fields[3], options.softwareVersion);

    /**
      * the software build number
      * @property buildNumber
      * @type {String}
      */
    self.buildNumber = initialize_field(schema.fields[4], options.buildNumber);

    /**
      * the software build date
      * @property buildDate
      * @type {UtcTime}
      */
    self.buildDate = initialize_field(schema.fields[5], options.buildDate);

   // Object.preventExtensions(self);
}
util.inherits(BuildInfo,BaseUAObject);
BuildInfo.prototype.encodingDefaultBinary = makeExpandedNodeId(340,0);
BuildInfo.prototype.encodingDefaultXml = makeExpandedNodeId(339,0);
BuildInfo.prototype._schema = schema;

const encode_String = _defaultTypeMap.String.encode;
const decode_String = _defaultTypeMap.String.decode;
const encode_UtcTime = _defaultTypeMap.UtcTime.encode;
const decode_UtcTime = _defaultTypeMap.UtcTime.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
BuildInfo.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_String(this.productUri,stream);
    encode_String(this.manufacturerName,stream);
    encode_String(this.productName,stream);
    encode_String(this.softwareVersion,stream);
    encode_String(this.buildNumber,stream);
    encode_UtcTime(this.buildDate,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
BuildInfo.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.productUri = decode_String(stream);
    this.manufacturerName = decode_String(stream);
    this.productName = decode_String(stream);
    this.softwareVersion = decode_String(stream);
    this.buildNumber = decode_String(stream);
    this.buildDate = decode_UtcTime(stream);
};
BuildInfo.possibleFields = [
  "productUri",
         "manufacturerName",
         "productName",
         "softwareVersion",
         "buildNumber",
         "buildDate"
];


exports.BuildInfo = BuildInfo;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("BuildInfo",BuildInfo);
