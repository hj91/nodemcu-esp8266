// --------- This code has been automatically generated !!! 2018-04-16T04:56:45.444Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/ServerDiagnosticsSummary_schema").ServerDiagnosticsSummary_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class ServerDiagnosticsSummary
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function ServerDiagnosticsSummary(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        return ;
    }

    /**
      * 
      * @property serverViewCount
      * @type {UInt32}
      */
    self.serverViewCount = initialize_field(schema.fields[0], options.serverViewCount);

    /**
      * 
      * @property currentSessionCount
      * @type {UInt32}
      */
    self.currentSessionCount = initialize_field(schema.fields[1], options.currentSessionCount);

    /**
      * 
      * @property cumulatedSessionCount
      * @type {UInt32}
      */
    self.cumulatedSessionCount = initialize_field(schema.fields[2], options.cumulatedSessionCount);

    /**
      * 
      * @property securityRejectedSessionCount
      * @type {UInt32}
      */
    self.securityRejectedSessionCount = initialize_field(schema.fields[3], options.securityRejectedSessionCount);

    /**
      * 
      * @property rejectedSessionCount
      * @type {UInt32}
      */
    self.rejectedSessionCount = initialize_field(schema.fields[4], options.rejectedSessionCount);

    /**
      * 
      * @property sessionTimeoutCount
      * @type {UInt32}
      */
    self.sessionTimeoutCount = initialize_field(schema.fields[5], options.sessionTimeoutCount);

    /**
      * 
      * @property sessionAbortCount
      * @type {UInt32}
      */
    self.sessionAbortCount = initialize_field(schema.fields[6], options.sessionAbortCount);

    /**
      * 
      * @property currentSubscriptionCount
      * @type {UInt32}
      */
    self.currentSubscriptionCount = initialize_field(schema.fields[7], options.currentSubscriptionCount);

    /**
      * 
      * @property cumulatedSubscriptionCount
      * @type {UInt32}
      */
    self.cumulatedSubscriptionCount = initialize_field(schema.fields[8], options.cumulatedSubscriptionCount);

    /**
      * 
      * @property publishingIntervalCount
      * @type {UInt32}
      */
    self.publishingIntervalCount = initialize_field(schema.fields[9], options.publishingIntervalCount);

    /**
      * 
      * @property securityRejectedRequestsCount
      * @type {UInt32}
      */
    self.securityRejectedRequestsCount = initialize_field(schema.fields[10], options.securityRejectedRequestsCount);

    /**
      * 
      * @property rejectedRequestsCount
      * @type {UInt32}
      */
    self.rejectedRequestsCount = initialize_field(schema.fields[11], options.rejectedRequestsCount);

   // Object.preventExtensions(self);
}
util.inherits(ServerDiagnosticsSummary,BaseUAObject);
ServerDiagnosticsSummary.prototype.encodingDefaultBinary = makeExpandedNodeId(861,0);
ServerDiagnosticsSummary.prototype._schema = schema;

const encode_UInt32 = _defaultTypeMap.UInt32.encode;
const decode_UInt32 = _defaultTypeMap.UInt32.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
ServerDiagnosticsSummary.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_UInt32(this.serverViewCount,stream);
    encode_UInt32(this.currentSessionCount,stream);
    encode_UInt32(this.cumulatedSessionCount,stream);
    encode_UInt32(this.securityRejectedSessionCount,stream);
    encode_UInt32(this.rejectedSessionCount,stream);
    encode_UInt32(this.sessionTimeoutCount,stream);
    encode_UInt32(this.sessionAbortCount,stream);
    encode_UInt32(this.currentSubscriptionCount,stream);
    encode_UInt32(this.cumulatedSubscriptionCount,stream);
    encode_UInt32(this.publishingIntervalCount,stream);
    encode_UInt32(this.securityRejectedRequestsCount,stream);
    encode_UInt32(this.rejectedRequestsCount,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
ServerDiagnosticsSummary.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.serverViewCount = decode_UInt32(stream);
    this.currentSessionCount = decode_UInt32(stream);
    this.cumulatedSessionCount = decode_UInt32(stream);
    this.securityRejectedSessionCount = decode_UInt32(stream);
    this.rejectedSessionCount = decode_UInt32(stream);
    this.sessionTimeoutCount = decode_UInt32(stream);
    this.sessionAbortCount = decode_UInt32(stream);
    this.currentSubscriptionCount = decode_UInt32(stream);
    this.cumulatedSubscriptionCount = decode_UInt32(stream);
    this.publishingIntervalCount = decode_UInt32(stream);
    this.securityRejectedRequestsCount = decode_UInt32(stream);
    this.rejectedRequestsCount = decode_UInt32(stream);
};
ServerDiagnosticsSummary.possibleFields = [
  "serverViewCount",
         "currentSessionCount",
         "cumulatedSessionCount",
         "securityRejectedSessionCount",
         "rejectedSessionCount",
         "sessionTimeoutCount",
         "sessionAbortCount",
         "currentSubscriptionCount",
         "cumulatedSubscriptionCount",
         "publishingIntervalCount",
         "securityRejectedRequestsCount",
         "rejectedRequestsCount"
];


exports.ServerDiagnosticsSummary = ServerDiagnosticsSummary;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("ServerDiagnosticsSummary",ServerDiagnosticsSummary);
