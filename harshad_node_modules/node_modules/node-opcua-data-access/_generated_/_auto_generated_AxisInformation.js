// --------- This code has been automatically generated !!! 2018-04-16T04:56:36.107Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/AxisInformation_schema").AxisInformation_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const EUInformation = require("./_auto_generated_EUInformation").EUInformation;
const Range = require("./_auto_generated_Range").Range;
const LocalizedText = getFactory("LocalizedText");
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class AxisInformation
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function AxisInformation(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        self.engineeringUnits =  null; /* new EUInformation(null); */
        self.euRange =  null; /* new Range(null); */
        self.title =  null; /* new LocalizedText(null); */
        return ;
    }

    /**
      * Holds the information about the engineering units for a given axis.
      * @property engineeringUnits
      * @type {EUInformation}
      */
    self.engineeringUnits =  new EUInformation( options.engineeringUnits);

    /**
      * Limits of the range of the axis
      * @property euRange
      * @type {Range}
      */
    self.euRange =  new Range( options.euRange);

    /**
      * User readable axis title, useful when the units are %, the Title may be Particle size
      * @property title
      * @type {LocalizedText}
      */
    self.title =  new LocalizedText( options.title);

    /**
      * LINEAR, LOG, LN, defined by AxisSteps
      * @property axisScaleType
      * @type {AxisScaleEnumeration}
      */
    self.setAxisScaleType(initialize_field(schema.fields[3], options.axisScaleType));

    /**
      * Specific value of each axis steps, may be set to Null if not used
      * @property axisSteps
      * @type {Double[]}
      * @default  null
      */
    self.axisSteps = initialize_field_array(schema.fields[4], options.axisSteps);

   // Object.preventExtensions(self);
}
util.inherits(AxisInformation,BaseUAObject);

//## Define Enumeration setters
AxisInformation.prototype.setAxisScaleType = function(value) {
   const coercedValue = _enumerations.AxisScaleEnumeration.typedEnum.get(value);
   /* istanbul ignore next */
   if (coercedValue === undefined || coercedValue === null) {
      throw new Error("value cannot be coerced to AxisScaleEnumeration: " + value);
   }
   this.axisScaleType = coercedValue;
};
AxisInformation.prototype.encodingDefaultBinary = makeExpandedNodeId(12089,0);
AxisInformation.prototype.encodingDefaultXml = makeExpandedNodeId(12081,0);
AxisInformation.prototype._schema = schema;

const encode_AxisScaleEnumeration = _enumerations.AxisScaleEnumeration.encode;
const decode_AxisScaleEnumeration = _enumerations.AxisScaleEnumeration.decode;
const encode_Double = _defaultTypeMap.Double.encode;
const decode_Double = _defaultTypeMap.Double.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
AxisInformation.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
   this.engineeringUnits.encode(stream,options);
   this.euRange.encode(stream,options);
   this.title.encode(stream,options);
    encode_AxisScaleEnumeration(this.axisScaleType,stream);
    encodeArray(this.axisSteps, stream, encode_Double);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
AxisInformation.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.engineeringUnits.decode(stream);
    this.euRange.decode(stream);
    this.title.decode(stream);
    this.axisScaleType = decode_AxisScaleEnumeration(stream);
    this.axisSteps = decodeArray(stream, decode_Double);
};
AxisInformation.possibleFields = [
  "engineeringUnits",
         "euRange",
         "title",
         "axisScaleType",
         "axisSteps"
];


exports.AxisInformation = AxisInformation;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("AxisInformation",AxisInformation);
