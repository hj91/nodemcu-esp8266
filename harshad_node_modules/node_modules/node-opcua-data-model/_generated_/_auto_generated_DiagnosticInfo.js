// --------- This code has been automatically generated !!! 2018-04-16T04:56:33.278Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/DiagnosticInfo_schema").DiagnosticInfo_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class DiagnosticInfo
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function DiagnosticInfo(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        self.innerDiagnosticInfo =  null; /* new DiagnosticInfo(null); */
        return ;
    }

    /**
      * The symbolicId is defined within the context of a namespace.
      * @property namespaceUri
      * @type {Int32}
      * @default  -1
      */
    self.namespaceUri = initialize_field(schema.fields[0], options.namespaceUri);

    /**
      * The symbolicId shall be used to identify a vendor-specific error or condition
      * @property symbolicId
      * @type {Int32}
      * @default  -1
      */
    self.symbolicId = initialize_field(schema.fields[1], options.symbolicId);

    /**
      * The locale part of the vendor-specific localized text describing the symbolic id.
      * @property locale
      * @type {Int32}
      * @default  -1
      */
    self.locale = initialize_field(schema.fields[2], options.locale);

    /**
      * 
      * @property localizedText
      * @type {Int32}
      * @default  -1
      */
    self.localizedText = initialize_field(schema.fields[3], options.localizedText);

    /**
      * Vendor-specific diagnostic information.
      * @property additionalInfo
      * @type {String}
      * @default  null
      */
    self.additionalInfo = initialize_field(schema.fields[4], options.additionalInfo);

    /**
      * The StatusCode from the inner operation.
      * @property innerStatusCode
      * @type {StatusCode}
      * @default  0
      */
    self.innerStatusCode = initialize_field(schema.fields[5], options.innerStatusCode);

    /**
      * The diagnostic info associated with the inner StatusCode.
      * @property innerDiagnosticInfo
      * @type {DiagnosticInfo}
      * @default  null
      */
    self.innerDiagnosticInfo = (options.innerDiagnosticInfo) ? new DiagnosticInfo( options.innerDiagnosticInfo) : null;

   // Object.preventExtensions(self);
}
util.inherits(DiagnosticInfo,BaseUAObject);
DiagnosticInfo.prototype.encodingDefaultBinary = makeExpandedNodeId(25,0);
DiagnosticInfo.prototype._schema = schema;

const encode_Int32 = _defaultTypeMap.Int32.encode;
const decode_Int32 = _defaultTypeMap.Int32.decode;
const encode_String = _defaultTypeMap.String.encode;
const decode_String = _defaultTypeMap.String.decode;
const encode_StatusCode = _defaultTypeMap.StatusCode.encode;
const decode_StatusCode = _defaultTypeMap.StatusCode.decode;
DiagnosticInfo.prototype.encode = function(stream,options) {
   schema.encode(this,stream,options); 
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
DiagnosticInfo.prototype.decode = function(stream) {
   schema.decode(this,stream); 
};
DiagnosticInfo.prototype.decode_debug = function(stream,options) {
   schema.decode_debug(this,stream,options); 
};
DiagnosticInfo.possibleFields = [
  "namespaceUri",
         "symbolicId",
         "locale",
         "localizedText",
         "additionalInfo",
         "innerStatusCode",
         "innerDiagnosticInfo"
];


exports.DiagnosticInfo = DiagnosticInfo;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("DiagnosticInfo",DiagnosticInfo);
