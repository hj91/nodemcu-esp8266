// --------- This code has been automatically generated !!! 2018-05-31T21:05:59.998Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/DataValue_schema").DataValue_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const Variant = getFactory("Variant");
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class DataValue
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function DataValue(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        self.value =  null; /* new Variant(null); */
        return ;
    }

    /**
      * 
      * @property value
      * @type {Variant}
      * @default  null
      */
    self.value = (options.value) ? new Variant( options.value) : null;

    /**
      * 
      * @property statusCode
      * @type {StatusCode}
      * @default  0
      */
    self.statusCode = initialize_field(schema.fields[1], options.statusCode);

    /**
      * 
      * @property sourceTimestamp
      * @type {DateTime}
      * @default  null
      */
    self.sourceTimestamp = initialize_field(schema.fields[2], options.sourceTimestamp);

    /**
      * 
      * @property sourcePicoseconds
      * @type {UInt16}
      * @default  0
      */
    self.sourcePicoseconds = initialize_field(schema.fields[3], options.sourcePicoseconds);

    /**
      * 
      * @property serverTimestamp
      * @type {DateTime}
      * @default  null
      */
    self.serverTimestamp = initialize_field(schema.fields[4], options.serverTimestamp);

    /**
      * 
      * @property serverPicoseconds
      * @type {UInt16}
      * @default  0
      */
    self.serverPicoseconds = initialize_field(schema.fields[5], options.serverPicoseconds);

   // Object.preventExtensions(self);
}
util.inherits(DataValue,BaseUAObject);
schema.id = generate_new_id();
DataValue.prototype.encodingDefaultBinary = makeExpandedNodeId(schema.id);
DataValue.prototype._schema = schema;

const encode_StatusCode = _defaultTypeMap.StatusCode.encode;
const decode_StatusCode = _defaultTypeMap.StatusCode.decode;
const encode_DateTime = _defaultTypeMap.DateTime.encode;
const decode_DateTime = _defaultTypeMap.DateTime.decode;
const encode_UInt16 = _defaultTypeMap.UInt16.encode;
const decode_UInt16 = _defaultTypeMap.UInt16.decode;
DataValue.prototype.encode = function(stream,options) {
   schema.encode(this,stream,options); 
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
DataValue.prototype.decode = function(stream) {
   schema.decode(this,stream); 
};
DataValue.prototype.decode_debug = function(stream,options) {
   schema.decode_debug(this,stream,options); 
};
/**
 *
 * verify that all object attributes values are valid according to schema
 * @method isValid
 * @return {Boolean}
 */
DataValue.prototype.isValid = function() { return schema.isValid(this); };
DataValue.possibleFields = [
  "value",
         "statusCode",
         "sourceTimestamp",
         "sourcePicoseconds",
         "serverTimestamp",
         "serverPicoseconds"
];


exports.DataValue = DataValue;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("DataValue",DataValue);
