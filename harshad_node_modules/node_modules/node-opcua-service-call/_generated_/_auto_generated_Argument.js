// --------- This code has been automatically generated !!! 2018-04-16T04:56:39.346Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/Argument_schema").Argument_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const LocalizedText = getFactory("LocalizedText");
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * An argument for a method.
 * 
 * @class Argument
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function Argument(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    //construction hook
    options = schema.construct_hook(options); 
    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        self.description =  null; /* new LocalizedText(null); */
        return ;
    }

    /**
      * The name of the argument.
      * @property name
      * @type {String}
      */
    self.name = initialize_field(schema.fields[0], options.name);

    /**
      * The nodeId of the Data type of the argument.
      * @property dataType
      * @type {NodeId}
      */
    self.dataType = initialize_field(schema.fields[1], options.dataType);

    /**
      * Whether the argument is an array type and the rank of the array if it is.
      * @property valueRank
      * @type {Int32}
      * @default  -1
      */
    self.valueRank = initialize_field(schema.fields[2], options.valueRank);

    /**
      * The number of dimensions if the argument is an array type and one or more dimensions have a fixed length.
      * @property arrayDimensions
      * @type {UInt32[]}
      * @default  null
      */
    self.arrayDimensions = initialize_field_array(schema.fields[3], options.arrayDimensions);

    /**
      * The description for the argument.
      * @property description
      * @type {LocalizedText}
      */
    self.description =  new LocalizedText( options.description);

   // Object.preventExtensions(self);
}
util.inherits(Argument,BaseUAObject);
Argument.prototype.encodingDefaultBinary = makeExpandedNodeId(298,0);
Argument.prototype.encodingDefaultXml = makeExpandedNodeId(297,0);
Argument.prototype._schema = schema;

const encode_String = _defaultTypeMap.String.encode;
const decode_String = _defaultTypeMap.String.decode;
const encode_NodeId = _defaultTypeMap.NodeId.encode;
const decode_NodeId = _defaultTypeMap.NodeId.decode;
const encode_Int32 = _defaultTypeMap.Int32.encode;
const decode_Int32 = _defaultTypeMap.Int32.decode;
const encode_UInt32 = _defaultTypeMap.UInt32.encode;
const decode_UInt32 = _defaultTypeMap.UInt32.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
Argument.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_String(this.name,stream);
    encode_NodeId(this.dataType,stream);
    encode_Int32(this.valueRank,stream);
    encodeArray(this.arrayDimensions, stream, encode_UInt32);
   this.description.encode(stream,options);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
Argument.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.name = decode_String(stream);
    this.dataType = decode_NodeId(stream);
    this.valueRank = decode_Int32(stream);
    this.arrayDimensions = decodeArray(stream, decode_UInt32);
    this.description.decode(stream);
};
Argument.possibleFields = [
  "name",
         "dataType",
         "valueRank",
         "arrayDimensions",
         "description"
];


exports.Argument = Argument;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("Argument",Argument);
