// --------- This code has been automatically generated !!! 2018-04-16T04:56:39.459Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/CallMethodResult_schema").CallMethodResult_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const DiagnosticInfo = getFactory("DiagnosticInfo");
const Variant = getFactory("Variant");
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * The result of a Method call.
 * 
 * @class CallMethodResult
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function CallMethodResult(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        self.inputArgumentDiagnosticInfos =  null; /* null array */
        self.outputArguments =  null; /* null array */
        return ;
    }

    /**
      * The StatusCode of the Method executed in the server.
      * @property statusCode
      * @type {StatusCode}
      */
    self.statusCode = initialize_field(schema.fields[0], options.statusCode);

    /**
      * The list of StatusCodes corresponding to the inputArguments.
      * @property inputArgumentResults
      * @type {StatusCode[]}
      */
    self.inputArgumentResults = initialize_field_array(schema.fields[1], options.inputArgumentResults);

    /**
      * The list of diagnostic information corresponding to the inputArguments.
      * @property inputArgumentDiagnosticInfos
      * @type {DiagnosticInfo[]}
      */
    self.inputArgumentDiagnosticInfos = [];
    if (options.inputArgumentDiagnosticInfos) {
        assert(_.isArray(options.inputArgumentDiagnosticInfos));
        self.inputArgumentDiagnosticInfos = options.inputArgumentDiagnosticInfos.map(function(e){ return new DiagnosticInfo(e); } );
    }

    /**
      * The list of output argument values. 
      * @property outputArguments
      * @type {Variant[]}
      */
    self.outputArguments = [];
    if (options.outputArguments) {
        assert(_.isArray(options.outputArguments));
        self.outputArguments = options.outputArguments.map(function(e){ return new Variant(e); } );
    }

   // Object.preventExtensions(self);
}
util.inherits(CallMethodResult,BaseUAObject);
CallMethodResult.prototype.encodingDefaultBinary = makeExpandedNodeId(709,0);
CallMethodResult.prototype.encodingDefaultXml = makeExpandedNodeId(708,0);
CallMethodResult.prototype._schema = schema;

const encode_StatusCode = _defaultTypeMap.StatusCode.encode;
const decode_StatusCode = _defaultTypeMap.StatusCode.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
CallMethodResult.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_StatusCode(this.statusCode,stream);
    encodeArray(this.inputArgumentResults, stream, encode_StatusCode);
    encodeArray(this.inputArgumentDiagnosticInfos,stream,function(obj,stream){ obj.encode(stream,options); }); 
    encodeArray(this.outputArguments,stream,function(obj,stream){ obj.encode(stream,options); }); 
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
CallMethodResult.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.statusCode = decode_StatusCode(stream);
    this.inputArgumentResults = decodeArray(stream, decode_StatusCode);
    this.inputArgumentDiagnosticInfos = decodeArray(stream, function(stream) { 
       const obj = new DiagnosticInfo(null);
       obj.decode(stream);
       return obj; 
    });
    this.outputArguments = decodeArray(stream, function(stream) { 
       const obj = new Variant(null);
       obj.decode(stream);
       return obj; 
    });
};
CallMethodResult.possibleFields = [
  "statusCode",
         "inputArgumentResults",
         "inputArgumentDiagnosticInfos",
         "outputArguments"
];


exports.CallMethodResult = CallMethodResult;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("CallMethodResult",CallMethodResult);
