// --------- This code has been automatically generated !!! 2018-04-16T04:56:39.501Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/ApplicationDescription_schema").ApplicationDescription_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const LocalizedText = getFactory("LocalizedText");
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class ApplicationDescription
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function ApplicationDescription(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        self.applicationName =  null; /* new LocalizedText(null); */
        return ;
    }

    /**
      * 
      * @property applicationUri
      * @type {String}
      */
    self.applicationUri = initialize_field(schema.fields[0], options.applicationUri);

    /**
      * 
      * @property productUri
      * @type {String}
      */
    self.productUri = initialize_field(schema.fields[1], options.productUri);

    /**
      * 
      * @property applicationName
      * @type {LocalizedText}
      */
    self.applicationName =  new LocalizedText( options.applicationName);

    /**
      * 
      * @property applicationType
      * @type {ApplicationType}
      */
    self.setApplicationType(initialize_field(schema.fields[3], options.applicationType));

    /**
      * 
      * @property gatewayServerUri
      * @type {String}
      */
    self.gatewayServerUri = initialize_field(schema.fields[4], options.gatewayServerUri);

    /**
      * 
      * @property discoveryProfileUri
      * @type {String}
      */
    self.discoveryProfileUri = initialize_field(schema.fields[5], options.discoveryProfileUri);

    /**
      * 
      * @property discoveryUrls
      * @type {String[]}
      */
    self.discoveryUrls = initialize_field_array(schema.fields[6], options.discoveryUrls);

   // Object.preventExtensions(self);
}
util.inherits(ApplicationDescription,BaseUAObject);

//## Define Enumeration setters
ApplicationDescription.prototype.setApplicationType = function(value) {
   const coercedValue = _enumerations.ApplicationType.typedEnum.get(value);
   /* istanbul ignore next */
   if (coercedValue === undefined || coercedValue === null) {
      throw new Error("value cannot be coerced to ApplicationType: " + value);
   }
   this.applicationType = coercedValue;
};
ApplicationDescription.prototype.encodingDefaultBinary = makeExpandedNodeId(310,0);
ApplicationDescription.prototype.encodingDefaultXml = makeExpandedNodeId(309,0);
ApplicationDescription.prototype._schema = schema;

const encode_String = _defaultTypeMap.String.encode;
const decode_String = _defaultTypeMap.String.decode;
const encode_ApplicationType = _enumerations.ApplicationType.encode;
const decode_ApplicationType = _enumerations.ApplicationType.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
ApplicationDescription.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_String(this.applicationUri,stream);
    encode_String(this.productUri,stream);
   this.applicationName.encode(stream,options);
    encode_ApplicationType(this.applicationType,stream);
    encode_String(this.gatewayServerUri,stream);
    encode_String(this.discoveryProfileUri,stream);
    encodeArray(this.discoveryUrls, stream, encode_String);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
ApplicationDescription.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.applicationUri = decode_String(stream);
    this.productUri = decode_String(stream);
    this.applicationName.decode(stream);
    this.applicationType = decode_ApplicationType(stream);
    this.gatewayServerUri = decode_String(stream);
    this.discoveryProfileUri = decode_String(stream);
    this.discoveryUrls = decodeArray(stream, decode_String);
};
ApplicationDescription.possibleFields = [
  "applicationUri",
         "productUri",
         "applicationName",
         "applicationType",
         "gatewayServerUri",
         "discoveryProfileUri",
         "discoveryUrls"
];


exports.ApplicationDescription = ApplicationDescription;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("ApplicationDescription",ApplicationDescription);
