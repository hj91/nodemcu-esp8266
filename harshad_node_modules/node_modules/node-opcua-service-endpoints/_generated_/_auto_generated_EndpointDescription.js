// --------- This code has been automatically generated !!! 2018-04-16T04:56:39.611Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/EndpointDescription_schema").EndpointDescription_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const ApplicationDescription = require("./_auto_generated_ApplicationDescription").ApplicationDescription;
const UserTokenPolicy = require("./_auto_generated_UserTokenPolicy").UserTokenPolicy;
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class EndpointDescription
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function EndpointDescription(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        self.server =  null; /* new ApplicationDescription(null); */
        self.userIdentityTokens =  null; /* null array */
        return ;
    }

    /**
      * 
      * @property endpointUrl
      * @type {String}
      */
    self.endpointUrl = initialize_field(schema.fields[0], options.endpointUrl);

    /**
      * 
      * @property server
      * @type {ApplicationDescription}
      */
    self.server =  new ApplicationDescription( options.server);

    /**
      * 
      * @property serverCertificate
      * @type {ByteString}
      */
    self.serverCertificate = initialize_field(schema.fields[2], options.serverCertificate);

    /**
      * 
      * @property securityMode
      * @type {MessageSecurityMode}
      */
    self.setSecurityMode(initialize_field(schema.fields[3], options.securityMode));

    /**
      * 
      * @property securityPolicyUri
      * @type {String}
      */
    self.securityPolicyUri = initialize_field(schema.fields[4], options.securityPolicyUri);

    /**
      * 
      * @property userIdentityTokens
      * @type {UserTokenPolicy[]}
      */
    self.userIdentityTokens = [];
    if (options.userIdentityTokens) {
        assert(_.isArray(options.userIdentityTokens));
        self.userIdentityTokens = options.userIdentityTokens.map(function(e){ return new UserTokenPolicy(e); } );
    }

    /**
      * 
      * @property transportProfileUri
      * @type {String}
      */
    self.transportProfileUri = initialize_field(schema.fields[6], options.transportProfileUri);

    /**
      * 
      * @property securityLevel
      * @type {Byte}
      */
    self.securityLevel = initialize_field(schema.fields[7], options.securityLevel);

   // Object.preventExtensions(self);
}
util.inherits(EndpointDescription,BaseUAObject);

//## Define Enumeration setters
EndpointDescription.prototype.setSecurityMode = function(value) {
   const coercedValue = _enumerations.MessageSecurityMode.typedEnum.get(value);
   /* istanbul ignore next */
   if (coercedValue === undefined || coercedValue === null) {
      throw new Error("value cannot be coerced to MessageSecurityMode: " + value);
   }
   this.securityMode = coercedValue;
};
EndpointDescription.prototype.encodingDefaultBinary = makeExpandedNodeId(314,0);
EndpointDescription.prototype.encodingDefaultXml = makeExpandedNodeId(313,0);
EndpointDescription.prototype._schema = schema;

const encode_String = _defaultTypeMap.String.encode;
const decode_String = _defaultTypeMap.String.decode;
const encode_ByteString = _defaultTypeMap.ByteString.encode;
const decode_ByteString = _defaultTypeMap.ByteString.decode;
const encode_MessageSecurityMode = _enumerations.MessageSecurityMode.encode;
const decode_MessageSecurityMode = _enumerations.MessageSecurityMode.decode;
const encode_Byte = _defaultTypeMap.Byte.encode;
const decode_Byte = _defaultTypeMap.Byte.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
EndpointDescription.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_String(this.endpointUrl,stream);
   this.server.encode(stream,options);
    encode_ByteString(this.serverCertificate,stream);
    encode_MessageSecurityMode(this.securityMode,stream);
    encode_String(this.securityPolicyUri,stream);
    encodeArray(this.userIdentityTokens,stream,function(obj,stream){ obj.encode(stream,options); }); 
    encode_String(this.transportProfileUri,stream);
    encode_Byte(this.securityLevel,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
EndpointDescription.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.endpointUrl = decode_String(stream);
    this.server.decode(stream);
    this.serverCertificate = decode_ByteString(stream);
    this.securityMode = decode_MessageSecurityMode(stream);
    this.securityPolicyUri = decode_String(stream);
    this.userIdentityTokens = decodeArray(stream, function(stream) { 
       const obj = new UserTokenPolicy(null);
       obj.decode(stream);
       return obj; 
    });
    this.transportProfileUri = decode_String(stream);
    this.securityLevel = decode_Byte(stream);
};
EndpointDescription.possibleFields = [
  "endpointUrl",
         "server",
         "serverCertificate",
         "securityMode",
         "securityPolicyUri",
         "userIdentityTokens",
         "transportProfileUri",
         "securityLevel"
];


exports.EndpointDescription = EndpointDescription;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("EndpointDescription",EndpointDescription);
