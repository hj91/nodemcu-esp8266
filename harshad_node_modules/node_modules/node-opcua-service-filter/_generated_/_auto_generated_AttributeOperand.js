// --------- This code has been automatically generated !!! 2018-04-16T04:56:45.692Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/AttributeOperand_schema").AttributeOperand_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const RelativePath = getFactory("RelativePath");
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;
const FilterOperand = require("./_auto_generated_FilterOperand").FilterOperand;

/**
 * 
 * @class AttributeOperand
 * @constructor
 * @extends FilterOperand
 * @param  options {Object}
 */
function AttributeOperand(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    FilterOperand.call(this,options);
    if (options === null) { 
        FilterOperand.call(this,options);
        self.browsePath =  null; /* new RelativePath(null); */
        return ;
    }

    /**
      * NodeId of a Node from the type system.
      * @property nodeId
      * @type {NodeId}
      */
    self.nodeId = initialize_field(schema.fields[0], options.nodeId);

    /**
      * An optional parameter used to identify or refer to an alias. An alias is a symbolic name that can be used to alias this operand and use it in other locations in the filter structure.
      * @property alias
      * @type {String}
      */
    self.alias = initialize_field(schema.fields[1], options.alias);

    /**
      * Browse path relative to the Node identified by the nodeId parameter.
      * @property browsePath
      * @type {RelativePath}
      */
    self.browsePath =  new RelativePath( options.browsePath);

    /**
      * 
      * @property attributeId
      * @type {IntegerId}
      */
    self.attributeId = initialize_field(schema.fields[3], options.attributeId);

    /**
      * This parameter is used to identify a single element of an array or a single range of indexes for an array. The first element is identified by index 0 (zero).
      * @property indexRange
      * @type {NumericRange}
      */
    self.indexRange = initialize_field(schema.fields[4], options.indexRange);

   // Object.preventExtensions(self);
}
util.inherits(AttributeOperand,FilterOperand);
AttributeOperand.prototype.encodingDefaultBinary = makeExpandedNodeId(600,0);
AttributeOperand.prototype.encodingDefaultXml = makeExpandedNodeId(599,0);
AttributeOperand.prototype._schema = schema;

const encode_NodeId = _defaultTypeMap.NodeId.encode;
const decode_NodeId = _defaultTypeMap.NodeId.decode;
const encode_String = _defaultTypeMap.String.encode;
const decode_String = _defaultTypeMap.String.decode;
const encode_IntegerId = _defaultTypeMap.IntegerId.encode;
const decode_IntegerId = _defaultTypeMap.IntegerId.decode;
const encode_NumericRange = _defaultTypeMap.NumericRange.encode;
const decode_NumericRange = _defaultTypeMap.NumericRange.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
AttributeOperand.prototype.encode = function(stream,options) {
    // call base class implementation first
    FilterOperand.prototype.encode.call(this,stream,options);
    encode_NodeId(this.nodeId,stream);
    encode_String(this.alias,stream);
   this.browsePath.encode(stream,options);
    encode_IntegerId(this.attributeId,stream);
    encode_NumericRange(this.indexRange,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
AttributeOperand.prototype.decode = function(stream) {
    // call base class implementation first
    FilterOperand.prototype.decode.call(this,stream);
    this.nodeId = decode_NodeId(stream);
    this.alias = decode_String(stream);
    this.browsePath.decode(stream);
    this.attributeId = decode_IntegerId(stream);
    this.indexRange = decode_NumericRange(stream);
};
AttributeOperand.possibleFields = [
  "nodeId",
         "alias",
         "browsePath",
         "attributeId",
         "indexRange"
];


exports.AttributeOperand = AttributeOperand;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("AttributeOperand",AttributeOperand);
