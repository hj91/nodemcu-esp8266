// --------- This code has been automatically generated !!! 2018-04-16T04:56:45.552Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/SimpleAttributeOperand_schema").SimpleAttributeOperand_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const QualifiedName = getFactory("QualifiedName");
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;
const FilterOperand = require("./_auto_generated_FilterOperand").FilterOperand;

/**
 * 
 * @class SimpleAttributeOperand
 * @constructor
 * @extends FilterOperand
 * @param  options {Object}
 */
function SimpleAttributeOperand(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    FilterOperand.call(this,options);
    if (options === null) { 
        FilterOperand.call(this,options);
        self.browsePath =  null; /* null array */
        return ;
    }

    /**
      * NodeId of a TypeDefinitionNode.
      * @property typeId
      * @type {NodeId}
      */
    self.typeId = initialize_field(schema.fields[0], options.typeId);

    /**
      * 
      * @property browsePath
      * @type {QualifiedName[]}
      */
    self.browsePath = [];
    if (options.browsePath) {
        assert(_.isArray(options.browsePath));
        self.browsePath = options.browsePath.map(function(e){ return new QualifiedName(e); } );
    }

    /**
      * 
      * @property attributeId
      * @type {IntegerId}
      */
    self.attributeId = initialize_field(schema.fields[2], options.attributeId);

    /**
      * 
      * @property indexRange
      * @type {NumericRange}
      */
    self.indexRange = initialize_field(schema.fields[3], options.indexRange);

   // Object.preventExtensions(self);
}
util.inherits(SimpleAttributeOperand,FilterOperand);
SimpleAttributeOperand.prototype.encodingDefaultBinary = makeExpandedNodeId(603,0);
SimpleAttributeOperand.prototype.encodingDefaultXml = makeExpandedNodeId(602,0);
SimpleAttributeOperand.prototype._schema = schema;

const encode_NodeId = _defaultTypeMap.NodeId.encode;
const decode_NodeId = _defaultTypeMap.NodeId.decode;
const encode_IntegerId = _defaultTypeMap.IntegerId.encode;
const decode_IntegerId = _defaultTypeMap.IntegerId.decode;
const encode_NumericRange = _defaultTypeMap.NumericRange.encode;
const decode_NumericRange = _defaultTypeMap.NumericRange.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
SimpleAttributeOperand.prototype.encode = function(stream,options) {
    // call base class implementation first
    FilterOperand.prototype.encode.call(this,stream,options);
    encode_NodeId(this.typeId,stream);
    encodeArray(this.browsePath,stream,function(obj,stream){ obj.encode(stream,options); }); 
    encode_IntegerId(this.attributeId,stream);
    encode_NumericRange(this.indexRange,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
SimpleAttributeOperand.prototype.decode = function(stream) {
    // call base class implementation first
    FilterOperand.prototype.decode.call(this,stream);
    this.typeId = decode_NodeId(stream);
    this.browsePath = decodeArray(stream, function(stream) { 
       const obj = new QualifiedName(null);
       obj.decode(stream);
       return obj; 
    });
    this.attributeId = decode_IntegerId(stream);
    this.indexRange = decode_NumericRange(stream);
};
SimpleAttributeOperand.possibleFields = [
  "typeId",
         "browsePath",
         "attributeId",
         "indexRange"
];


exports.SimpleAttributeOperand = SimpleAttributeOperand;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("SimpleAttributeOperand",SimpleAttributeOperand);
