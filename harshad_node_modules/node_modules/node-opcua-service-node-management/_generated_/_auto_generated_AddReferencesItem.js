// --------- This code has been automatically generated !!! 2018-04-16T04:56:42.128Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/AddReferencesItem_schema").AddReferencesItem_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class AddReferencesItem
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function AddReferencesItem(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        return ;
    }

    /**
      * 
      * @property sourceNodeId
      * @type {NodeId}
      */
    self.sourceNodeId = initialize_field(schema.fields[0], options.sourceNodeId);

    /**
      * 
      * @property referenceTypeId
      * @type {NodeId}
      */
    self.referenceTypeId = initialize_field(schema.fields[1], options.referenceTypeId);

    /**
      * 
      * @property isForward
      * @type {Boolean}
      */
    self.isForward = initialize_field(schema.fields[2], options.isForward);

    /**
      * 
      * @property targetServerUri
      * @type {String}
      */
    self.targetServerUri = initialize_field(schema.fields[3], options.targetServerUri);

    /**
      * 
      * @property targetNodeId
      * @type {ExpandedNodeId}
      */
    self.targetNodeId = initialize_field(schema.fields[4], options.targetNodeId);

    /**
      * 
      * @property targetNodeClass
      * @type {NodeClass}
      */
    self.setTargetNodeClass(initialize_field(schema.fields[5], options.targetNodeClass));

   // Object.preventExtensions(self);
}
util.inherits(AddReferencesItem,BaseUAObject);

//## Define Enumeration setters
AddReferencesItem.prototype.setTargetNodeClass = function(value) {
   const coercedValue = _enumerations.NodeClass.typedEnum.get(value);
   /* istanbul ignore next */
   if (coercedValue === undefined || coercedValue === null) {
      throw new Error("value cannot be coerced to NodeClass: " + value);
   }
   this.targetNodeClass = coercedValue;
};
AddReferencesItem.prototype.encodingDefaultBinary = makeExpandedNodeId(381,0);
AddReferencesItem.prototype.encodingDefaultXml = makeExpandedNodeId(380,0);
AddReferencesItem.prototype._schema = schema;

const encode_NodeId = _defaultTypeMap.NodeId.encode;
const decode_NodeId = _defaultTypeMap.NodeId.decode;
const encode_Boolean = _defaultTypeMap.Boolean.encode;
const decode_Boolean = _defaultTypeMap.Boolean.decode;
const encode_String = _defaultTypeMap.String.encode;
const decode_String = _defaultTypeMap.String.decode;
const encode_ExpandedNodeId = _defaultTypeMap.ExpandedNodeId.encode;
const decode_ExpandedNodeId = _defaultTypeMap.ExpandedNodeId.decode;
const encode_NodeClass = _enumerations.NodeClass.encode;
const decode_NodeClass = _enumerations.NodeClass.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
AddReferencesItem.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_NodeId(this.sourceNodeId,stream);
    encode_NodeId(this.referenceTypeId,stream);
    encode_Boolean(this.isForward,stream);
    encode_String(this.targetServerUri,stream);
    encode_ExpandedNodeId(this.targetNodeId,stream);
    encode_NodeClass(this.targetNodeClass,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
AddReferencesItem.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.sourceNodeId = decode_NodeId(stream);
    this.referenceTypeId = decode_NodeId(stream);
    this.isForward = decode_Boolean(stream);
    this.targetServerUri = decode_String(stream);
    this.targetNodeId = decode_ExpandedNodeId(stream);
    this.targetNodeClass = decode_NodeClass(stream);
};
AddReferencesItem.possibleFields = [
  "sourceNodeId",
         "referenceTypeId",
         "isForward",
         "targetServerUri",
         "targetNodeId",
         "targetNodeClass"
];


exports.AddReferencesItem = AddReferencesItem;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("AddReferencesItem",AddReferencesItem);
