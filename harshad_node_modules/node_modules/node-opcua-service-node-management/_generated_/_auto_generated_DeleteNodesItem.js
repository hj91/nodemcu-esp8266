// --------- This code has been automatically generated !!! 2018-04-16T04:56:42.158Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/DeleteNodesItem_schema").DeleteNodesItem_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class DeleteNodesItem
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function DeleteNodesItem(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        return ;
    }

    /**
      * 
      * @property nodeId
      * @type {NodeId}
      */
    self.nodeId = initialize_field(schema.fields[0], options.nodeId);

    /**
      * 
      * @property deleteTargetReferences
      * @type {Boolean}
      */
    self.deleteTargetReferences = initialize_field(schema.fields[1], options.deleteTargetReferences);

   // Object.preventExtensions(self);
}
util.inherits(DeleteNodesItem,BaseUAObject);
DeleteNodesItem.prototype.encodingDefaultBinary = makeExpandedNodeId(384,0);
DeleteNodesItem.prototype.encodingDefaultXml = makeExpandedNodeId(383,0);
DeleteNodesItem.prototype._schema = schema;

const encode_NodeId = _defaultTypeMap.NodeId.encode;
const decode_NodeId = _defaultTypeMap.NodeId.decode;
const encode_Boolean = _defaultTypeMap.Boolean.encode;
const decode_Boolean = _defaultTypeMap.Boolean.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
DeleteNodesItem.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_NodeId(this.nodeId,stream);
    encode_Boolean(this.deleteTargetReferences,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
DeleteNodesItem.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.nodeId = decode_NodeId(stream);
    this.deleteTargetReferences = decode_Boolean(stream);
};
DeleteNodesItem.possibleFields = [
  "nodeId",
         "deleteTargetReferences"
];


exports.DeleteNodesItem = DeleteNodesItem;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("DeleteNodesItem",DeleteNodesItem);
