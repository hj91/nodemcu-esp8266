// --------- This code has been automatically generated !!! 2018-04-16T04:56:57.960Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/NodeTypeDescription_schema").NodeTypeDescription_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const QueryDataDescription = require("./_auto_generated_QueryDataDescription").QueryDataDescription;
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class NodeTypeDescription
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function NodeTypeDescription(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        self.dataToReturn =  null; /* null array */
        return ;
    }

    /**
      * NodeId of the originating TypeDefinitionNode of the instances for which data is to be returned.
      * @property typeDefinitionNode
      * @type {ExpandedNodeId}
      */
    self.typeDefinitionNode = initialize_field(schema.fields[0], options.typeDefinitionNode);

    /**
      * A flag that indicates whether the Server should include instances of subtypes of the TypeDefinitionNode in the list of instances of the Node type.
      * @property includeSubtypes
      * @type {Boolean}
      */
    self.includeSubtypes = initialize_field(schema.fields[1], options.includeSubtypes);

    /**
      * Specifies an Attribute or Reference from the originating typeDefinitionNode along a given relativePath for which to return data. This structure is defined in-line with the following indented items.
      * @property dataToReturn
      * @type {QueryDataDescription[]}
      */
    self.dataToReturn = [];
    if (options.dataToReturn) {
        assert(_.isArray(options.dataToReturn));
        self.dataToReturn = options.dataToReturn.map(function(e){ return new QueryDataDescription(e); } );
    }

   // Object.preventExtensions(self);
}
util.inherits(NodeTypeDescription,BaseUAObject);
NodeTypeDescription.prototype.encodingDefaultBinary = makeExpandedNodeId(575,0);
NodeTypeDescription.prototype.encodingDefaultXml = makeExpandedNodeId(574,0);
NodeTypeDescription.prototype._schema = schema;

const encode_ExpandedNodeId = _defaultTypeMap.ExpandedNodeId.encode;
const decode_ExpandedNodeId = _defaultTypeMap.ExpandedNodeId.decode;
const encode_Boolean = _defaultTypeMap.Boolean.encode;
const decode_Boolean = _defaultTypeMap.Boolean.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
NodeTypeDescription.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_ExpandedNodeId(this.typeDefinitionNode,stream);
    encode_Boolean(this.includeSubtypes,stream);
    encodeArray(this.dataToReturn,stream,function(obj,stream){ obj.encode(stream,options); }); 
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
NodeTypeDescription.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.typeDefinitionNode = decode_ExpandedNodeId(stream);
    this.includeSubtypes = decode_Boolean(stream);
    this.dataToReturn = decodeArray(stream, function(stream) { 
       const obj = new QueryDataDescription(null);
       obj.decode(stream);
       return obj; 
    });
};
NodeTypeDescription.possibleFields = [
  "typeDefinitionNode",
         "includeSubtypes",
         "dataToReturn"
];


exports.NodeTypeDescription = NodeTypeDescription;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("NodeTypeDescription",NodeTypeDescription);
