// --------- This code has been automatically generated !!! 2018-04-16T04:56:36.342Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/OpenSecureChannelRequest_schema").OpenSecureChannelRequest_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const RequestHeader = require("./_auto_generated_RequestHeader").RequestHeader;
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class OpenSecureChannelRequest
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function OpenSecureChannelRequest(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        self.requestHeader =  null; /* new RequestHeader(null); */
        return ;
    }

    /**
      * 
      * @property requestHeader
      * @type {RequestHeader}
      */
    self.requestHeader =  new RequestHeader( options.requestHeader);

    /**
      * The version of protocol used by the client
      * @property clientProtocolVersion
      * @type {UInt32}
      */
    self.clientProtocolVersion = initialize_field(schema.fields[1], options.clientProtocolVersion);

    /**
      * Whether the channel is being created or renewed
      * @property requestType
      * @type {SecurityTokenRequestType}
      */
    self.setRequestType(initialize_field(schema.fields[2], options.requestType));

    /**
      * The security mode to use with the channel.
      * @property securityMode
      * @type {MessageSecurityMode}
      */
    self.setSecurityMode(initialize_field(schema.fields[3], options.securityMode));

    /**
      * A random number generated by the client.
      * @property clientNonce
      * @type {ByteString}
      */
    self.clientNonce = initialize_field(schema.fields[4], options.clientNonce);

    /**
      * The channel lifetime in milliseconds.
      * @property requestedLifetime
      * @type {UInt32}
      */
    self.requestedLifetime = initialize_field(schema.fields[5], options.requestedLifetime);

   // Object.preventExtensions(self);
}
util.inherits(OpenSecureChannelRequest,BaseUAObject);

//## Define Enumeration setters
OpenSecureChannelRequest.prototype.setRequestType = function(value) {
   const coercedValue = _enumerations.SecurityTokenRequestType.typedEnum.get(value);
   /* istanbul ignore next */
   if (coercedValue === undefined || coercedValue === null) {
      throw new Error("value cannot be coerced to SecurityTokenRequestType: " + value);
   }
   this.requestType = coercedValue;
};
OpenSecureChannelRequest.prototype.setSecurityMode = function(value) {
   const coercedValue = _enumerations.MessageSecurityMode.typedEnum.get(value);
   /* istanbul ignore next */
   if (coercedValue === undefined || coercedValue === null) {
      throw new Error("value cannot be coerced to MessageSecurityMode: " + value);
   }
   this.securityMode = coercedValue;
};
OpenSecureChannelRequest.prototype.encodingDefaultBinary = makeExpandedNodeId(446,0);
OpenSecureChannelRequest.prototype.encodingDefaultXml = makeExpandedNodeId(445,0);
OpenSecureChannelRequest.prototype._schema = schema;

const encode_UInt32 = _defaultTypeMap.UInt32.encode;
const decode_UInt32 = _defaultTypeMap.UInt32.decode;
const encode_SecurityTokenRequestType = _enumerations.SecurityTokenRequestType.encode;
const decode_SecurityTokenRequestType = _enumerations.SecurityTokenRequestType.decode;
const encode_MessageSecurityMode = _enumerations.MessageSecurityMode.encode;
const decode_MessageSecurityMode = _enumerations.MessageSecurityMode.decode;
const encode_ByteString = _defaultTypeMap.ByteString.encode;
const decode_ByteString = _defaultTypeMap.ByteString.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
OpenSecureChannelRequest.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
   this.requestHeader.encode(stream,options);
    encode_UInt32(this.clientProtocolVersion,stream);
    encode_SecurityTokenRequestType(this.requestType,stream);
    encode_MessageSecurityMode(this.securityMode,stream);
    encode_ByteString(this.clientNonce,stream);
    encode_UInt32(this.requestedLifetime,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
OpenSecureChannelRequest.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.requestHeader.decode(stream);
    this.clientProtocolVersion = decode_UInt32(stream);
    this.requestType = decode_SecurityTokenRequestType(stream);
    this.securityMode = decode_MessageSecurityMode(stream);
    this.clientNonce = decode_ByteString(stream);
    this.requestedLifetime = decode_UInt32(stream);
};
OpenSecureChannelRequest.possibleFields = [
  "requestHeader",
         "clientProtocolVersion",
         "requestType",
         "securityMode",
         "clientNonce",
         "requestedLifetime"
];


exports.OpenSecureChannelRequest = OpenSecureChannelRequest;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("OpenSecureChannelRequest",OpenSecureChannelRequest);
