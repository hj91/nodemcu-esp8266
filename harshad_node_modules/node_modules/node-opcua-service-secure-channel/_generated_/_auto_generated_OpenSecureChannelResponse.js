// --------- This code has been automatically generated !!! 2018-04-16T04:56:36.348Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/OpenSecureChannelResponse_schema").OpenSecureChannelResponse_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const ResponseHeader = require("./_auto_generated_ResponseHeader").ResponseHeader;
const ChannelSecurityToken = require("./_auto_generated_ChannelSecurityToken").ChannelSecurityToken;
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class OpenSecureChannelResponse
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function OpenSecureChannelResponse(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        self.responseHeader =  null; /* new ResponseHeader(null); */
        self.securityToken =  null; /* new ChannelSecurityToken(null); */
        return ;
    }

    /**
      * 
      * @property responseHeader
      * @type {ResponseHeader}
      */
    self.responseHeader =  new ResponseHeader( options.responseHeader);

    /**
      * 
      * @property serverProtocolVersion
      * @type {UInt32}
      */
    self.serverProtocolVersion = initialize_field(schema.fields[1], options.serverProtocolVersion);

    /**
      * 
      * @property securityToken
      * @type {ChannelSecurityToken}
      */
    self.securityToken =  new ChannelSecurityToken( options.securityToken);

    /**
      * 
      * @property serverNonce
      * @type {ByteString}
      */
    self.serverNonce = initialize_field(schema.fields[3], options.serverNonce);

   // Object.preventExtensions(self);
}
util.inherits(OpenSecureChannelResponse,BaseUAObject);
OpenSecureChannelResponse.prototype.encodingDefaultBinary = makeExpandedNodeId(449,0);
OpenSecureChannelResponse.prototype.encodingDefaultXml = makeExpandedNodeId(448,0);
OpenSecureChannelResponse.prototype._schema = schema;

const encode_UInt32 = _defaultTypeMap.UInt32.encode;
const decode_UInt32 = _defaultTypeMap.UInt32.decode;
const encode_ByteString = _defaultTypeMap.ByteString.encode;
const decode_ByteString = _defaultTypeMap.ByteString.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
OpenSecureChannelResponse.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
   this.responseHeader.encode(stream,options);
    encode_UInt32(this.serverProtocolVersion,stream);
   this.securityToken.encode(stream,options);
    encode_ByteString(this.serverNonce,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
OpenSecureChannelResponse.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.responseHeader.decode(stream);
    this.serverProtocolVersion = decode_UInt32(stream);
    this.securityToken.decode(stream);
    this.serverNonce = decode_ByteString(stream);
};
OpenSecureChannelResponse.possibleFields = [
  "responseHeader",
         "serverProtocolVersion",
         "securityToken",
         "serverNonce"
];


exports.OpenSecureChannelResponse = OpenSecureChannelResponse;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("OpenSecureChannelResponse",OpenSecureChannelResponse);
