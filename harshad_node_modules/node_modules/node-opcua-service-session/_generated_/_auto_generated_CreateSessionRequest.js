// --------- This code has been automatically generated !!! 2018-04-16T04:56:48.110Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/CreateSessionRequest_schema").CreateSessionRequest_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const RequestHeader = getFactory("RequestHeader");
const ApplicationDescription = getFactory("ApplicationDescription");
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * Creates a new session with the server.
 * 
 * @class CreateSessionRequest
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function CreateSessionRequest(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        self.requestHeader =  null; /* new RequestHeader(null); */
        self.clientDescription =  null; /* new ApplicationDescription(null); */
        return ;
    }

    /**
      * 
      * @property requestHeader
      * @type {RequestHeader}
      */
    self.requestHeader =  new RequestHeader( options.requestHeader);

    /**
      * Describes the client application.
      * @property clientDescription
      * @type {ApplicationDescription}
      */
    self.clientDescription =  new ApplicationDescription( options.clientDescription);

    /**
      * The URI of the server that the client wants to create a session with.
      * @property serverUri
      * @type {String}
      */
    self.serverUri = initialize_field(schema.fields[2], options.serverUri);

    /**
      * The URL that the client used to connect to the server.
      * @property endpointUrl
      * @type {String}
      */
    self.endpointUrl = initialize_field(schema.fields[3], options.endpointUrl);

    /**
      * A name for the session provided by the client.
      * @property sessionName
      * @type {String}
      */
    self.sessionName = initialize_field(schema.fields[4], options.sessionName);

    /**
      * A random number generated by the client.
      * @property clientNonce
      * @type {ByteString}
      */
    self.clientNonce = initialize_field(schema.fields[5], options.clientNonce);

    /**
      * The application certificate for the client.
      * @property clientCertificate
      * @type {ByteString}
      */
    self.clientCertificate = initialize_field(schema.fields[6], options.clientCertificate);

    /**
      * The requested session timeout in milliseconds.
      * @property requestedSessionTimeout
      * @type {Duration}
      */
    self.requestedSessionTimeout = initialize_field(schema.fields[7], options.requestedSessionTimeout);

    /**
      * The maximum message size accepted by the client.
      * @property maxResponseMessageSize
      * @type {UInt32}
      */
    self.maxResponseMessageSize = initialize_field(schema.fields[8], options.maxResponseMessageSize);

   // Object.preventExtensions(self);
}
util.inherits(CreateSessionRequest,BaseUAObject);
CreateSessionRequest.prototype.encodingDefaultBinary = makeExpandedNodeId(461,0);
CreateSessionRequest.prototype.encodingDefaultXml = makeExpandedNodeId(460,0);
CreateSessionRequest.prototype._schema = schema;

const encode_String = _defaultTypeMap.String.encode;
const decode_String = _defaultTypeMap.String.decode;
const encode_ByteString = _defaultTypeMap.ByteString.encode;
const decode_ByteString = _defaultTypeMap.ByteString.decode;
const encode_Duration = _defaultTypeMap.Duration.encode;
const decode_Duration = _defaultTypeMap.Duration.decode;
const encode_UInt32 = _defaultTypeMap.UInt32.encode;
const decode_UInt32 = _defaultTypeMap.UInt32.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
CreateSessionRequest.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
   this.requestHeader.encode(stream,options);
   this.clientDescription.encode(stream,options);
    encode_String(this.serverUri,stream);
    encode_String(this.endpointUrl,stream);
    encode_String(this.sessionName,stream);
    encode_ByteString(this.clientNonce,stream);
    encode_ByteString(this.clientCertificate,stream);
    encode_Duration(this.requestedSessionTimeout,stream);
    encode_UInt32(this.maxResponseMessageSize,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
CreateSessionRequest.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.requestHeader.decode(stream);
    this.clientDescription.decode(stream);
    this.serverUri = decode_String(stream);
    this.endpointUrl = decode_String(stream);
    this.sessionName = decode_String(stream);
    this.clientNonce = decode_ByteString(stream);
    this.clientCertificate = decode_ByteString(stream);
    this.requestedSessionTimeout = decode_Duration(stream);
    this.maxResponseMessageSize = decode_UInt32(stream);
};
CreateSessionRequest.possibleFields = [
  "requestHeader",
         "clientDescription",
         "serverUri",
         "endpointUrl",
         "sessionName",
         "clientNonce",
         "clientCertificate",
         "requestedSessionTimeout",
         "maxResponseMessageSize"
];


exports.CreateSessionRequest = CreateSessionRequest;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("CreateSessionRequest",CreateSessionRequest);
