// --------- This code has been automatically generated !!! 2018-04-16T04:56:48.166Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/IssuedIdentityToken_schema").IssuedIdentityToken_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * A token representing a user identified by a WS-Security XML token.
 * 
 * @class IssuedIdentityToken
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function IssuedIdentityToken(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        return ;
    }

    /**
      * The policy id specified in a user token policy for the endpoint being used.
      * @property policyId
      * @type {String}
      */
    self.policyId = initialize_field(schema.fields[0], options.policyId);

    /**
      * The XML token encrypted with the server certificate.
      * @property tokenData
      * @type {ByteString}
      */
    self.tokenData = initialize_field(schema.fields[1], options.tokenData);

    /**
      * The algorithm used to encrypt the password.
      * @property encryptionAlgorithm
      * @type {String}
      */
    self.encryptionAlgorithm = initialize_field(schema.fields[2], options.encryptionAlgorithm);

   // Object.preventExtensions(self);
}
util.inherits(IssuedIdentityToken,BaseUAObject);
IssuedIdentityToken.prototype.encodingDefaultBinary = makeExpandedNodeId(940,0);
IssuedIdentityToken.prototype.encodingDefaultXml = makeExpandedNodeId(939,0);
IssuedIdentityToken.prototype._schema = schema;

const encode_String = _defaultTypeMap.String.encode;
const decode_String = _defaultTypeMap.String.decode;
const encode_ByteString = _defaultTypeMap.ByteString.encode;
const decode_ByteString = _defaultTypeMap.ByteString.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
IssuedIdentityToken.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_String(this.policyId,stream);
    encode_ByteString(this.tokenData,stream);
    encode_String(this.encryptionAlgorithm,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
IssuedIdentityToken.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.policyId = decode_String(stream);
    this.tokenData = decode_ByteString(stream);
    this.encryptionAlgorithm = decode_String(stream);
};
IssuedIdentityToken.possibleFields = [
  "policyId",
         "tokenData",
         "encryptionAlgorithm"
];


exports.IssuedIdentityToken = IssuedIdentityToken;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("IssuedIdentityToken",IssuedIdentityToken);
