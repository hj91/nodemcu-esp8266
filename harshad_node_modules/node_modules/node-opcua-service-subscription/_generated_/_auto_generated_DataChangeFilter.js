// --------- This code has been automatically generated !!! 2018-04-16T04:56:54.774Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/DataChangeFilter_schema").DataChangeFilter_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class DataChangeFilter
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function DataChangeFilter(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        return ;
    }

    /**
      * 
      * @property trigger
      * @type {DataChangeTrigger}
      */
    self.setTrigger(initialize_field(schema.fields[0], options.trigger));

    /**
      * 
      * @property deadbandType
      * @type {DeadbandType}
      */
    self.setDeadbandType(initialize_field(schema.fields[1], options.deadbandType));

    /**
      * 
      * @property deadbandValue
      * @type {Double}
      */
    self.deadbandValue = initialize_field(schema.fields[2], options.deadbandValue);

   // Object.preventExtensions(self);
}
util.inherits(DataChangeFilter,BaseUAObject);

//## Define Enumeration setters
DataChangeFilter.prototype.setTrigger = function(value) {
   const coercedValue = _enumerations.DataChangeTrigger.typedEnum.get(value);
   /* istanbul ignore next */
   if (coercedValue === undefined || coercedValue === null) {
      throw new Error("value cannot be coerced to DataChangeTrigger: " + value);
   }
   this.trigger = coercedValue;
};
DataChangeFilter.prototype.setDeadbandType = function(value) {
   const coercedValue = _enumerations.DeadbandType.typedEnum.get(value);
   /* istanbul ignore next */
   if (coercedValue === undefined || coercedValue === null) {
      throw new Error("value cannot be coerced to DeadbandType: " + value);
   }
   this.deadbandType = coercedValue;
};
DataChangeFilter.prototype.encodingDefaultBinary = makeExpandedNodeId(724,0);
DataChangeFilter.prototype.encodingDefaultXml = makeExpandedNodeId(723,0);
DataChangeFilter.prototype._schema = schema;

const encode_DataChangeTrigger = _enumerations.DataChangeTrigger.encode;
const decode_DataChangeTrigger = _enumerations.DataChangeTrigger.decode;
const encode_DeadbandType = _enumerations.DeadbandType.encode;
const decode_DeadbandType = _enumerations.DeadbandType.decode;
const encode_Double = _defaultTypeMap.Double.encode;
const decode_Double = _defaultTypeMap.Double.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
DataChangeFilter.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_DataChangeTrigger(this.trigger,stream);
    encode_DeadbandType(this.deadbandType,stream);
    encode_Double(this.deadbandValue,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
DataChangeFilter.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.trigger = decode_DataChangeTrigger(stream);
    this.deadbandType = decode_DeadbandType(stream);
    this.deadbandValue = decode_Double(stream);
};
DataChangeFilter.possibleFields = [
  "trigger",
         "deadbandType",
         "deadbandValue"
];


exports.DataChangeFilter = DataChangeFilter;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("DataChangeFilter",DataChangeFilter);
