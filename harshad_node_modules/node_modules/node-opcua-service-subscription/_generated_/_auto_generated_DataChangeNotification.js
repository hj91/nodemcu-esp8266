// --------- This code has been automatically generated !!! 2018-04-16T04:56:54.761Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/DataChangeNotification_schema").DataChangeNotification_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const MonitoredItemNotification = require("./_auto_generated_MonitoredItemNotification").MonitoredItemNotification;
const DiagnosticInfo = getFactory("DiagnosticInfo");
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class DataChangeNotification
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function DataChangeNotification(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        self.monitoredItems =  null; /* null array */
        self.diagnosticInfos =  null; /* null array */
        return ;
    }

    /**
      * 
      * @property monitoredItems
      * @type {MonitoredItemNotification[]}
      */
    self.monitoredItems = [];
    if (options.monitoredItems) {
        assert(_.isArray(options.monitoredItems));
        self.monitoredItems = options.monitoredItems.map(function(e){ return new MonitoredItemNotification(e); } );
    }

    /**
      * 
      * @property diagnosticInfos
      * @type {DiagnosticInfo[]}
      */
    self.diagnosticInfos = [];
    if (options.diagnosticInfos) {
        assert(_.isArray(options.diagnosticInfos));
        self.diagnosticInfos = options.diagnosticInfos.map(function(e){ return new DiagnosticInfo(e); } );
    }

   // Object.preventExtensions(self);
}
util.inherits(DataChangeNotification,BaseUAObject);
DataChangeNotification.prototype.encodingDefaultBinary = makeExpandedNodeId(811,0);
DataChangeNotification.prototype.encodingDefaultXml = makeExpandedNodeId(810,0);
DataChangeNotification.prototype._schema = schema;

/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
DataChangeNotification.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encodeArray(this.monitoredItems,stream,function(obj,stream){ obj.encode(stream,options); }); 
    encodeArray(this.diagnosticInfos,stream,function(obj,stream){ obj.encode(stream,options); }); 
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
DataChangeNotification.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.monitoredItems = decodeArray(stream, function(stream) { 
       const obj = new MonitoredItemNotification(null);
       obj.decode(stream);
       return obj; 
    });
    this.diagnosticInfos = decodeArray(stream, function(stream) { 
       const obj = new DiagnosticInfo(null);
       obj.decode(stream);
       return obj; 
    });
};
DataChangeNotification.possibleFields = [
  "monitoredItems",
         "diagnosticInfos"
];


exports.DataChangeNotification = DataChangeNotification;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("DataChangeNotification",DataChangeNotification);
