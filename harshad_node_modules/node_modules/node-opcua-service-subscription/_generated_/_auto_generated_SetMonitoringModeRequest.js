// --------- This code has been automatically generated !!! 2018-04-16T04:56:54.806Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/SetMonitoringModeRequest_schema").SetMonitoringModeRequest_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const RequestHeader = getFactory("RequestHeader");
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class SetMonitoringModeRequest
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function SetMonitoringModeRequest(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        self.requestHeader =  null; /* new RequestHeader(null); */
        return ;
    }

    /**
      * 
      * @property requestHeader
      * @type {RequestHeader}
      */
    self.requestHeader =  new RequestHeader( options.requestHeader);

    /**
      * 
      * @property subscriptionId
      * @type {IntegerId}
      */
    self.subscriptionId = initialize_field(schema.fields[1], options.subscriptionId);

    /**
      * 
      * @property monitoringMode
      * @type {MonitoringMode}
      */
    self.setMonitoringMode(initialize_field(schema.fields[2], options.monitoringMode));

    /**
      * 
      * @property monitoredItemIds
      * @type {IntegerId[]}
      */
    self.monitoredItemIds = initialize_field_array(schema.fields[3], options.monitoredItemIds);

   // Object.preventExtensions(self);
}
util.inherits(SetMonitoringModeRequest,BaseUAObject);

//## Define Enumeration setters
SetMonitoringModeRequest.prototype.setMonitoringMode = function(value) {
   const coercedValue = _enumerations.MonitoringMode.typedEnum.get(value);
   /* istanbul ignore next */
   if (coercedValue === undefined || coercedValue === null) {
      throw new Error("value cannot be coerced to MonitoringMode: " + value);
   }
   this.monitoringMode = coercedValue;
};
SetMonitoringModeRequest.prototype.encodingDefaultBinary = makeExpandedNodeId(769,0);
SetMonitoringModeRequest.prototype.encodingDefaultXml = makeExpandedNodeId(768,0);
SetMonitoringModeRequest.prototype._schema = schema;

const encode_IntegerId = _defaultTypeMap.IntegerId.encode;
const decode_IntegerId = _defaultTypeMap.IntegerId.decode;
const encode_MonitoringMode = _enumerations.MonitoringMode.encode;
const decode_MonitoringMode = _enumerations.MonitoringMode.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
SetMonitoringModeRequest.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
   this.requestHeader.encode(stream,options);
    encode_IntegerId(this.subscriptionId,stream);
    encode_MonitoringMode(this.monitoringMode,stream);
    encodeArray(this.monitoredItemIds, stream, encode_IntegerId);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
SetMonitoringModeRequest.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.requestHeader.decode(stream);
    this.subscriptionId = decode_IntegerId(stream);
    this.monitoringMode = decode_MonitoringMode(stream);
    this.monitoredItemIds = decodeArray(stream, decode_IntegerId);
};
SetMonitoringModeRequest.possibleFields = [
  "requestHeader",
         "subscriptionId",
         "monitoringMode",
         "monitoredItemIds"
];


exports.SetMonitoringModeRequest = SetMonitoringModeRequest;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("SetMonitoringModeRequest",SetMonitoringModeRequest);
