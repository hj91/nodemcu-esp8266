"use strict";var stampit=require("stampit"),Promise=require("bluebird");module.exports=stampit().init(function(){var e=function(){this.addResponseHandler(16,t)}.bind(this),t=function(e,t){if(this.log.debug("handling multiple registers response."),this.log.debug("on write multiple registers got PDU: "+JSON.stringify(e)+" pdu.length:"+e.length),this.log.debug("request: "+JSON.stringify(t)),e.length<5)t.defer.reject(new Error("PDU length less than five"));else{var r=e.readUInt8(0);if(16===r){var i={fc:r,startAddress:e.readUInt16BE(1),quantity:e.readUInt16BE(3)};t.defer.resolve(i)}else t.defer.reject(new Error("FC "+r+" is not valid - FC16 is expected"))}}.bind(this);this.writeMultipleRegisters=function(e,t){return new Promise(function(r,i){var n=Buffer.allocUnsafe(6),s=void 0;if(n.writeUInt8(16),n.writeUInt16BE(e,1),t instanceof Buffer)t.length/2>123&&i(),n.writeUInt16BE(t.length/2,3),n.writeUInt8(t.length,5),s=Buffer.concat([n,t]);else{if(!(t instanceof Array))return void i();if(t.length>123)return void i();var l=Math.ceil(2*t.length),f=Buffer.allocUnsafe(l);n.writeUInt16BE(t.length,3),n.writeUInt8(l,5);for(var o=0;o<t.length;o+=1)f.writeUInt16BE(t[o],2*o);s=Buffer.concat([n,f])}this.queueRequest(16,s,{resolve:r,reject:i})}.bind(this))},e()});
//# sourceMappingURL=../../maps/handler/client/WriteMultipleRegisters.js.map
