{"version":3,"sources":["handler/client/ReadCoils.js"],"names":["Stampit","require","Promise","module","exports","init","addResponseHandler","bind","onResponse","this","pdu","request","log","debug","length","JSON","stringify","defer","reject","Error","byteCount","readUInt8","fc","payload","slice","coils","h","cur","i","resp","cntr","j","resolve","readCoils","start","Buffer","allocUnsafe","writeUInt16BE","quantity","queueRequest"],"mappings":"AAIA,aAEA,IAAIA,QAAUC,QAAQ,WAClBC,QAAUD,QAAQ,YAEtBE,OAAOC,QAAUJ,UAEbK,KAAIA,WACF,IAAAA,EAAKC,WACLC,KAAKD,mBAFP,EAAAE,IAEED,KAAKE,MAGLD,EAAe,SAAAE,EAAAC,GAKbA,GAJFF,KAAKG,IAAIC,MAAM,iCACfJ,KAAKG,IAAIC,MAAM,0BAA8BF,KAAAA,UAA7CD,GAAA,eAAAA,EAAAI,QAAAL,KAAKG,IAAIC,MAAM,aAAeE,KAAKC,UAAUL,IAG3CA,EAAQM,OAAMC,EACdP,EAAAM,MAAAC,OAAA,IAAAC,MAAA,iCADAR,CAKF,IAAIS,EAAAA,EAAAA,UAAgBC,GAAhBD,EAAYV,EAAIW,UAAU,GAGxBC,GACJF,GAAAA,EACAG,UAAaC,EACbC,QAAOf,EAAAc,MAAA,GAJTC,UAQEd,GAAQM,IAARN,EAAAA,CASAe,IAJF,IAAIA,EAAJ,EACIC,EAAM,EAANA,EAAM,EAGRC,EAAA,EAAAA,EAAAR,EAAAQ,GAAA,EAAA,CACAD,EAAMjB,EAANiB,EAAMjB,EAAIW,UAAU,EAAIO,GAGtBC,IAAKJ,IAAAA,EAAMK,EAAXC,EAAoBJ,EAAAA,GAAD,EACnBD,EAAIA,MAAJI,IAAAH,EAAAD,GAAA,EACAI,IAAA,EACDA,GAAA,EAIHvB,EAzCFU,MAAAe,QAAAH,QAsBIlB,EAAAM,MAAAC,OAAA,IAAAC,MAAA,MAAAG,EAAA,sCAmBFf,KAAKE,MAQLA,KAAAwB,UAAW/B,SAAQgC,EAAUF,GAC3B,OAAIV,IAAJpB,QAAA,SAAA8B,EAAAd,GACA,IAAIR,EAAMyB,OAAOC,YAAY,GAG7B1B,EAAI2B,WAHMF,EAGQD,GAClBxB,EAAI2B,cAAcC,EAAlB,GAAA5B,EAAI2B,cAAcC,EAAU,GAG5B/B,KAAKgC,aAPKJ,EAFZzB,GAAAsB,QAAAA,EAAAd,OAAAA,KADFX,KAAAE,QAtDJJ","file":"../../../handler/client/ReadCoils.js","sourcesContent":["/**\n * Modbus client read.\n * @module ModbusClientReadCoils\n */\n'use strict'\n\nlet Stampit = require('stampit')\nlet Promise = require('bluebird')\n\nmodule.exports = Stampit()\n  .init(function () {\n    let init = function () {\n      this.addResponseHandler(1, onResponse)\n    }.bind(this)\n\n    let onResponse = function (pdu, request) {\n      this.log.debug('handling read coils response.')\n      this.log.debug('on read coils got PDU: ' + JSON.stringify(pdu) + ' pdu.length:' + pdu.length)\n      this.log.debug(' request: ' + JSON.stringify(request))\n\n      if (pdu.length < 2) {\n        request.defer.reject(new Error('PDU length less than two'))\n        return\n      }\n\n      let fc = pdu.readUInt8(0)\n      let byteCount = pdu.readUInt8(1)\n\n      let resp = {\n        fc: fc,\n        byteCount: byteCount,\n        payload: pdu.slice(2),\n        coils: []\n      }\n\n      if (fc !== 1) {\n        request.defer.reject(new Error('FC ' + fc + ' is not valid - FC1 is expected'))\n        return\n      }\n\n      let cntr = 0\n      let h = 1\n      let cur = 0\n\n      for (let i = 0; i < byteCount; i += 1) {\n        h = 1\n        cur = pdu.readUInt8(2 + i)\n\n        for (let j = 0; j < 8; j += 1) {\n          resp.coils[cntr] = (cur & h) > 0\n          h = h << 1\n          cntr += 1\n        }\n      }\n\n      request.defer.resolve(resp)\n    }.bind(this)\n\n    /**\n     * Reading coils with FC1.\n     * @param start\n     * @param quantity\n     */\n    this.readCoils = function (start, quantity) {\n      return new Promise(function (resolve, reject) {\n        let fc = 1\n        let pdu = Buffer.allocUnsafe(5)\n\n        pdu.writeUInt8(fc, 0)\n        pdu.writeUInt16BE(start, 1)\n        pdu.writeUInt16BE(quantity, 3)\n\n        this.queueRequest(fc, pdu, { resolve: resolve, reject: reject })\n      }.bind(this))\n    }\n\n    init()\n  })\n"]}