{"version":3,"sources":["handler/client/ReadDiscreteInputs.js"],"names":["stampit","require","Promise","module","exports","init","addResponseHandler","bind","onResponse","this","pdu","request","log","debug","JSON","stringify","length","defer","reject","Error","fc","readUInt8","h","cntr","resp","byteCount","payload","slice","coils","cur","i","j","resolve","readDiscreteInputs","start","Buffer","allocUnsafe","writeUInt16BE","quantity","queueRequest"],"mappings":"AAIA,aAEA,IAAIA,QAAUC,QAAQ,WAClBC,QAAUD,QAAQ,YAEtBE,OAAOC,QAAUJ,UAEbK,KAAIA,WACF,IAAAA,EAAKC,WACLC,KAAKD,mBAFP,EAAAE,IAEED,KAAKE,MAGLD,EAAe,SAAAE,EAAAC,GAKbA,GAJFF,KAAKG,IAAIC,MAAM,2CACfJ,KAAKG,IAAIC,MAAM,oCAAfC,KAAAC,UAAAL,GAAA,eAAAA,EAAAM,QAAAP,KAAKG,IAAIC,MAAM,YAAcC,KAAKC,UAAUJ,IAG1CA,EAAQM,OAAMC,EACdP,EAAAM,MAAAC,OAAA,IAAAC,MAAA,iCADAR,CAKF,IAAIS,EAAOV,EAAGW,UAAA,GACZV,GAAQM,IAARN,EAAAA,CAiBAW,IAZF,IAAIC,EAAJb,EAAAW,UAAA,GACIG,EAAO,EACLJ,GACJK,GAAAA,EACAC,UAAaC,EACbC,QAAOlB,EAAAiB,MAAA,GAJTC,UAQIC,EAAM,EAANA,EAAM,EAGRC,EAAA,EAAAA,EAAAL,EAAAK,GAAA,EAAA,CACAD,EAAMnB,EAANmB,EAAMnB,EAAIW,UAAU,EAAIS,GAGtBN,IAAKI,IAAAA,EAAML,EAAXQ,EAAoBF,EAAAA,GAAD,EACnBP,EAAIA,MAAJC,IAAAM,EAAAP,GAAA,EACAC,IAAA,EACDA,GAAA,EAIHhB,EAxCFU,MAAAe,QAAAR,QAaIb,EAAAM,MAAAC,OAAA,IAAAC,MAAA,MAAAC,EAAA,sCA2BFb,KAAKE,MAGLA,KAAAwB,mBAAmB,SAAAC,EAAmBhB,GACpC,OAAIE,IAAJlB,QAAA,SAAA8B,EAAAd,GACA,IAAIR,EAAMyB,OAAOC,YAAY,GAG7B1B,EAAI2B,WAHMF,GAIVzB,EAAI2B,cAAcC,EAAlB,GAAA5B,EAAI2B,cAAcC,EAAU,GAG1BpB,EAAAA,IACAA,IAIFX,KAAKgC,aAZKJ,EAFZzB,GAAAsB,QAAAA,EAAAd,OAAAA,KADFX,KAAAE,QAhDJJ","file":"../../../handler/client/ReadDiscreteInputs.js","sourcesContent":["/**\n * Modbus client read discrete inputs.\n * @module ModbusClientReadDiscreteInputs\n */\n'use strict'\n\nlet stampit = require('stampit')\nlet Promise = require('bluebird')\n\nmodule.exports = stampit()\n  .init(function () {\n    let init = function () {\n      this.addResponseHandler(2, onResponse)\n    }.bind(this)\n\n    let onResponse = function (pdu, request) {\n      this.log.debug('handling read discrete inputs response.')\n      this.log.debug('on read discrete inputs got PDU: ' + JSON.stringify(pdu) + ' pdu.length:' + pdu.length)\n      this.log.debug('request: ' + JSON.stringify(request))\n\n      if (pdu.length < 2) {\n        request.defer.reject(new Error('PDU length less than two'))\n        return\n      }\n\n      let fc = pdu.readUInt8(0)\n      if (fc !== 2) {\n        request.defer.reject(new Error('FC ' + fc + ' is not valid - FC2 is expected'))\n        return\n      }\n\n      let byteCount = pdu.readUInt8(1)\n      let cntr = 0\n      let resp = {\n        fc: fc,\n        byteCount: byteCount,\n        payload: pdu.slice(2),\n        coils: []\n      }\n\n      let h = 1\n      let cur = 0\n\n      for (let i = 0; i < byteCount; i += 1) {\n        h = 1\n        cur = pdu.readUInt8(2 + i)\n\n        for (let j = 0; j < 8; j += 1) {\n          resp.coils[cntr] = (cur & h) > 0\n          h = h << 1\n          cntr += 1\n        }\n      }\n\n      request.defer.resolve(resp)\n    }.bind(this)\n\n    this.readDiscreteInputs = function (start, quantity) {\n      return new Promise(function (resolve, reject) {\n        let fc = 2\n        let pdu = Buffer.allocUnsafe(5)\n\n        pdu.writeUInt8(fc)\n        pdu.writeUInt16BE(start, 1)\n        pdu.writeUInt16BE(quantity, 3)\n\n        if (quantity > 2000) {\n          reject()\n          return\n        }\n\n        this.queueRequest(fc, pdu, { resolve: resolve, reject: reject })\n      }.bind(this))\n    }\n\n    init()\n  })\n"]}