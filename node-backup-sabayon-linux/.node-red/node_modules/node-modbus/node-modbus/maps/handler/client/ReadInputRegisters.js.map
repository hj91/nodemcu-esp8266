{"version":3,"sources":["handler/client/ReadInputRegisters.js"],"names":["Stampit","require","Promise","module","exports","init","addResponseHandler","bind","onResponse","this","pdu","request","log","debug","JSON","stringify","length","defer","reject","Error","fc","readUInt8","resp","byteCount","payload","slice","register","registerCount","push","i","readUInt16BE","resolve","readInputRegisters","start","Buffer","allocUnsafe","writeUInt16BE","quantity","queueRequest"],"mappings":"AAIA,aAEA,IAAIA,QAAUC,QAAQ,WAClBC,QAAUD,QAAQ,YAEtBE,OAAOC,QAAUJ,UAEbK,KAAIA,WACF,IAAAA,EAAKC,WACLC,KAAKD,mBAFP,EAAAE,IAEED,KAAKE,MAGLD,EAAe,SAAAE,EAAAC,GAKbA,GAJFF,KAAKG,IAAIC,MAAM,2CACfJ,KAAKG,IAAIC,MAAM,oCAAfC,KAAAC,UAAAL,GAAA,eAAAA,EAAAM,QAAAP,KAAKG,IAAIC,MAAM,YAAcC,KAAKC,UAAUJ,IAG1CA,EAAQM,OAAMC,EACdP,EAAAM,MAAAC,OAAA,IAAAC,MAAA,iCADAR,CAKF,IAAIS,EAAOV,EAAGW,UAAA,GACZV,GAAQM,IAARN,EAAAA,CAeAW,IAVF,IAAIA,EAAOZ,EAAAW,UAAA,GACLD,GACJG,GAAAA,EACAC,UAAaC,EACbC,QAAUhB,EAAAe,MAAA,GAJZC,aAOIC,EAAgBJ,EAAY,EAGzBG,EAAL,EAAcE,EAAKlB,EAAAmB,GAAsBA,EAC1CP,EAAAI,SAAAE,KAAAlB,EAAAoB,aAAA,EAAA,EAAAD,IAGDtB,EA/BFU,MAAAc,QAAAT,QAaIX,EAAAM,MAAAC,OAAA,IAAAC,MAAA,MAAAC,EAAA,sCAkBFb,KAAKE,MAGLA,KAAAuB,mBAAmB,SAAAC,EAAmBf,GACpC,OAAIE,IAAJlB,QAAA,SAAA6B,EAAAb,GACA,IAAIR,EAAMwB,OAAOC,YAAY,GAG7BzB,EAAI0B,WAHMF,GAIVxB,EAAI0B,cAAcC,EAAlB,GAAA3B,EAAI0B,cAAcC,EAAU,GAG5B9B,KAAK+B,aAPKJ,EAFZxB,GAAAqB,QAAAA,EAAAb,OAAAA,KADFX,KAAAE,QAvCJJ","file":"../../../handler/client/ReadInputRegisters.js","sourcesContent":["/**\n * Modbus client read inputs registers.\n * @module ModbusClientReadInputRegisters\n */\n'use strict'\n\nlet Stampit = require('stampit')\nlet Promise = require('bluebird')\n\nmodule.exports = Stampit()\n  .init(function () {\n    let init = function () {\n      this.addResponseHandler(4, onResponse)\n    }.bind(this)\n\n    let onResponse = function (pdu, request) {\n      this.log.debug('handling read input registers response.')\n      this.log.debug('on read input registers got PDU: ' + JSON.stringify(pdu) + ' pdu.length:' + pdu.length)\n      this.log.debug('request: ' + JSON.stringify(request))\n\n      if (pdu.length < 2) {\n        request.defer.reject(new Error('PDU length less than two'))\n        return\n      }\n\n      let fc = pdu.readUInt8(0)\n      if (fc !== 4) {\n        request.defer.reject(new Error('FC ' + fc + ' is not valid - FC4 is expected'))\n        return\n      }\n\n      let byteCount = pdu.readUInt8(1)\n      let resp = {\n        fc: fc,\n        byteCount: byteCount,\n        payload: pdu.slice(2),\n        register: []\n      }\n\n      let registerCount = byteCount / 2\n\n      for (let i = 0; i < registerCount; i += 1) {\n        resp.register.push(pdu.readUInt16BE(2 + (i * 2)))\n      }\n\n      request.defer.resolve(resp)\n    }.bind(this)\n\n    this.readInputRegisters = function (start, quantity) {\n      return new Promise(function (resolve, reject) {\n        let fc = 4\n        let pdu = Buffer.allocUnsafe(5)\n\n        pdu.writeUInt8(fc)\n        pdu.writeUInt16BE(start, 1)\n        pdu.writeUInt16BE(quantity, 3)\n\n        this.queueRequest(fc, pdu, { resolve: resolve, reject: reject })\n      }.bind(this))\n    }\n\n    init()\n  })\n"]}