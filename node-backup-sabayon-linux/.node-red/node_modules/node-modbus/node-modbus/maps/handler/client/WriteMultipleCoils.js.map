{"version":3,"sources":["handler/client/WriteMultipleCoils.js"],"names":["stampit","require","Promise","module","exports","init","addResponseHandler","bind","onResponse","this","pdu","request","log","debug","JSON","stringify","length","defer","reject","Error","fc","readUInt8","startAddress","quantity","readUInt16BE","resolve","resp","writeMultipleCoils","coils","N","Buffer","allocUnsafe","basePdu","writeUInt16BE","writeUInt8","Array","curByte","Math","ceil","curByteIdx","cntr","payloadPdu","byteCount","i","pow","concat","queueRequest"],"mappings":"AAIA,aAEA,IAAIA,QAAUC,QAAQ,WAClBC,QAAUD,QAAQ,YAEtBE,OAAOC,QAAUJ,UAEbK,KAAIA,WACF,IAAAA,EAAKC,WACLC,KAAKD,mBAFP,GAAAE,IAEED,KAAKE,MAGLD,EAAe,SAAAE,EAAAC,GAKbA,GAJFF,KAAKG,IAAIC,MAAM,qCACfJ,KAAKG,IAAIC,MAAM,oCAAfC,KAAAC,UAAAL,GAAA,eAAAA,EAAAM,QAAAP,KAAKG,IAAIC,MAAM,YAAcC,KAAKC,UAAUJ,IAG1CA,EAAQM,OAAMC,EACdP,EAAAM,MAAAC,OAAA,IAAAC,MAAA,kCADAR,CAKF,IAAIS,EAAOV,EAAIW,UAAA,GACbV,GAAQM,KAARN,EAAAA,CAKF,IAEMS,GACJE,GAAAA,EACAC,aAJiBC,EAAAA,aAAnB,GACAD,SAAWb,EAAAc,aAAA,IAOXjB,EAzBFU,MAAAQ,QAAAC,QAaIf,EAAAM,MAAAC,OAAA,IAAAC,MAAA,MAAAC,EAAA,uCAYFb,KAAKE,MAGLA,KAAAkB,mBAAmB,SAAAL,EAA2BM,EAAAC,GAC5C,OAAIT,IAAJlB,QAAA,SAAAuB,EAAAP,GACA,IACIR,EAAJoB,OAAAC,YAAA,GAAIrB,OAAAA,EAMFsB,GAHFA,EAAQC,WAJJD,GAIkBV,GAAtBU,EAAQC,cAAcX,EAAc,GAGlCU,aAAAF,OACAE,EAAQE,cAAWN,EAAMZ,GACzBN,EAAMoB,WAAeE,EAAAA,OAAD,GAHtBtB,EAIOoB,OAAIF,QAAAA,EAAJA,SACDA,GAAMZ,aAAemB,MAAA,CACvBjB,GAAAA,EAAAA,OAAAA,KAED,YADCA,IAIF,IAAIkB,EAAJC,KAAAC,KAAAV,EAAAZ,OAAA,GACIuB,EAAAA,EACAC,EAAJ,EACIC,EAAAA,EAAAA,EAAaX,OAAOC,YAAYW,GAGpCV,EAAQE,cAAWQ,EAAW1B,OAA9B,GAAAgB,EAAQE,WAAWQ,EAAW,GAG5BN,IAAAA,IAAAA,EAAWR,EAAAA,EAAAA,EAAWS,OAAYG,GAAvB,EAAXJ,GAAWR,EAAMe,GAAKN,KAAKO,IAAI,EAAGJ,GAAQ,EAK7BN,KAHbM,GAAQA,EAAO,GAAK,IAGPN,IAAWE,EAAtBpB,OAA+BuB,IAC/BA,EAAaA,WAAAA,EAAbA,GACAH,GAAA,EACDA,EAAA,GAIJ1B,EAAAoB,OAAAe,QAAAb,EAAAS,IAGDlC,KAAKuC,aAzCDd,GAFNtB,GAAAe,QAAAA,EAAAP,OAAAA,KADFX,KAAAE,QAjCJJ","file":"../../../handler/client/WriteMultipleCoils.js","sourcesContent":["/**\n * Modbus client write multiple coils.\n * @module ModbusClientWriteMultipleCoils\n */\n'use strict'\n\nlet stampit = require('stampit')\nlet Promise = require('bluebird')\n\nmodule.exports = stampit()\n  .init(function () {\n    let init = function () {\n      this.addResponseHandler(15, onResponse)\n    }.bind(this)\n\n    let onResponse = function (pdu, request) {\n      this.log.debug('handling multiple coils response.')\n      this.log.debug('on write multiple coils got PDU: ' + JSON.stringify(pdu) + ' pdu.length:' + pdu.length)\n      this.log.debug('request: ' + JSON.stringify(request))\n\n      if (pdu.length < 5) {\n        request.defer.reject(new Error('PDU length less than five'))\n        return\n      }\n\n      let fc = pdu.readUInt8(0)\n      if (fc !== 15) {\n        request.defer.reject(new Error('FC ' + fc + ' is not valid - FC15 is expected'))\n        return\n      }\n\n      let startAddress = pdu.readUInt16BE(1)\n      let quantity = pdu.readUInt16BE(3)\n      let resp = {\n        fc: fc,\n        startAddress: startAddress,\n        quantity: quantity\n      }\n\n      request.defer.resolve(resp)\n    }.bind(this)\n\n    this.writeMultipleCoils = function (startAddress, coils, N) {\n      return new Promise(function (resolve, reject) {\n        let fc = 15\n        let basePdu = Buffer.allocUnsafe(6)\n        let pdu\n\n        basePdu.writeUInt8(fc, 0)\n        basePdu.writeUInt16BE(startAddress, 1)\n\n        if (coils instanceof Buffer) {\n          basePdu.writeUInt16BE(N, 3)\n          basePdu.writeUInt8(coils.length, 5)\n          pdu = Buffer.concat([basePdu, coils])\n        } else if (coils instanceof Array) {\n          if (coils.length > 1968) {\n            reject()\n            return\n          }\n\n          let byteCount = Math.ceil(coils.length / 8)\n          let curByte = 0\n          let curByteIdx = 0\n          let cntr = 0\n          let payloadPdu = Buffer.allocUnsafe(byteCount)\n\n          basePdu.writeUInt16BE(coils.length, 3)\n          basePdu.writeUInt8(byteCount, 5)\n\n          for (let i = 0; i < coils.length; i += 1) {\n            curByte += coils[i] ? Math.pow(2, cntr) : 0\n\n            cntr = (cntr + 1) % 8\n\n            if (cntr === 0 || i === coils.length - 1) {\n              payloadPdu.writeUInt8(curByte, curByteIdx)\n              curByteIdx = curByteIdx + 1\n              curByte = 0\n            }\n          }\n\n          pdu = Buffer.concat([basePdu, payloadPdu])\n        }\n\n        this.queueRequest(fc, pdu, { resolve: resolve, reject: reject })\n      }.bind(this))\n    }\n\n    init()\n  })\n"]}