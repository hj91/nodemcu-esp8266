{"version":3,"sources":["handler/client/WriteMultipleRegisters.js"],"names":["stampit","require","Promise","module","exports","init","addResponseHandler","bind","onResponse","this","pdu","request","log","debug","JSON","stringify","length","defer","reject","Error","fc","readUInt8","startAddress","quantity","readUInt16BE","resolve","resp","writeMultipleRegisters","register","Buffer","allocUnsafe","basePdu","writeUInt16BE","writeUInt8","Array","payloadPdu","byteCount","i","concat","queueRequest"],"mappings":"AAIA,aAEA,IAAIA,QAAUC,QAAQ,WAClBC,QAAUD,QAAQ,YAEtBE,OAAOC,QAAUJ,UAEbK,KAAIA,WACF,IAAAA,EAAKC,WACLC,KAAKD,mBAFP,GAAAE,IAEED,KAAKE,MAGLD,EAAe,SAAAE,EAAAC,GAKbA,GAJFF,KAAKG,IAAIC,MAAM,yCACfJ,KAAKG,IAAIC,MAAM,wCAAfC,KAAAC,UAAAL,GAAA,eAAAA,EAAAM,QAAAP,KAAKG,IAAIC,MAAM,YAAcC,KAAKC,UAAUJ,IAG1CA,EAAQM,OAAMC,EACdP,EAAAM,MAAAC,OAAA,IAAAC,MAAA,kCADAR,CAKF,IAAIS,EAAOV,EAAIW,UAAA,GACbV,GAAQM,KAARN,EAAAA,CAKF,IAEMS,GACJE,GAAAA,EACAC,aAJiBC,EAAAA,aAAnB,GACAD,SAAWb,EAAAc,aAAA,IAOXjB,EAzBFU,MAAAQ,QAAAC,QAaIf,EAAAM,MAAAC,OAAA,IAAAC,MAAA,MAAAC,EAAA,uCAYFb,KAAKE,MAGLA,KAAAkB,uBAA6BF,SAASP,EAAQU,GAC5C,OAAIR,IAAJlB,QAAA,SAAAuB,EAAAP,GACA,IACIR,EAAJmB,OAAAC,YAAA,GAAIpB,OAAAA,EAMF,GAHFqB,EAAQC,WAJJD,IAIJA,EAAQC,cAAcV,EAAc,GAG9BM,aAAAC,OACFX,EAAAA,OAAAA,EAAAA,KACDA,IAGDa,EAAQE,cAAWL,EAASZ,OAA5B,EAAA,GAAAe,EAAQE,WAAWL,EAASZ,OAAQ,GANtCN,EASOmB,OAAID,QAAAA,EAAoBM,QACzBN,CAAAA,KAAAA,aAA0BM,OAmB/B,YADChB,IAjBEA,GAAAA,EAAAA,OAAAA,IAED,YADCA,IAIF,IAAIiB,EAAaN,KAAAA,KAAjB,EAAwBC,EAAYM,QAAhCD,EAAaN,OAAOC,YAAYM,GAGpCL,EAAQE,cAAWG,EAAnBpB,OAAA,GAAAe,EAAQE,WAAWG,EAAW,GAG5BD,IAAAA,IAAAA,EAAWH,EAAAA,EAAAA,EAAcJ,OAAzBS,GAA0CA,EAC3CF,EAAAH,cAAAJ,EAAAS,GAAA,EAAAA,GAdI3B,EAiBAmB,OAAAS,QAAAP,EAAAI,IAMP5B,KAAKgC,aAtCDR,GAFNrB,GAAAe,QAAAA,EAAAP,OAAAA,KADFX,KAAAE,QAjCJJ","file":"../../../handler/client/WriteMultipleRegisters.js","sourcesContent":["/**\n * Modbus client write multiple registers.\n * @module ModbusClientWriteRegisters\n */\n'use strict'\n\nlet stampit = require('stampit')\nlet Promise = require('bluebird')\n\nmodule.exports = stampit()\n  .init(function () {\n    let init = function () {\n      this.addResponseHandler(16, onResponse)\n    }.bind(this)\n\n    let onResponse = function (pdu, request) {\n      this.log.debug('handling multiple registers response.')\n      this.log.debug('on write multiple registers got PDU: ' + JSON.stringify(pdu) + ' pdu.length:' + pdu.length)\n      this.log.debug('request: ' + JSON.stringify(request))\n\n      if (pdu.length < 5) {\n        request.defer.reject(new Error('PDU length less than five'))\n        return\n      }\n\n      let fc = pdu.readUInt8(0)\n      if (fc !== 16) {\n        request.defer.reject(new Error('FC ' + fc + ' is not valid - FC16 is expected'))\n        return\n      }\n\n      let startAddress = pdu.readUInt16BE(1)\n      let quantity = pdu.readUInt16BE(3)\n      let resp = {\n        fc: fc,\n        startAddress: startAddress,\n        quantity: quantity\n      }\n\n      request.defer.resolve(resp)\n    }.bind(this)\n\n    this.writeMultipleRegisters = function (startAddress, register) {\n      return new Promise(function (resolve, reject) {\n        let fc = 16\n        let basePdu = Buffer.allocUnsafe(6)\n        let pdu\n\n        basePdu.writeUInt8(fc)\n        basePdu.writeUInt16BE(startAddress, 1)\n\n        if (register instanceof Buffer) {\n          if (register.length / 2 > 0x007b) {\n            reject()\n          }\n\n          basePdu.writeUInt16BE(register.length / 2, 3)\n          basePdu.writeUInt8(register.length, 5)\n\n          pdu = Buffer.concat([basePdu, register])\n        } else if (register instanceof Array) {\n          if (register.length > 0x007b) {\n            reject()\n            return\n          }\n\n          let byteCount = Math.ceil(register.length * 2)\n          let payloadPdu = Buffer.allocUnsafe(byteCount)\n\n          basePdu.writeUInt16BE(register.length, 3)\n          basePdu.writeUInt8(byteCount, 5)\n\n          for (let i = 0; i < register.length; i += 1) {\n            payloadPdu.writeUInt16BE(register[i], 2 * i)\n          }\n\n          pdu = Buffer.concat([basePdu, payloadPdu])\n        } else {\n          reject()\n          return\n        }\n\n        this.queueRequest(fc, pdu, { resolve: resolve, reject: reject })\n      }.bind(this))\n    }\n\n    init()\n  })\n"]}