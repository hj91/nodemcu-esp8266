{"version":3,"sources":["handler/client/WriteSingleCoil.js"],"names":["Stampit","require","Promise","module","exports","init","addResponseHandler","bind","onResponse","this","pdu","request","log","debug","JSON","stringify","length","defer","reject","Error","fc","readUInt8","outputValue","readUInt16BE","resp","outputAddress","undefined","resolve","writeSingleCoil","payload","value","Buffer","writeUInt8","allocUnsafe","writeUInt16BE","address","queueRequest"],"mappings":"AAIA,aAEA,IAAIA,QAAUC,QAAQ,WAClBC,QAAUD,QAAQ,YAEtBE,OAAOC,QAAUJ,UAEbK,KAAIA,WACF,IAAAA,EAAKC,WACLC,KAAKD,mBAFP,EAAAE,IAEED,KAAKE,MAGLD,EAAe,SAAAE,EAAAC,GAKbA,GAJFF,KAAKG,IAAIC,MAAM,wCACfJ,KAAKG,IAAIC,MAAM,iCAAfC,KAAAC,UAAAL,GAAA,eAAAA,EAAAM,QAAAP,KAAKG,IAAIC,MAAM,YAAcC,KAAKC,UAAUJ,IAG1CA,EAAQM,OAAMC,EACdP,EAAAM,MAAAC,OAAA,IAAAC,MAAA,kCADAR,CAKF,IAAIS,EAAOV,EAAGW,UAAA,GACZV,GAAQM,IAARN,EAAAA,CAKF,IAAIW,EAAkBC,EAAAA,aAAtB,GACIC,EAAOd,EAAAa,aAAA,GACLH,GACJK,GAAAA,EACAH,cAAaA,EAHfA,YAAA,IAAAA,IAAA,QAAAA,QAAAI,IAOAnB,EAzBFU,MAAAU,QAAAH,QAaIb,EAAAM,MAAAC,OAAA,IAAAC,MAAA,KAAAC,EAAA,sCAYFb,KAAKE,MAGLA,KAAAmB,gBAAmB,SAAUD,EAAST,GACpC,OAAIE,IAAJlB,QAAA,SAAAyB,EAAAT,GACA,IAAIW,EAAWC,aAAiBC,OAAWD,EAAMT,UAAU,GAAK,EAAKS,EAGjEE,EAAAA,OAAeC,YAAnB,GACAvB,EAAIwB,WAJAL,EAIcM,GAClBzB,EAAIwB,cAAcL,EAAU,GAA5BnB,EAAIwB,cAAcL,EAAU,MAAS,EAAQ,GAG7CtB,KAAK6B,aARDP,EAFNnB,GAAAiB,QAAAA,EAAAT,OAAAA,KADFX,KAAAE,QAjCJJ","file":"../../../handler/client/WriteSingleCoil.js","sourcesContent":["/**\n * Modbus client write single coil.\n * @module ModbusClientWriteCoil\n */\n'use strict'\n\nlet Stampit = require('stampit')\nlet Promise = require('bluebird')\n\nmodule.exports = Stampit()\n  .init(function () {\n    let init = function () {\n      this.addResponseHandler(5, onResponse)\n    }.bind(this)\n\n    let onResponse = function (pdu, request) {\n      this.log.debug('handling write single coil response.')\n      this.log.debug('on write single coil got PDU: ' + JSON.stringify(pdu) + ' pdu.length:' + pdu.length)\n      this.log.debug('request: ' + JSON.stringify(request))\n\n      if (pdu.length < 5) {\n        request.defer.reject(new Error('PDU length less than five'))\n        return\n      }\n\n      let fc = pdu.readUInt8(0)\n      if (fc !== 5) {\n        request.defer.reject(new Error('FC' + fc + ' is not valid - FC5 is expected'))\n        return\n      }\n\n      let outputAddress = pdu.readUInt16BE(1)\n      let outputValue = pdu.readUInt16BE(3)\n      let resp = {\n        fc: fc,\n        outputAddress: outputAddress,\n        outputValue: outputValue === 0x0000 ? false : outputValue === 0xFF00 ? true : undefined\n      }\n\n      request.defer.resolve(resp)\n    }.bind(this)\n\n    this.writeSingleCoil = function (address, value) {\n      return new Promise(function (resolve, reject) {\n        let fc = 5\n        let payload = (value instanceof Buffer) ? (value.readUInt8(0) > 0) : value\n\n        let pdu = Buffer.allocUnsafe(5)\n        pdu.writeUInt8(fc, 0)\n        pdu.writeUInt16BE(address, 1)\n        pdu.writeUInt16BE(payload ? 0xff00 : 0x0000, 3)\n\n        this.queueRequest(fc, pdu, { resolve: resolve, reject: reject })\n      }.bind(this))\n    }\n\n    init()\n  })\n"]}