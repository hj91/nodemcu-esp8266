{"version":3,"sources":["handler/client/WriteSingleRegister.js"],"names":["Stampit","require","Promise","module","exports","init","addResponseHandler","bind","onResponse","this","pdu","request","log","debug","JSON","stringify","length","defer","reject","Error","fc","readUInt8","registerAddress","registerValue","readUInt16BE","registerAddressRaw","registerValueRaw","slice","resolve","resp","writeSingleRegister","address","value","allocUnsafe","Buffer","writeUInt16BE","payload","queueRequest"],"mappings":"AAIA,aAEA,IAAIA,QAAUC,QAAQ,WAClBC,QAAUD,QAAQ,YAEtBE,OAAOC,QAAUJ,UAEbK,KAAIA,WACF,IAAAA,EAAKC,WACLC,KAAKD,mBAFP,EAAAE,IAEED,KAAKE,MAGLD,EAAe,SAAAE,EAAAC,GAKbA,GAJFF,KAAKG,IAAIC,MAAM,4CACfJ,KAAKG,IAAIC,MAAM,qCAAfC,KAAAC,UAAAL,GAAA,eAAAA,EAAAM,QAAAP,KAAKG,IAAIC,MAAM,YAAcC,KAAKC,UAAUJ,IAG1CA,EAAQM,OAAMC,EACdP,EAAAM,MAAAC,OAAA,IAAAC,MAAA,kCADAR,CAKF,IAAIS,EAAOV,EAAGW,UAAA,GACZV,GAAQM,IAARN,EAAAA,CAKF,IAEMS,GACJE,GAAAA,EACAC,gBAJsBC,EAAAA,aAAxB,GAKEC,cAJSf,EAAAc,aAAA,GAKTE,mBAAsBC,EAAAA,MAAJ,EAAA,GALpBD,iBAAAhB,EAAAiB,MAAA,EAAA,IAQApB,EA1BFU,MAAAW,QAAAC,QAaIlB,EAAAM,MAAAC,OAAA,IAAAC,MAAA,MAAAC,EAAA,sCAaFb,KAAKE,MAGLA,KAAAqB,oBAAmB,SAAAC,EAA2BC,GAC5C,OAAIZ,IAAJlB,QAAA,SAAA0B,EAAAV,GACA,IACIR,EAAauB,aAAjBC,OAAAF,EAAAR,aAAA,GAAAQ,EAAItB,EAAMwB,OAAOD,YAAY,GAG7BvB,EAAIyB,WAJAC,EAIcL,GAClBrB,EAAIyB,cAAcC,EAAlB,GAAA1B,EAAIyB,cAAcC,EAAS,GAG3B7B,KAAK8B,aARDD,EAFN1B,GAAAkB,QAAAA,EAAAV,OAAAA,KADFX,KAAAE,QAlCJJ","file":"../../../handler/client/WriteSingleRegister.js","sourcesContent":["/**\n * Modbus client write single register.\n * @module ModbusClientWriteRegister\n */\n'use strict'\n\nlet Stampit = require('stampit')\nlet Promise = require('bluebird')\n\nmodule.exports = Stampit()\n  .init(function () {\n    let init = function () {\n      this.addResponseHandler(6, onResponse)\n    }.bind(this)\n\n    let onResponse = function (pdu, request) {\n      this.log.debug('handling write single register response.')\n      this.log.debug('on write single register got PDU: ' + JSON.stringify(pdu) + ' pdu.length:' + pdu.length)\n      this.log.debug('request: ' + JSON.stringify(request))\n\n      if (pdu.length < 5) {\n        request.defer.reject(new Error('PDU length less than five'))\n        return\n      }\n\n      let fc = pdu.readUInt8(0)\n      if (fc !== 6) {\n        request.defer.reject(new Error('FC ' + fc + ' is not valid - FC6 is expected'))\n        return\n      }\n\n      let registerAddress = pdu.readUInt16BE(1)\n      let registerValue = pdu.readUInt16BE(3)\n      let resp = {\n        fc: fc,\n        registerAddress: registerAddress,\n        registerValue: registerValue,\n        registerAddressRaw: pdu.slice(1, 3),\n        registerValueRaw: pdu.slice(3, 5)\n      }\n      request.defer.resolve(resp)\n    }.bind(this)\n\n    this.writeSingleRegister = function (address, value) {\n      return new Promise(function (resolve, reject) {\n        let fc = 6\n        let payload = (value instanceof Buffer) ? value.readUInt16BE(0) : value\n        let pdu = Buffer.allocUnsafe(5)\n\n        pdu.writeUInt8(fc, 0)\n        pdu.writeUInt16BE(address, 1)\n        pdu.writeUInt16BE(payload, 3)\n\n        this.queueRequest(fc, pdu, {resolve: resolve, reject: reject})\n      }.bind(this))\n    }\n\n    init()\n  })\n"]}