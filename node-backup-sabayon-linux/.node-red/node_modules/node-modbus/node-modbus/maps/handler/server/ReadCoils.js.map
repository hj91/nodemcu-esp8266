{"version":3,"sources":["handler/server/ReadCoils.js"],"names":["stampit","require","module","exports","init","debug","this","log","responseDelay","bind","setRequestHandler","onRequest","setTimeout","pdu","cb","allocUnsafe","buf","Buffer","writeUInt8","quantity","readUInt16BE","emit","start","mem","getCoils","length","thisByteBitCount","byteIdx","byteCount","Math","response","floor","totalBitCount","val"],"mappings":"AAIA,aAEA,IAAIA,QAAUC,QAAQ,WAEtBC,OAAOC,QAAUH,UAEbI,KAAIA,WACF,IAAAA,EAASC,WAATC,KAAKC,IAAIF,MAAM,0CAGRG,KAAAA,gBACNF,KAAAE,cAAA,GAGDC,KAAKC,kBARP,EAAAC,IAQEF,KAAKH,MAGLM,EAAW,SAAYC,EAAAC,GACrBF,WAASP,WAGP,GAHFC,KAAKC,IAAIF,MAAM,gCAGIU,IAAbC,EAAAA,OAAaD,CAAjB,IAAIC,EAAMC,OAAOF,YAAY,GAM9B,OAHCC,EAAIE,WAAW,IAAf,GACAJ,EAAAI,WAAA,EAAA,QACAJ,EAAAE,GAIF,IAAIG,EAAAA,EAAWN,aAAA,GAAXM,EAAWN,EAAIO,aAAa,GAEhCd,KAAKe,KAAK,mBAAoBC,EAAOH,GAErC,IAAII,EAAMjB,KAAKkB,WAGb,GAAIR,EAAaD,EAAPE,EAAAA,QAAmBK,EAA7BH,EAAA,EAAAI,EAAAE,OAAA,CACAT,IAAIE,EAAAA,OAAWH,YAAf,GAID,OAHCC,EAAIE,WAAW,IAAf,GACAJ,EAAGE,WAAH,EAAA,QACAF,EAAAE,GAIF,IAAIU,EAAAA,EACAC,EAAJ,EACIC,EAAYC,EACZC,EAAWb,KAAOF,KAAAA,EAAgBa,GAAlCE,EAAWb,OAAOF,YAAY,EAAIa,GAGtCE,EAASZ,WAAWU,EAAAA,GAApBE,EAASZ,WAAWU,EAAW,GAG7B,IAAIZ,IAAAA,EAAMM,EAAmBS,EAAMC,EAAnCb,EAAAa,GAAA,EAAA,CACWT,EAAMS,UAAAA,KAAAA,MAAjBA,EAAA,IAAW,GAAMA,EAAgB,IAIhCC,GAAA,GAAAP,EAAA,IAEDA,GAAoB,GAGlB,GAAyBC,GAAzBK,IAAAV,EAAAH,EAAA,IACAc,EAASN,WAAUA,EAAAA,GACpBM,EAAA,EAAAN,GAAA,GAIHlB,EAAKqB,IAtDOrB,KAAAH,MAAhBA,KAAAE,gBAuDEC,KAAKH,MAnEXF","file":"../../../handler/server/ReadCoils.js","sourcesContent":["/**\n * Modbus server read.\n * @module ModbusServerReadCoils\n */\n'use strict'\n\nlet stampit = require('stampit')\n\nmodule.exports = stampit()\n  .init(function () {\n    let init = function () {\n      this.log.debug('initiating read coils request handler.')\n\n      if (!this.responseDelay) {\n        this.responseDelay = 0\n      }\n\n      this.setRequestHandler(1, onRequest)\n    }.bind(this)\n\n    let onRequest = function (pdu, cb) {\n      setTimeout(function () {\n        this.log.debug('handling read coils request.')\n\n        if (pdu.length !== 5) {\n          let buf = Buffer.allocUnsafe(2)\n\n          buf.writeUInt8(0x81, 0)\n          buf.writeUInt8(0x02, 1)\n          cb(buf)\n          return\n        }\n\n        let start = pdu.readUInt16BE(1)\n        let quantity = pdu.readUInt16BE(3)\n\n        this.emit('readCoilsRequest', start, quantity)\n\n        let mem = this.getCoils()\n\n        if (start > mem.length * 8 || start + quantity > mem.length * 8) {\n          let buf = Buffer.allocUnsafe(2)\n          buf.writeUInt8(0x81, 0)\n          buf.writeUInt8(0x02, 1)\n          cb(buf)\n          return\n        }\n\n        let val = 0\n        let thisByteBitCount = 0\n        let byteIdx = 2\n        let byteCount = Math.ceil(quantity / 8)\n        let response = Buffer.allocUnsafe(2 + byteCount)\n\n        response.writeUInt8(0x01, 0)\n        response.writeUInt8(byteCount, 1)\n\n        for (let totalBitCount = start; totalBitCount < start + quantity; totalBitCount += 1) {\n          let buf = mem.readUInt8(Math.floor(totalBitCount / 8))\n          let mask = 1 << (totalBitCount % 8)\n\n          if (buf & mask) {\n            val += 1 << (thisByteBitCount % 8)\n          }\n\n          thisByteBitCount += 1\n\n          if (thisByteBitCount % 8 === 0 || totalBitCount === (start + quantity) - 1) {\n            response.writeUInt8(val, byteIdx)\n            val = 0; byteIdx = byteIdx + 1\n          }\n        }\n\n        cb(response)\n      }.bind(this), this.responseDelay)\n    }.bind(this)\n\n    init()\n  })\n"]}