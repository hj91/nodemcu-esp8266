{"version":3,"sources":["handler/server/ReadInputRegisters.js"],"names":["stampit","require","module","exports","init","debug","this","log","responseDelay","bind","setRequestHandler","onRequest","setTimeout","pdu","cb","allocUnsafe","buf","Buffer","writeUInt8","quantity","readUInt16BE","byteStart","start","emit","mem","getInput","length","head","response","concat","slice"],"mappings":"AAIA,aAEA,IAAIA,QAAUC,QAAQ,WAEtBC,OAAOC,QAAUH,UAEbI,KAAIA,WACF,IAAAA,EAASC,WAATC,KAAKC,IAAIF,MAAM,oDAGRG,KAAAA,gBACNF,KAAAE,cAAA,GAGDC,KAAKC,kBARP,EAAAC,IAQEF,KAAKH,MAGLM,EAAW,SAAYC,EAAAC,GACrBF,WAASP,WAGP,GAHFC,KAAKC,IAAIF,MAAM,0CAGIU,IAAbC,EAAAA,OAAaD,CAAjB,IAAIC,EAAMC,OAAOF,YAAY,GAM9B,OAHCC,EAAIE,WAAW,IAAf,GACAJ,EAAAI,WAAA,EAAA,QACAJ,EAAAE,GAIF,IACIG,EAAeC,EADfC,EAAYC,aAAhB,GACIH,EAAWN,EAAIO,aAAa,GAEhCd,KAAKiB,KAAK,4BAA6BF,EAAWF,GAElD,IAAIK,EAAMlB,KAAKmB,WAGb,GAAIT,EAAMC,EAAOF,QAAYM,EAA7B,EAAAF,EAAAK,EAAAE,OAAA,CAAA,IAAIV,EAAMC,OAAOF,YAAY,GAM9B,OAHCC,EAAIE,WAAW,IAAf,GACAJ,EAAGE,WAAH,EAAA,QACAF,EAAAE,GAGF,IAAIW,EAAOV,OAAOF,YAAY,GAG9BY,EAAKT,WAAWC,EAAAA,GAAhBQ,EAAKT,WAAsB,EAAXC,EAAc,GAE9B,IAAIS,EAAWX,OAAOY,QAAQF,EAAMH,EAAIM,MAAMT,EAAWA,EAAuB,EAAXF,KAGrEV,EAAKmB,IAtCOnB,KAAAH,MAAhBA,KAAAE,gBAuCEC,KAAKH,MAnDXF","file":"../../../handler/server/ReadInputRegisters.js","sourcesContent":["/**\n * Modbus server read inputs registers.\n * @module ModbusServerReadInputRegisters\n */\n'use strict'\n\nlet stampit = require('stampit')\n\nmodule.exports = stampit()\n  .init(function () {\n    let init = function () {\n      this.log.debug('initiating read input registers request handler.')\n\n      if (!this.responseDelay) {\n        this.responseDelay = 0\n      }\n\n      this.setRequestHandler(4, onRequest)\n    }.bind(this)\n\n    let onRequest = function (pdu, cb) {\n      setTimeout(function () {\n        this.log.debug('handling read input registers request.')\n\n        if (pdu.length !== 5) {\n          let buf = Buffer.allocUnsafe(2)\n\n          buf.writeUInt8(0x84, 0)\n          buf.writeUInt8(0x02, 1)\n          cb(buf)\n          return\n        }\n\n        let start = pdu.readUInt16BE(1)\n        let byteStart = start * 2\n        let quantity = pdu.readUInt16BE(3)\n\n        this.emit('readInputRegistersRequest', byteStart, quantity)\n\n        let mem = this.getInput()\n\n        if (byteStart > mem.length || byteStart + (quantity * 2) > mem.length) {\n          let buf = Buffer.allocUnsafe(2)\n\n          buf.writeUInt8(0x84, 0)\n          buf.writeUInt8(0x02, 1)\n          cb(buf)\n          return\n        }\n\n        let head = Buffer.allocUnsafe(2)\n\n        head.writeUInt8(0x04, 0)\n        head.writeUInt8(quantity * 2, 1)\n\n        let response = Buffer.concat([head, mem.slice(byteStart, byteStart + quantity * 2)])\n\n        cb(response)\n      }.bind(this), this.responseDelay)\n    }.bind(this)\n\n    init()\n  })\n"]}