{"version":3,"sources":["handler/server/WriteMultipleCoils.js"],"names":["stampit","require","module","exports","init","debug","this","log","responseDelay","bind","setRequestHandler","onRequest","setTimeout","pdu","cb","buf","allocUnsafe","Buffer","writeUInt8","quantity","byteCount","readUInt8","emit","start","mem","getCoils","length","response","writeUInt16BE","newValue","current","j","i","oldValue","Math","floor","pow"],"mappings":"AAIA,aAEA,IAAIA,QAAUC,QAAQ,WAEtBC,OAAOC,QAAUH,UAEbI,KAAIA,WACF,IAAAA,EAASC,WAATC,KAAKC,IAAIF,MAAM,oDAGRG,KAAAA,gBACNF,KAAAE,cAAA,GAGDC,KAAKC,kBARP,GAAAC,IAQEF,KAAKH,MAGLM,EAAW,SAAYC,EAAAC,GACrBF,WAASP,WAGP,GAHFC,KAAKC,IAAIF,MAAM,0CAGTU,EAAAA,OAAaC,EAAAA,CAAjB,IAAID,EAAME,OAAOD,YAAY,GAM9B,OAHCD,EAAIG,WAAW,IAAf,GACAJ,EAAAI,WAAA,EAAA,QACAJ,EAAAC,GAIF,IAAII,EAAAA,EAAWN,aAAA,GACXO,EAAYP,EAAIQ,aAApB,GAAID,EAAYP,EAAIQ,UAAU,GAE9Bf,KAAKgB,KAAK,+BAAgCC,EAAOJ,EAAUC,GAE3D,IAAII,EAAMlB,KAAKmB,WAIb,GAAIV,EAAaC,EAAPC,EAAAA,QAAmBM,EAA7BJ,EAAA,EAAAK,EAAAE,OAAA,CAAA,IAAIX,EAAME,OAAOD,YAAY,GAM9B,OAHCD,EAAIG,WAAW,IAAf,GACAJ,EAAGC,WAAH,EAAA,QACAD,EAAAC,GAGF,IAAIY,EAAWV,OAAOD,YAAY,GAGlCW,EAASC,WAAT,GAAA,GACAD,EAASC,cAAcT,EAAvB,GAAAQ,EAASC,cAAcT,EAAU,GAQ/B,IALF,IAAIU,OAAAA,EACAC,OAAAA,EACAC,EAAJlB,EAAAQ,UAAA,GAAIU,EAAI,EAGNC,EAAAT,EAAAS,EAAAT,EAAAJ,EAAAa,GAAA,EACAC,EAAWT,EAAIH,UAAUa,KAAKC,MAAMH,EAAI,IAGxCH,EACEA,KAAAA,IAAWI,EAAAA,EAAAA,GAAWC,EACjBD,EAAAC,KAAAE,IAAA,EAAAJ,EAAA,GAENC,GAAAC,KAAAE,IAAA,EAAAJ,EAAA,GAGDR,EAAIN,WAAWW,EAAUK,KAAKC,MAAMH,EAAI,KAGxCD,GAAK,GAGHD,GAAcT,GAAAA,EAAJF,IACXW,EAAAjB,EAAAQ,UAAA,EAAAa,KAAAC,MAAAJ,EAAA,KAGHzB,KAAKgB,KAAK,gCAAiCC,EAAOJ,EAAUC,GAG5DX,EAAKkB,IAnEOlB,KAAAH,MAAhBA,KAAAE,gBAoEEC,KAAKH,MAhFXF","file":"../../../handler/server/WriteMultipleCoils.js","sourcesContent":["/**\n * Modbus server write multiple coils.\n * @module ModbusServerWriteMultipleCoils\n */\n'use strict'\n\nlet stampit = require('stampit')\n\nmodule.exports = stampit()\n  .init(function () {\n    let init = function () {\n      this.log.debug('initiating write multiple coils request handler.')\n\n      if (!this.responseDelay) {\n        this.responseDelay = 0\n      }\n\n      this.setRequestHandler(15, onRequest)\n    }.bind(this)\n\n    let onRequest = function (pdu, cb) {\n      setTimeout(function () {\n        this.log.debug('handling write multiple coils request.')\n\n        if (pdu.length < 3) {\n          let buf = Buffer.allocUnsafe(2)\n\n          buf.writeUInt8(0x8F, 0)\n          buf.writeUInt8(0x02, 1)\n          cb(buf)\n          return\n        }\n\n        let start = pdu.readUInt16BE(1)\n        let quantity = pdu.readUInt16BE(3)\n        let byteCount = pdu.readUInt8(5)\n\n        this.emit('preWriteMultipleCoilsRequest', start, quantity, byteCount)\n\n        let mem = this.getCoils()\n\n        // error response\n        if (start > mem.length * 8 || start + quantity > mem.length * 8) {\n          let buf = Buffer.allocUnsafe(2)\n\n          buf.writeUInt8(0x8F, 0)\n          buf.writeUInt8(0x02, 1)\n          cb(buf)\n          return\n        }\n\n        let response = Buffer.allocUnsafe(5)\n\n        response.writeUInt8(0x0F, 0)\n        response.writeUInt16BE(start, 1)\n        response.writeUInt16BE(quantity, 3)\n\n        let oldValue\n        let newValue\n        let current = pdu.readUInt8(6 + 0)\n        let j = 0\n\n        for (let i = start; i < start + quantity; i += 1) {\n          // reading old value from the coils register\n          oldValue = mem.readUInt8(Math.floor(i / 8))\n\n          // apply new value\n          if (Math.pow(2, j % 8) & current) {\n            newValue = oldValue | Math.pow(2, i % 8)\n          } else {\n            newValue = oldValue & ~Math.pow(2, i % 8)\n          }\n\n          // write to buffer\n          mem.writeUInt8(newValue, Math.floor(i / 8))\n\n          // read new value from request pdu\n          j += 1\n\n          if (j % 8 === 0 && j < quantity) {\n            current = pdu.readUInt8(6 + Math.floor(j / 8))\n          }\n        }\n\n        this.emit('postWriteMultipleCoilsRequest', start, quantity, byteCount)\n\n        cb(response)\n      }.bind(this), this.responseDelay)\n    }.bind(this)\n\n    init()\n  })\n"]}