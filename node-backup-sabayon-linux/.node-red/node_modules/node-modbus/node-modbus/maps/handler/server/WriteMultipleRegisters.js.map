{"version":3,"sources":["handler/server/WriteMultipleRegisters.js"],"names":["stampit","require","module","exports","init","debug","this","log","responseDelay","bind","setRequestHandler","onRequest","setTimeout","pdu","cb","buf","allocUnsafe","Buffer","writeUInt8","byteStart","start","quantity","readUInt16BE","byteCount","readUInt8","emit","mem","getHolding","length","response","writeUInt16BE","copy"],"mappings":"AAIA,aAEA,IAAIA,QAAUC,QAAQ,WAEtBC,OAAOC,QAAUH,UAEbI,KAAIA,WACF,IAAAA,EAASC,WAATC,KAAKC,IAAIF,MAAM,wDAGRG,KAAAA,gBACNF,KAAAE,cAAA,GAGDC,KAAKC,kBARP,GAAAC,IAQEF,KAAKH,MAGLM,EAAW,SAAYC,EAAAC,GACrBF,WAASP,WAGP,GAHFC,KAAKC,IAAIF,MAAM,8CAGTU,EAAAA,OAAaC,EAAAA,CAAjB,IAAID,EAAME,OAAOD,YAAY,GAM9B,OAHCD,EAAIG,WAAW,IAAf,GACAJ,EAAAI,WAAA,EAAA,QACAJ,EAAAC,GAIF,IAAII,EAAAA,EAAYC,aAAhB,GACIC,EAAeC,EAAJT,EACXU,EAAYV,EAAIW,aAApB,GAAID,EAAYV,EAAIW,UAAU,GAG5B,GAAIT,EAAME,IAAOD,CAAjB,IAAID,EAAME,OAAOD,YAAY,GAM9B,OAHCD,EAAIG,WAAW,IAAf,GACAJ,EAAGC,WAAH,EAAA,QACAD,EAAAC,GAGFT,KAAKmB,KAAK,mCAAoCN,EAAWE,EAAUE,GAEnE,IAAIG,EAAMpB,KAAKqB,aAGb,GAAIZ,EAAME,EAAOD,QAAPG,EAAV,EAAAE,EAAAK,EAAAE,OAAA,CAAA,IAAIb,EAAME,OAAOD,YAAY,GAM9B,OAHCD,EAAIG,WAAW,IAAM,GACrBJ,EAAGC,WAAH,EAAA,QACAD,EAAAC,GAIFc,IAAAA,EAASX,OAATF,YAAA,GACAa,EAASC,WAAT,GAAA,GACAD,EAASC,cAAcT,EAAvB,GAAAQ,EAASC,cAAcT,EAAU,GAEjCR,EAAIkB,KAAKL,EAAKP,EAAW,EAAG,EAAII,GAEhCjB,KAAKmB,KAAK,oCAAqCN,EAAWE,EAAUE,GAGpEd,EAAKoB,IAlDOpB,KAAAH,MAAhBA,KAAAE,gBAmDEC,KAAKH,MA/DXF","file":"../../../handler/server/WriteMultipleRegisters.js","sourcesContent":["/**\n * Modbus server write multiple registers.\n * @module ModbusServerWriteRegisters\n */\n'use strict'\n\nlet stampit = require('stampit')\n\nmodule.exports = stampit()\n  .init(function () {\n    let init = function () {\n      this.log.debug('initiating write multiple registers request handler.')\n\n      if (!this.responseDelay) {\n        this.responseDelay = 0\n      }\n\n      this.setRequestHandler(16, onRequest)\n    }.bind(this)\n\n    let onRequest = function (pdu, cb) {\n      setTimeout(function () {\n        this.log.debug('handling write multiple registers request.')\n\n        if (pdu.length < 3) {\n          let buf = Buffer.allocUnsafe(2)\n\n          buf.writeUInt8(0x90, 0)\n          buf.writeUInt8(0x02, 1)\n          cb(buf)\n          return\n        }\n\n        let start = pdu.readUInt16BE(1)\n        let byteStart = start * 2\n        let quantity = pdu.readUInt16BE(3)\n        let byteCount = pdu.readUInt8(5)\n\n        if (quantity > 0x007b) {\n          let buf = Buffer.allocUnsafe(2)\n\n          buf.writeUInt8(0x90, 0)\n          buf.writeUInt8(0x03, 1)\n          cb(buf)\n          return\n        }\n\n        this.emit('preWriteMultipleRegistersRequest', byteStart, quantity, byteCount)\n\n        let mem = this.getHolding()\n\n        if (byteStart > mem.length || byteStart + (quantity * 2) > mem.length) {\n          let buf = Buffer.allocUnsafe(2)\n\n          buf.writeUInt8(0x90, 0)\n          buf.writeUInt8(0x02, 1)\n          cb(buf)\n          return\n        }\n\n        let response = Buffer.allocUnsafe(5)\n        response.writeUInt8(0x10, 0)\n        response.writeUInt16BE(start, 1)\n        response.writeUInt16BE(quantity, 3)\n\n        pdu.copy(mem, byteStart, 6, 6 + byteCount)\n\n        this.emit('postWriteMultipleRegistersRequest', byteStart, quantity, byteCount)\n\n        cb(response)\n      }.bind(this), this.responseDelay)\n    }.bind(this)\n\n    init()\n  })\n"]}