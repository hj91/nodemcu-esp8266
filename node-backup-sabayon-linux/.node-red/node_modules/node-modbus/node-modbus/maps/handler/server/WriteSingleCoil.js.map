{"version":3,"sources":["handler/server/WriteSingleCoil.js"],"names":["stampit","require","module","exports","init","debug","this","log","responseDelay","bind","setRequestHandler","onRequest","setTimeout","pdu","cb","allocUnsafe","buf","Buffer","writeUInt8","value","readUInt16BE","emit","address","mem","getCoils","response","writeUInt16BE","newValue","readUInt8","Math","floor","oldValue","pow"],"mappings":"AAIA,aAEA,IAAIA,QAAUC,QAAQ,WAEtBC,OAAOC,QAAUH,UAEbI,KAAIA,WACF,IAAAA,EAASC,WAATC,KAAKC,IAAIF,MAAM,iDAGRG,KAAAA,gBACNF,KAAAE,cAAA,GAGDC,KAAKC,kBARP,EAAAC,IAQEF,KAAKH,MAGLM,EAAW,SAAYC,EAAAC,GACrBF,WAASP,WAGP,GAHFC,KAAKC,IAAIF,MAAM,uCAGIU,IAAbC,EAAAA,OAAaD,CAAjB,IAAIC,EAAMC,OAAOF,YAAY,GAM9B,OAHCC,EAAIE,WAAW,IAAf,GACAJ,EAAAI,WAAA,EAAA,QACAJ,EAAAE,GAIF,IAAIG,EAAUN,EAAIO,aAAJ,GAAVD,IAAkC,IAAxBN,EAAIO,aAAa,IAG7B,GAAiBL,IAAbC,EAAAA,aAAaD,IAAjB,QAAAF,EAAAO,aAAA,GAAA,CAAA,IAAIJ,EAAMC,OAAOF,YAAY,GAM9B,OAHCC,EAAIE,WAAW,IAAf,GACAJ,EAAGE,WAAH,EAAA,QACAF,EAAAE,GAGFV,KAAKe,KAAK,4BAA6BC,EAASH,GAEhD,IAAII,EAAMjB,KAAKkB,WAGb,GAAIR,EAAaD,EAAPE,EAAAA,OAAA,CAAV,IAAID,EAAMC,OAAOF,YAAY,GAM9B,OAHCC,EAAIE,WAAW,IAAM,GACrBJ,EAAGE,WAAH,EAAA,QACAF,EAAAE,GAGF,IAAIS,EAAWR,OAAOF,YAAY,GAGlCU,EAASC,WAAT,EAAuBJ,GACvBG,EAASC,cAAcP,EAAQ,GAA/BM,EAASC,cAAcP,EAAQ,MAAS,EAAQ,GAGhD,IAAIQ,EAAAA,EAAJC,UAAAC,KAAAC,MAAAR,EAAA,IAAIK,OAAAA,EAEJA,EACEA,EACKI,EAAAF,KAAAG,IAAA,EAAAV,EAAA,GAENS,GAAAF,KAAAG,IAAA,EAAAV,EAAA,GAEDC,EAAIL,WAAWS,EAAUE,KAAKC,MAAMR,EAAU,IAE9ChB,KAAKe,KAAK,6BAA8BC,EAASH,GAGjDV,EAAKgB,IA1DOhB,KAAAH,MAAhBA,KAAAE,gBA2DEC,KAAKH,MAvEXF","file":"../../../handler/server/WriteSingleCoil.js","sourcesContent":["/**\n * Modbus server write single coil.\n * @module ModbusServerWriteCoil\n */\n'use strict'\n\nlet stampit = require('stampit')\n\nmodule.exports = stampit()\n  .init(function () {\n    let init = function () {\n      this.log.debug('initiating write single coil request handler.')\n\n      if (!this.responseDelay) {\n        this.responseDelay = 0\n      }\n\n      this.setRequestHandler(5, onRequest)\n    }.bind(this)\n\n    let onRequest = function (pdu, cb) {\n      setTimeout(function () {\n        this.log.debug('handling write single coil request.')\n\n        if (pdu.length !== 5) {\n          let buf = Buffer.allocUnsafe(2)\n\n          buf.writeUInt8(0x85, 0)\n          buf.writeUInt8(0x02, 1)\n          cb(buf)\n          return\n        }\n\n        let address = pdu.readUInt16BE(1)\n        let value = !(pdu.readUInt16BE(3) === 0x0000)\n\n        if (pdu.readUInt16BE(3) !== 0x0000 && pdu.readUInt16BE(3) !== 0xFF00) {\n          let buf = Buffer.allocUnsafe(2)\n\n          buf.writeUInt8(0x85, 0)\n          buf.writeUInt8(0x03, 1)\n          cb(buf)\n          return\n        }\n\n        this.emit('preWriteSingleCoilRequest', address, value)\n\n        let mem = this.getCoils()\n\n        if (address > mem.length * 8) {\n          let buf = Buffer.allocUnsafe(2)\n\n          buf.writeUInt8(0x85, 0)\n          buf.writeUInt8(0x02, 1)\n          cb(buf)\n          return\n        }\n\n        let response = Buffer.allocUnsafe(5)\n\n        response.writeUInt8(5, 0)\n        response.writeUInt16BE(address, 1)\n        response.writeUInt16BE(value ? 0xFF00 : 0x0000, 3)\n\n        let oldValue = mem.readUInt8(Math.floor(address / 8))\n        let newValue\n\n        if (value) {\n          newValue = oldValue | Math.pow(2, address % 8)\n        } else {\n          newValue = oldValue & ~Math.pow(2, address % 8)\n        }\n\n        mem.writeUInt8(newValue, Math.floor(address / 8))\n\n        this.emit('postWriteSingleCoilRequest', address, value)\n\n        cb(response)\n      }.bind(this), this.responseDelay)\n    }.bind(this)\n\n    init()\n  })\n"]}