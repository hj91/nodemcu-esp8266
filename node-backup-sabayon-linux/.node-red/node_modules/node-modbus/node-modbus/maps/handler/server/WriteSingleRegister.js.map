{"version":3,"sources":["handler/server/WriteSingleRegister.js"],"names":["stampit","require","module","exports","init","debug","this","log","responseDelay","bind","setRequestHandler","onRequest","setTimeout","pdu","cb","allocUnsafe","buf","Buffer","writeUInt8","byteAddress","address","value","readUInt16BE","emit","mem","getHolding","response","writeUInt16BE"],"mappings":"AAIA,aAEA,IAAIA,QAAUC,QAAQ,WAEtBC,OAAOC,QAAUH,UAEbI,KAAIA,WACF,IAAAA,EAASC,WAATC,KAAKC,IAAIF,MAAM,qDAGRG,KAAAA,gBACNF,KAAAE,cAAA,GAGDC,KAAKC,kBARP,EAAAC,IAQEF,KAAKH,MAGLM,EAAW,SAAYC,EAAAC,GACrBF,WAASP,WAGP,GAHFC,KAAKC,IAAIF,MAAM,2CAGIU,IAAbC,EAAAA,OAAaD,CAAjB,IAAIC,EAAMC,OAAOF,YAAY,GAM9B,OAHCC,EAAIE,WAAW,IAAf,GACAJ,EAAAI,WAAA,EAAA,QACAJ,EAAAE,GAIF,IAAIG,EAAAA,EAAcC,aAAlB,GACIC,EAAQ,EAAIC,EAAZD,EAAQR,EAAIS,aAAa,GAE7BhB,KAAKiB,KAAK,gCAAiCJ,EAAaE,GAExD,IAAIG,EAAMlB,KAAKmB,aAGb,GAAIT,EAAaD,EAAAA,OAAY,CAA7B,IAAIC,EAAMC,OAAOF,YAAY,GAM9B,OAHCC,EAAIE,WAAW,IAAf,GACAJ,EAAGE,WAAH,EAAA,QACAF,EAAAE,GAGF,IAAIU,EAAWT,OAAOF,YAAY,GAGlCW,EAASC,WAAT,GACAD,EAASC,cAAcN,EAAvB,GAAAK,EAASC,cAAcN,EAAO,GAE9BG,EAAIG,cAAcN,EAAOF,GAEzBb,KAAKiB,KAAK,iCAAkCJ,EAAaE,GAGzDZ,EAAKiB,IAzCOjB,KAAAH,MAAhBA,KAAAE,gBA0CEC,KAAKH,MAtDXF","file":"../../../handler/server/WriteSingleRegister.js","sourcesContent":["/**\n * Modbus server write single register.\n * @module ModbusServerWriteRegister\n */\n'use strict'\n\nlet stampit = require('stampit')\n\nmodule.exports = stampit()\n  .init(function () {\n    let init = function () {\n      this.log.debug('initiating write single register request handler.')\n\n      if (!this.responseDelay) {\n        this.responseDelay = 0\n      }\n\n      this.setRequestHandler(6, onRequest)\n    }.bind(this)\n\n    let onRequest = function (pdu, cb) {\n      setTimeout(function () {\n        this.log.debug('handling write single register request.')\n\n        if (pdu.length !== 5) {\n          let buf = Buffer.allocUnsafe(2)\n\n          buf.writeUInt8(0x86, 0)\n          buf.writeUInt8(0x02, 1)\n          cb(buf)\n          return\n        }\n\n        let address = pdu.readUInt16BE(1)\n        let byteAddress = address * 2\n        let value = pdu.readUInt16BE(3)\n\n        this.emit('preWriteSingleRegisterRequest', byteAddress, value)\n\n        let mem = this.getHolding()\n\n        if (byteAddress > mem.length) {\n          let buf = Buffer.allocUnsafe(2)\n\n          buf.writeUInt8(0x86, 0)\n          buf.writeUInt8(0x02, 1)\n          cb(buf)\n          return\n        }\n\n        let response = Buffer.allocUnsafe(5)\n\n        response.writeUInt8(0x06)\n        response.writeUInt16BE(address, 1)\n        response.writeUInt16BE(value, 3)\n\n        mem.writeUInt16BE(value, byteAddress)\n\n        this.emit('postWriteSingleRegisterRequest', byteAddress, value)\n\n        cb(response)\n      }.bind(this), this.responseDelay)\n    }.bind(this)\n\n    init()\n  })\n"]}