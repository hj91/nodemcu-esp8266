{"version":3,"sources":["modbus-server-core.js"],"names":["stampit","require","EventBus","logger","core","refs","logLabel","logLevel","compose","holding","init","input","handler","coils","Buffer","alloc","log","info","this","onData","callback","bind","pdu","fc","readUInt8","reqHandler","buf","writeUInt8","response","debug","getCoils","getInput","getHolding","module","exports"],"mappings":"AAIA,aAEA,IAAIA,QAAUC,QAAQ,WAClBC,SAAWD,QAAQ,qBACnBE,OAASF,QAAQ,eAEjBG,KAAOJ,UAEPK,MACAC,SAAY,mBACZC,SAAc,OAEfC,YAAQN,IAGPM,QAAIC,SAAAA,QACJC,KAAIC,WACJ,IAAIC,OAAAA,EAFAH,OAAAA,EAIAC,OAAAA,EACEE,KAAJF,EAEO,WAIHG,EAHFA,KAAQA,MAGAJ,KAAVI,MAFCC,OAAAC,MAAA,KAAA,GAQGN,EAHFA,KAAUA,QAGFE,KAAOF,QAFhBK,OAAAC,MAAA,KAAA,GAQGJ,EAHFA,KAAQA,MAGDJ,KAATI,MAFCG,OAAAC,MAAA,KAAA,GAKIC,KAAIC,WAtBAC,KAAAF,IAAXT,SAAAW,KAAAX,UAyBAW,KAAKC,IAALF,KAAc,cAAeG,KAAUJ,IAAAT,WACrCc,KAAKL,MAELE,KAAAC,OAAA,SAAAG,EAAAF,GACAF,KAAIK,IAAKD,MAAIE,iBAGb,IAAIC,EAAAA,EAAAA,UAAqBF,GAGvBE,EAAAb,EAAAW,GAEA,IAAAE,EAAA,CAKAC,KAAIC,IAAAA,MAAWJ,oBAAfA,GADA,IAAIG,EAAMZ,OAAOC,MAAM,GASzBU,OALEL,EAAAA,WAAAG,EAAA,IAAA,GAFAG,EAAIC,WAAW,EAAM,QAKtBP,EAAAM,GAKDL,EA5BFC,EAAA,SAAAM,GA0BIR,EAASQ,MAKXP,KAAKL,MAELJ,KAAAA,kBAAA,SAAAW,EAAAH,GAKF,OAPEF,KAAKF,IAAIa,MAAM,0BAA2BN,GAD5CX,EAAAW,GAAAH,EAQKU,MAALZ,KAAKY,SAAW,WAIhB,OAAKC,GAALb,KAAKa,SAAW,WAIhB,OAAKC,GAALd,KAAKc,WAAa,WAIlBtB,OAAAA,GAGJuB,MAAAA,OAAOC,QAAU9B","file":"../modbus-server-core.js","sourcesContent":["/**\n * Modbus server core.\n * @module ModbusCoreServer\n */\n'use strict'\n\nvar stampit = require('stampit')\nvar EventBus = require('stampit-event-bus')\nvar logger = require('stampit-log')\n\nlet core = stampit()\n  .refs({\n    'logLabel': 'ModbusCoreServer',\n    'logLevel': 'info',\n    'logEnabled': true\n  })\n  .compose(EventBus, logger)\n  .init(function () {\n    let coils\n    let holding\n    let input\n    let handler = {}\n\n    let init = function () {\n      if (!this.coils) {\n        coils = Buffer.alloc(1024, 0)\n      } else {\n        coils = this.coils\n      }\n\n      if (!this.holding) {\n        holding = Buffer.alloc(1024, 0)\n      } else {\n        holding = this.holding\n      }\n\n      if (!this.input) {\n        input = Buffer.alloc(1024, 0)\n      } else {\n        input = this.input\n      }\n\n      if (this.logLevel) {\n        this.log.logLevel = this.logLevel\n      }\n      this.log.info('log level: ' + this.log.logLevel)\n    }.bind(this)\n\n    this.onData = function (pdu, callback) {\n      this.log.debug('incoming data')\n\n      // get fc and byteCount in advance\n      let fc = pdu.readUInt8(0)\n\n      // get the pdu handler\n      let reqHandler = handler[fc]\n\n      if (!reqHandler) {\n        // write a error/exception pkt to the\n        // socket with error code fc + 0x80 and\n        // exception code 0x01 (Illegal Function)\n\n        this.log.debug('no handler for fc', fc)\n\n        let buf = Buffer.alloc(2)\n        buf.writeUInt8(fc + 0x80, 0)\n        buf.writeUInt8(0x01, 1)\n\n        callback(buf)\n\n        return\n      }\n\n      reqHandler(pdu, function (response) {\n        callback(response)\n      })\n    }.bind(this)\n\n    this.setRequestHandler = function (fc, callback) {\n      this.log.debug('setting request handler', fc)\n\n      handler[fc] = callback\n\n      return this\n    }\n\n    this.getCoils = function () {\n      return coils\n    }\n\n    this.getInput = function () {\n      return input\n    }\n\n    this.getHolding = function () {\n      return holding\n    }\n\n    init()\n  })\n\nmodule.exports = core\n"]}