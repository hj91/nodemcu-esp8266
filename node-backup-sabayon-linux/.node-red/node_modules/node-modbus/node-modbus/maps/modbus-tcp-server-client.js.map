{"version":3,"sources":["modbus-tcp-server-client.js"],"names":["stampit","require","module","exports","logLabel","compose","buffer","init","Buffer","alloc","error","this","Error","undefined","socketId","onRequest","log","socket","on","onSocketError","bind","onSocketData","onSocketEnd","onEnd","debug","data","concat","byteLength","length","trans_id","readUInt16BE","protocol_ver","unit_id","readUInt8","len","pdu","slice","request","e"],"mappings":"AAIA,aACA,IAAIA,QAAUC,QAAQ,WAAlBD,IAAAA,QAAUC,eAGdC,OAAOC,QAAUH,UAAjBE,MAEIE,SAAY,0BAIZC,QAAIC,KADLC,KAAK,WAGJ,IAAIA,EAAOC,OAAAC,MAAY,GAEnBF,EAASG,WACT,IAAAC,KAAUC,aAAVC,IAAgBF,KAAAG,WAAhBH,KAAAI,UAAA,MACDJ,KAAAK,IAAAN,MAAA,UAAAC,KAAAM,OAAA,aAAAN,KAAAG,SAAA,YAAAH,KAAAI,WADO,IAAIH,MAAM,sBAKlBD,KAAKM,OAALC,GAAe,MAASP,KAAKQ,aAC7BC,KAAKH,OATPC,GAAA,OAAAP,KAAAU,cAQEV,KAAKM,OAAOC,GAAG,QAASP,KAAKQ,gBAG/BC,KAAKE,MAEDX,KAAAW,YAAA,WACDX,KAAAY,OADCZ,KAAKY,QAGPZ,KAAKK,IAAIQ,MAAM,4BAA6Bb,KAAKG,WAGnDM,KAAKC,MAALV,KAAKU,aAAe,SAAUI,GAK5B,IAFAnB,KAAAA,IAASE,MAAOkB,uBAAhBf,KAAAG,SAAAW,EAAAE,YAEArB,EAAOA,OAAOsB,QAAYtB,EAAAmB,IAAnBnB,EAAOsB,OAAS,GAAG,CAKtBC,IAAAA,EAAUvB,EAAOwB,aAAa,GAC9BC,GACAC,SAAS1B,EAAO2B,aAAP,GADTF,aAAczB,EAAOwB,aAAa,GAIpCE,QAAA1B,EAAA2B,UAAA,IAKA,GAAI3B,EAAOsB,OAAS,EAAIM,EAAM,EAI1BC,MAGJ,IAAAA,EAAA7B,EAAA8B,MAAA,EAAA,EAAAF,GAEAvB,KAAKK,IAAIQ,MAAM,kBAKhBb,KAAAI,WAAAsB,QAAAA,EAAAF,IAAAA,EAAAlB,OAAAN,KAAAM,SADCX,EAASA,EAAO8B,MAAMD,EAAIP,OAAS,EAAGtB,EAAOsB,UAK/CR,KAAKJ,MADPL,KAAKQ,cAAgB,SAAUmB,GAI/B/B,KAAAA,IAAAA,MAAAA,eAAAA,IApEJa,KAAAT,MAoEIJ","file":"../modbus-tcp-server-client.js","sourcesContent":["/**\n * Modbus TCP server client.\n * @module ModbusTCPServerClient\n */\n'use strict'\nlet stampit = require('stampit')\nlet log = require('stampit-log')\n\nmodule.exports = stampit()\n  .refs({\n    'logLabel': 'ModbusTCPServerClient'\n  })\n  .compose(log)\n  .init(function () {\n    let buffer = Buffer.alloc(0)\n\n    let init = function () {\n      if (!this.socket || this.socketId === undefined || !this.onRequest) {\n        this.log.error('socket:' + this.socket + ' socketId:' + this.socketId + 'onRequest' + this.onRequest)\n        throw new Error('No Socket defined.')\n      }\n\n      this.socket.on('end', this.onSocketEnd)\n      this.socket.on('data', this.onSocketData)\n      this.socket.on('error', this.onSocketError)\n    }.bind(this)\n\n    this.onSocketEnd = function () {\n      if (this.onEnd) {\n        this.onEnd()\n      }\n\n      this.log.debug('connection closed, socket', this.socketId)\n    }.bind(this)\n\n    this.onSocketData = function (data) {\n      this.log.debug('received data socket', this.socketId, data.byteLength)\n\n      buffer = Buffer.concat([buffer, data])\n\n      while (buffer.length > 8) {\n        // 1. extract mbap\n\n        let len = buffer.readUInt16BE(4)\n        let request = {\n          trans_id: buffer.readUInt16BE(0),\n          protocol_ver: buffer.readUInt16BE(2),\n          unit_id: buffer.readUInt8(6)\n        }\n\n        // 2. extract pdu\n\n        /* received data is not complete yet.\n         * break loop and wait for more data. */\n\n        if (buffer.length < 7 + len - 1) {\n          break\n        }\n\n        let pdu = buffer.slice(7, 7 + len)\n\n        // emit data event and let the\n        // listener handle the pdu\n\n        this.log.debug('PDU extracted.')\n\n        this.onRequest({request: request, pdu: pdu, socket: this.socket})\n\n        buffer = buffer.slice(pdu.length + 7, buffer.length)\n      }\n    }.bind(this)\n\n    this.onSocketError = function (e) {\n      this.log.error('Socker error', e)\n    }.bind(this)\n\n    init()\n  })\n"]}