"use strict";var stampit=require("stampit"),ModbusCore=require("./modbus-client-core.js");module.exports=stampit().compose(ModbusCore).refs({logLabel:"ModbusSerialClient"}).init(function(){var t=require("serialport"),e=require("crc"),i=void 0,s=Buffer.alloc(256),o=0,r=0;this.connectionDelay||("win32"===process.platform?this.connectionDelay=500:this.connectionDelay=250);var n=function(){if(this.setState("init"),this.connectionType||(this.connectionType="RTU"),!this.portName)throw new Error("No portname.");this.baudRate||(this.baudRate=9600),this.dataBits||(this.dataBits=8),this.stopBits||(this.stopBits=1),this.parity||(this.parity="none"),this.injectedSerialport?(i=this.injectedSerialport,this.log.debug("we are working on a mockup serialport")):setTimeout(a,this.connectionDelay),this.log.debug("set on send method"),this.on("send",f)}.bind(this),a=function(){i="ASCII"===this.connectionType?new t(this.portName,{baudRate:this.baudRate,parity:this.parity,dataBits:this.dataBits,stopBits:this.stopBits,parser:"BIG"===this.endianType?t.parsers.byteDelimiter([13,10]):t.parsers.byteDelimiter([10,13])}):new t(this.portName,{baudRate:this.baudRate,parity:this.parity,dataBits:this.dataBits,stopBits:this.stopBits}),this.log.debug("serialport settings: "+JSON.stringify(i.options)),i.on("open",c),i.on("disconnect",d),i.on("close",h),i.on("data",l),i.on("error",u)}.bind(this),c=function(){this.setState("ready")}.bind(this),d=function(t){this.setState("disconnected"),t&&this.emit("error",t)}.bind(this),h=function(){this.setState("closed")}.bind(this),l=function(t){if(0!==t.length)if(this.log.debug("received serial data "+JSON.stringify(t)),t.length+o<=s.length){if(0===o&&t&&0===t[0])return this.log.debug("we got a broadcast from master"),void this.resetReceiveBuffer();t.copy(s,o,0),(o+=t.length)>=5?5===o?s[1]>=128&&0===e.crc16modbus(s.slice(0,o))&&(this.emit("data",s.slice(1,o-2)),this.resetReceiveBuffer()):r>0?o===r?0===e.crc16modbus(s.slice(0,o))&&(this.emit("data",s.slice(1,o-2)),this.resetReceiveBuffer()):this.log.debug("received bytes "+r+" differ from expected bytes "+o):(this.log.debug("none expected bytes: "+r),this.emit("data",t)):this.log.debug("received bytes to less to do more -> receivedBytes: "+o)}else this.log.debug("received bytes to less to do more -> receivedBytes: "+o);else this.log.debug("received bytes to less to do more -> pdu.length is empty")}.bind(this);this.resetReceiveBuffer=function(){o=0,s=null,s=Buffer.alloc(256)};var u=function(t){this.emit("error",t)}.bind(this),f=function(t,s){this.log.debug("PDU data"+JSON.stringify(t));var n=Buffer.allocUnsafe(1);n.writeUInt8(1);var a=Buffer.concat([n,t]),c=e.crc16modbus(a),d=Buffer.allocUnsafe(2);d.writeUInt16LE(c,0),this.log.debug("crcModbus: "+JSON.stringify(c)+" crcModbus Buffer:"+JSON.stringify(d));var h=Buffer.concat([a,d]);switch(this.log.debug("Endian-Type: "+this.endianType),this.log.debug("Buffer with CR16LE "+this.connectionType+" : "+JSON.stringify(h)),o=0,t[0]){case 1:case 2:r=5+Math.floor(t.readInt16BE(3)/8)+1;break;case 3:case 4:r=5+2*t.readInt16BE(3);break;case 5:case 6:case 15:case 16:r=8;break;default:r=0}this.inState("waiting")&&i.isOpen()&&i.write(h,function(t){t?(this.log.error("error on write to serial:"+JSON.stringify(t)),this.emit("error",t)):this.log.debug("package written to serialport")}.bind(this)),s()}.bind(this);this.close=function(){i.close()},n()});
//# sourceMappingURL=maps/modbus-serial-client.js.map
