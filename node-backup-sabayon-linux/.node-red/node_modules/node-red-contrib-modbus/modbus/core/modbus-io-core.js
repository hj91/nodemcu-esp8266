"use strict";require("source-map-support").install();var de=de||{biancoroyal:{modbus:{io:{core:{}}}}};de.biancoroyal.modbus.io.core.internalDebug=de.biancoroyal.modbus.io.core.internalDebug||require("debug")("contribModbus:io:core"),de.biancoroyal.modbus.io.core.LineByLineReader=de.biancoroyal.modbus.io.core.LineByLineReader||require("line-by-line"),de.biancoroyal.modbus.io.core.nameValuesFromIOFile=function(e,r,s,a,t){var d=[],u=de.biancoroyal.modbus.io.core;return r.configData&&r.configData.forEach(function(e){e.valueAddress&&e.valueAddress.startsWith("%I")&&d.push(u.buildInputAddressMapping("MB-INPUTS",e,Number(r.addressOffset),Number(t))),e.valueAddress&&e.valueAddress.startsWith("%Q")&&d.push(u.buildOutputAddressMapping("MB-OUTPUTS",e,Number(r.addressOffset),Number(t)))}),d=u.insertValues(d,s),u.convertValuesByType(d,s,a)},de.biancoroyal.modbus.io.core.allValueNamesFromIOFile=function(r){var s=[],a=de.biancoroyal.modbus.io.core;return r&&r.configData&&r.configData.forEach(function(e){e.valueAddress&&e.valueAddress.startsWith("%I")&&s.push(a.buildInputAddressMapping("MB-INPUTS",e,Number(r.addressOffset),0)),e.valueAddress&&e.valueAddress.startsWith("%Q")&&s.push(a.buildOutputAddressMapping("MB-OUTPUTS",e,Number(r.addressOffset),0))}),s},de.biancoroyal.modbus.io.core.getDataTypeFromFirstCharType=function(e){switch(e){case"w":return"Word";case"d":return"Double";case"r":return"Real";case"f":return"Float";case"i":return"Integer";case"l":return"Long";case"b":return"Boolean";default:return"Unsigned Integer"}},de.biancoroyal.modbus.io.core.buildInputAddressMapping=function(e,r,s,a){var t=de.biancoroyal.modbus.io.core,d=0,u=0,i=0,o=0,n=null,b=r.name.substring(0,1),l=r.valueAddress.substring(2,3),c=r.valueAddress.substring(0,3);switch(b){case"w":case"u":d=Number(r.valueAddress.split(c)[1]),i=1,o=16;break;case"i":d=Number(r.valueAddress.split(c)[1]),"W"===l?(i=1,o=16):(i=2,o=32);break;case"r":case"f":d=Number(r.valueAddress.split(c)[1]),i=2,o=32;break;case"d":d=Number(r.valueAddress.split(c)[1]),i=4,o=64;break;case"l":d=Number(r.valueAddress.split(c)[1]),i=5,o=80;break;case"b":"X"===l&&(n=r.valueAddress.split("%IX")[1].split("."),d=Math.floor(Number(n[0])/2),u=8*Number(n[0])+Number(n[1]),o=i=1);break;default:t.internalDebug("unknown input type "+b),o=0}if(o){var m=d-(Number(s)||0);return{register:e,name:r.name,addressStart:d,addressOffset:i,addressOffsetIO:Number(s)||0,addressStartIO:m,registerAddress:m-Number(a),coilStart:u,bitAddress:n,Bit:n?8*Number(n[0])+Number(n[1]):0,bits:o,dataType:t.getDataTypeFromFirstCharType(b),type:"input"}}return{name:r.name,type:b,mapping:r,error:"variable name does not match input mapping"}},de.biancoroyal.modbus.io.core.buildOutputAddressMapping=function(e,r,s,a){var t=de.biancoroyal.modbus.io.core,d=0,u=0,i=0,o=0,n=null,b=r.name.substring(0,1),l=r.valueAddress.substring(2,3),c=r.valueAddress.substring(0,3);switch(b){case"w":case"u":d=Number(r.valueAddress.split(c)[1]),i=1,o=16;break;case"i":d=Number(r.valueAddress.split(c)[1]),"W"===l?(i=1,o=16):(i=2,o=32);break;case"r":case"f":d=Number(r.valueAddress.split(c)[1]),i=2,o=32;break;case"d":d=Number(r.valueAddress.split(c)[1]),i=4,o=64;break;case"l":d=Number(r.valueAddress.split(c)[1]),i=5,o=80;break;case"b":"X"===l&&(n=r.valueAddress.split("%QX")[1].split("."),d=Math.floor(Number(n[0])/2),u=8*Number(n[0])+Number(n[1]),o=i=1);break;default:t.internalDebug("unknown output type "+b),o=0}if(o){var m=d-(Number(s)||0);return{register:e,name:r.name,addressStart:d,addressOffset:i,addressOffsetIO:Number(s)||0,addressStartIO:m,registerAddress:m-Number(a),coilStart:u,bitAddress:n,Bit:n?8*Number(n[0])+Number(n[1]):0,bits:o,dataType:t.getDataTypeFromFirstCharType(b),type:"output"}}return{name:r.name,type:b,mapping:r,error:"variable name does not match output mapping"}},de.biancoroyal.modbus.io.core.insertValues=function(e,r){var s=de.biancoroyal.modbus.io.core,a=0;for(a in e){var t=e[a];if(!t||!t.hasOwnProperty("registerAddress")||t.registerAddress<0)s.internalDebug("Item Not Valid To Insert Value "+JSON.stringify(t));else{if(de.biancoroyal.modbus.io.core.isRegisterSizeWrong(r,t.registerAddress,Number(t.bits))){s.internalDebug("Insert Value Register Reached At Address-Start-IO:"+t.registerAddress+" Bits:"+Number(t.bits));break}switch(Number(t.bits)){case 1:t.value=!!(r[t.registerAddress]&Math.pow(t.bitAddress[1],2));break;case 16:t.value=r[t.registerAddress];break;case 32:t.value=r[t.registerAddress+1]<<16|r[t.registerAddress];break;case 64:t.value=r[t.registerAddress+3]<<48|r[t.registerAddress+2]<<32|r[t.registerAddress+1]<<16|r[t.registerAddress];break;case 80:t.value=r[t.registerAddress+4]<<64|r[t.registerAddress+3]<<48|r[t.registerAddress+2]<<32|r[t.registerAddress+1]<<16|r[t.registerAddress];break;default:t.value=null}}}return e},de.biancoroyal.modbus.io.core.getValueFromBufferByDataType=function(e,r,s){var a=de.biancoroyal.modbus.io.core,t=s.length/2;if(r<0||r>s.length)return a.internalDebug("Wrong Buffer Access Parameter Type:"+e.dataType+" Register-Length: "+t+" Buffer-Length:"+s.length+" Address-Buffer-Offset:"+r),a.internalDebug(JSON.stringify(e)),e;switch(a.internalDebug("Get Value From Buffer By Data Type:"+e.dataType+" Register:"+e.registerAddress+" Bits:"+Number(e.bits)),e.dataType){case"Boolean":e.value=!!(s.readUInt16BE(r)&Math.pow(e.bitAddress[1],2));break;case"Word":switch(e.bits){case"8":e.value=s.readInt8(r);break;default:e.value=s.readInt16BE(r),e.convertedValue=!1}break;case"Integer":switch(e.bits){case"8":e.value=s.readInt8(r);break;case"32":e.value=s.readInt32BE(r);break;case"64":e.value=s.readIntBE(r,8);break;default:e.value=s.readInt16BE(r)}break;case"Real":case"Float":e.value=s.readFloatBE(r,4);break;case"Double":e.value=s.readDoubleBE(r,8);break;case"Long":e.value=s.readDoubleBE(r,10);break;default:switch(e.bits){case"8":e.value=s.readUInt8(r);break;case"32":e.value=s.readUInt32BE(r);break;case"64":e.value=s.readUIntBE(r,8);break;default:e.value=s.readUInt16BE(r),e.convertedValue=!1}}return e},de.biancoroyal.modbus.io.core.convertValuesByType=function(e,r,s){var a=de.biancoroyal.modbus.io.core,t=0,d=0;for(d in e){var u=e[d];if(u&&u.hasOwnProperty("dataType")&&u.hasOwnProperty("registerAddress")&&!(u.registerAddress<0)){if(de.biancoroyal.modbus.io.core.isRegisterSizeWrong(r,u.registerAddress,Number(u.bits))){a.internalDebug("Insert Value Register Reached At Address-Start-IO:"+u.registerAddress+" Bits:"+Number(u.bits));break}if(!(s.buffer instanceof Buffer)){a.internalDebug("Response Buffer Is Not A Buffer "+JSON.stringify(s));break}t=2*Number(u.registerAddress);try{u=a.getValueFromBufferByDataType(u,t,s.buffer)}catch(e){a.internalDebug(e.message)}}else a.internalDebug("Item Not Valid To Convert "+JSON.stringify(u))}return e},de.biancoroyal.modbus.io.core.filterValueNames=function(e,r,s,a){var t=de.biancoroyal.modbus.io.core,d="input";2!==r&&4!==r||(d="output");var u=s,i=Number(s)+Number(a)-1;return t.internalDebug("adr:"+s+" quantity:"+a+" startRegister:"+u+" endRegister:"+i+" functionType:"+d),e.filter(function(e){return 0<=e.registerAddress&&e.addressStartIO>=u&&e.addressStartIO<=i&&e.type===d})},de.biancoroyal.modbus.io.core.isRegisterSizeWrong=function(e,r,s){var a=Number(s)||16,t=Number(r),d=t;return 16<a&&(d=t+a/16-1),t<0||e.length<t||d>e.length},module.exports=de.biancoroyal.modbus.io.core;
//# sourceMappingURL=../maps/core/modbus-io-core.js.map
