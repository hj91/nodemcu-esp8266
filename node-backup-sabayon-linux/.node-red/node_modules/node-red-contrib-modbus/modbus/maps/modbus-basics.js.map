{"version":3,"sources":["modbus-basics.js"],"names":["require","install","module","exports","statusLog","get_timeUnit_name","unit","unitAbbreviation","calc_rateByUnit","rate","rateUnit","parseInt","setNodeStatusProperties","statusValue","showActivities","fillValue","shapeValue","fill","shape","status","setModbusError","node","modbusClient","err","msg","setNodeStatusTo","message","showErrors"],"mappings":"AAOA,aACAA,QAAQ,sBAAsBC,UAM9BC,OAAOC,QAAQC,WAAY,EAM3BF,OAAOC,QAAQE,kBAAoB,SAAUC,GAA7CJ,IAAAA,EAAeG,GAGb,OAAQC,GAAR,IAAA,KACEC,EAAA,QACEA,MACA,IAAA,IACFA,EAAA,OACEA,MACA,IAAA,IACFA,EAAA,OACEA,MACA,IAAA,IACFA,EAAA,KAOF,OAAOA,GAGTL,OAAOC,QAAQK,gBAAkB,SAAUC,EAAMC,GAAjDR,OAAOC,GACL,IAAA,KACE,MACE,IAAA,IACFM,EAAA,IAAAE,SAAAF,GACEA,MACA,IAAA,IACFA,EAAA,IAAAE,SAAAF,GACEA,MACA,IAAA,IACFA,EAAA,KAAAE,SAAAF,GACEA,MACA,QACFA,EAAA,IAKF,OAAOA,GAQTP,OAAOC,QAAQS,wBAA0B,SAAUC,EAAaC,GAAhEZ,IAAAA,EAAeU,SACTG,EAAY,OAGhB,OAAQF,GAAR,IAAA,aACEE,EAAK,SACHA,EAAY,OACZC,MAGF,IAAK,QAALD,EAAA,MACEA,EAAY,OACZC,MAGF,IAAK,cAALD,EAAK,SACHA,EAAY,MACZC,MAGF,IAAK,oBAAL,IAAK,qBACLD,EAAK,SACHA,EAAY,OACZC,MAGF,IAAK,YAALD,EAAK,QACHA,EAAY,OACZC,MAGF,IAAK,UAALD,EAAA,MACEA,EAAY,OACZC,MAGF,IAAK,SAAL,IAAK,iBACL,IAAK,iBACAF,IACHD,EAAKC,UAEJC,EAAA,QACDA,EAAY,MACZC,MAGF,IAAK,eAAL,IAAK,aACLD,EAAK,MACHA,EAAY,OACZC,MAGF,IAAK,UAALD,EAAA,QACEA,EACAC,EAAIF,QAAJD,EAEO,SACLA,EAAAA,OAED,MAGH,QAAAA,GAAA,YAAAA,IACEE,EAAKF,OACHE,EAAY,eAMlB,MAAO,CAACE,KAAMF,EAAWG,MAAOF,EAAYG,OAAQN,IAGtDX,OAAOC,QAAQiB,eAAiB,SAAUC,EAAMC,EAAcC,EAAKC,EAAKC,GAAxEvB,GAAAA,EACE,OAASqB,EAAAG,SACP,IAAA,YACED,EAAA,WACEA,MACA,IAAA,6BACFA,EAAK,0BACHA,MACA,IAAA,gBACFA,EAAK,aACHA,EAAAA,KAAgB,aAChBH,MACA,QACFG,EAAA,SAAAF,EAAAG,SACED,EAAAA,YACAJ,EAAIA,MAAKM,EAAAA","file":"../modbus-basics.js","sourcesContent":["/**\n Copyright (c) 2016,2017, Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n'use strict'\nrequire('source-map-support').install()\n\n/**\n * Modbus core node basics.\n * @module NodeRedModbusBasics\n */\nmodule.exports.statusLog = false\n/**\n *\n * @param unit\n * @returns {string}\n */\nmodule.exports.get_timeUnit_name = function (unit) {\n  let unitAbbreviation = ''\n\n  switch (unit) {\n    case 'ms':\n      unitAbbreviation = 'msec.'\n      break\n    case 's':\n      unitAbbreviation = 'sec.'\n      break\n    case 'm':\n      unitAbbreviation = 'min.'\n      break\n    case 'h':\n      unitAbbreviation = 'h.'\n      break\n    default:\n      break\n  }\n\n  return unitAbbreviation\n}\n\nmodule.exports.calc_rateByUnit = function (rate, rateUnit) {\n  switch (rateUnit) {\n    case 'ms':\n      break\n    case 's':\n      rate = parseInt(rate) * 1000 // seconds\n      break\n    case 'm':\n      rate = parseInt(rate) * 60000 // minutes\n      break\n    case 'h':\n      rate = parseInt(rate) * 3600000 // hours\n      break\n    default:\n      rate = 10000 // 10 sec.\n      break\n  }\n\n  return rate\n}\n/**\n *\n * @param statusValue\n * @param showActivities\n * @returns {{fill: string, shape: string, status: *}}\n */\nmodule.exports.setNodeStatusProperties = function (statusValue, showActivities) {\n  let fillValue = 'yellow'\n  let shapeValue = 'ring'\n\n  switch (statusValue) {\n    case 'connecting':\n      fillValue = 'yellow'\n      shapeValue = 'ring'\n      break\n\n    case 'error':\n      fillValue = 'red'\n      shapeValue = 'ring'\n      break\n\n    case 'initialized':\n      fillValue = 'yellow'\n      shapeValue = 'dot'\n      break\n\n    case 'not ready to read':\n    case 'not ready to write':\n      fillValue = 'yellow'\n      shapeValue = 'ring'\n      break\n\n    case 'connected':\n      fillValue = 'green'\n      shapeValue = 'ring'\n      break\n\n    case 'timeout':\n      fillValue = 'red'\n      shapeValue = 'ring'\n      break\n\n    case 'active':\n    case 'active reading':\n    case 'active writing':\n      if (!showActivities) {\n        statusValue = 'active'\n      }\n      fillValue = 'green'\n      shapeValue = 'dot'\n      break\n\n    case 'disconnected':\n    case 'terminated':\n      fillValue = 'red'\n      shapeValue = 'ring'\n      break\n\n    case 'polling':\n      fillValue = 'green'\n      if (showActivities) {\n        shapeValue = 'ring'\n      } else {\n        statusValue = 'active'\n        shapeValue = 'dot'\n      }\n      break\n\n    default:\n      if (!statusValue || statusValue === 'waiting') {\n        fillValue = 'blue'\n        statusValue = 'waiting ...'\n      }\n      break\n  }\n\n  return {fill: fillValue, shape: shapeValue, status: statusValue}\n}\n\nmodule.exports.setModbusError = function (node, modbusClient, err, msg, setNodeStatusTo) {\n  if (err) {\n    switch (err.message) {\n      case 'Timed out':\n        setNodeStatusTo('timeout')\n        break\n      case 'FSM Not Ready To Reconnect':\n        setNodeStatusTo('not ready to reconnect')\n        break\n      case 'Port Not Open':\n        setNodeStatusTo('reconnect')\n        modbusClient.emit('reconnect')\n        break\n      default:\n        setNodeStatusTo('error ' + err.message)\n        if (node.showErrors) {\n          node.error(err, msg)\n        }\n    }\n  }\n}\n"]}