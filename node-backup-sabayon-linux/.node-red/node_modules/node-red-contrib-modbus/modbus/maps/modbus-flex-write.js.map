{"version":3,"sources":["modbus-flex-write.js"],"names":["module","exports","RED","install","mbBasics","require","mbCore","nodes","registerType","config","internalDebugLog","this","name","ModbusFlexWrite","showStatusActivities","showErrors","node","modbusClient","server","shape","text","statusOptions","status","fill","bufferMessageList","Map","setNodeStatusTo","onModbusInit","failureMsg","onModbusError","onModbusClose","reconnectTimeout","on","onModbusConnect","onModbusActive","msg","hasOwnProperty","payload","error","client","JSON","parse","fc","unitid","parseInt","address","quantity","Number","isInteger","value","indexOf","messageId","getObjectId","topic","set","_msgid","emit","Error","onModbusWriteError","err","verboseLog","logMessage","onModbusWriteDone","statlyMachine","getMachineState","buildMessage","getOriginalMessage","resp","origMsg","values","response","rawMsg","Object","setModbusError","message","settings"],"mappings":"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","file":"../modbus-flex-write.js","sourcesContent":["/**\n Copyright (c) 2016,2017, Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n/**\n * Modbus flexible Write node.\n * @module NodeRedModbusFlexWrite\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  let mbBasics = require('./modbus-basics')\n  let mbCore = require('./core/modbus-core')\n  let internalDebugLog = require('debug')('contribModbus:flex:write')\n\n  function ModbusFlexWrite (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n\n    let node = this\n    let modbusClient = RED.nodes.getNode(config.server)\n    node.bufferMessageList = new Map()\n\n    setNodeStatusTo('waiting')\n\n    node.onModbusInit = function () {\n      setNodeStatusTo('initialize')\n    }\n\n    node.onModbusConnect = function () {\n      setNodeStatusTo('connected')\n    }\n\n    node.onModbusActive = function () {\n      setNodeStatusTo('active')\n    }\n\n    node.onModbusError = function (failureMsg) {\n      setNodeStatusTo('failure')\n      if (node.showErrors) {\n        node.warn(failureMsg)\n      }\n    }\n\n    node.onModbusClose = function () {\n      setNodeStatusTo('closed')\n    }\n\n    node.onModbusBroken = function () {\n      setNodeStatusTo('reconnecting after ' + modbusClient.reconnectTimeout + ' msec.')\n    }\n\n    modbusClient.on('mbinit', node.onModbusInit)\n    modbusClient.on('mbconnected', node.onModbusConnect)\n    modbusClient.on('mbactive', node.onModbusActive)\n    modbusClient.on('mberror', node.onModbusError)\n    modbusClient.on('mbbroken', node.onModbusBroken)\n    modbusClient.on('mbclosed', node.onModbusClose)\n\n    node.on('input', function (msg) {\n      if (!(msg && msg.hasOwnProperty('payload'))) return\n\n      if (msg.payload == null) {\n        setNodeStatusTo('payload error')\n        node.error('invalid msg.payload', msg)\n        return\n      }\n\n      if (!modbusClient.client) {\n        return\n      }\n\n      if (msg.payload) {\n        try {\n          if (typeof msg.payload === 'string') {\n            msg.payload = JSON.parse(msg.payload)\n          }\n\n          msg.payload.fc = parseInt(msg.payload.fc)\n          msg.payload.unitid = parseInt(msg.payload.unitid)\n          msg.payload.address = parseInt(msg.payload.address)\n          msg.payload.quantity = parseInt(msg.payload.quantity)\n\n          if (!(Number.isInteger(msg.payload.fc) &&\n              (msg.payload.fc === 5 ||\n                msg.payload.fc === 6 ||\n                msg.payload.fc === 15 ||\n                msg.payload.fc === 16))) {\n            node.error('FC Not Valid', msg)\n            return\n          }\n\n          if (!(Number.isInteger(msg.payload.address) &&\n              msg.payload.address >= 0 &&\n              msg.payload.address <= 65535)) {\n            node.error('Address Not Valid', msg)\n            return\n          }\n\n          if (!(Number.isInteger(msg.payload.quantity) &&\n              msg.payload.quantity >= 1 &&\n              msg.payload.quantity <= 65535)) {\n            node.error('Quantity Not Valid', msg)\n            return\n          }\n\n          /* HTTP requests for boolean and multiple data string [1,2,3,4,5] */\n          if (msg.payload.hasOwnProperty('value') && typeof msg.payload.value === 'string') {\n            if (msg.payload.value === 'true' || msg.payload.value === 'false') {\n              msg.payload.value = (msg.payload.value === 'true')\n            } else {\n              if (msg.payload.value.indexOf(',') > -1) {\n                msg.payload.value = JSON.parse(msg.payload.value)\n              }\n            }\n          }\n\n          msg.messageId = mbCore.getObjectId()\n          node.bufferMessageList.set(msg.messageId, msg)\n          internalDebugLog('Add Message ' + msg.messageId)\n\n          msg = {\n            topic: msg.topic || node.id,\n            payload: {\n              value: msg.payload.value || msg.value,\n              unitid: msg.payload.unitid,\n              fc: msg.payload.fc,\n              address: msg.payload.address,\n              quantity: msg.payload.quantity,\n              messageId: msg.messageId\n            },\n            _msgid: msg._msgid\n          }\n\n          modbusClient.emit('writeModbus', msg, node.onModbusWriteDone, node.onModbusWriteError)\n        } catch (err) {\n          node.error(err, msg)\n        }\n      } else {\n        node.error(new Error('Payload Not Valid'), msg)\n      }\n\n      if (node.showStatusActivities) {\n        setNodeStatusTo(modbusClient.statlyMachine.getMachineState())\n        verboseLog(msg)\n      }\n    })\n\n    node.onModbusWriteDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        setNodeStatusTo('writing done')\n      }\n      node.send(buildMessage(msg.payload, resp, msg))\n    }\n\n    node.onModbusWriteError = function (err, msg) {\n      internalDebugLog(err.message)\n      mbBasics.setModbusError(node, modbusClient, err, mbCore.getOriginalMessage(node.bufferMessageList, msg) || msg, setNodeStatusTo)\n    }\n\n    node.on('close', function () {\n      setNodeStatusTo('closed')\n    })\n\n    function verboseLog (logMessage) {\n      if (RED.settings.verbose) {\n        internalDebugLog((typeof logMessage === 'string') ? logMessage : JSON.stringify(logMessage))\n      }\n    }\n\n    function buildMessage (values, response, msg) {\n      let origMsg = mbCore.getOriginalMessage(node.bufferMessageList, msg) || msg\n      origMsg.payload = values\n      origMsg.topic = msg.topic\n      origMsg.responseBuffer = response\n      origMsg.input = msg\n\n      let rawMsg = Object.assign({}, origMsg)\n      rawMsg.payload = response\n      rawMsg.values = values\n      delete rawMsg['responseBuffer']\n\n      return [origMsg, rawMsg]\n    }\n\n    function setNodeStatusTo (statusValue) {\n      let statusOptions = mbBasics.setNodeStatusProperties(statusValue, false)\n\n      node.status({\n        fill: statusOptions.fill,\n        shape: statusOptions.shape,\n        text: statusOptions.status\n      })\n    }\n  }\n\n  RED.nodes.registerType('modbus-flex-write', ModbusFlexWrite)\n}\n"]}