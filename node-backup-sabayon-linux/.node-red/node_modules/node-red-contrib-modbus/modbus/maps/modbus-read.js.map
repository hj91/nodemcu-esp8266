{"version":3,"sources":["modbus-read.js"],"names":["module","exports","RED","install","mbBasics","require","mbCore","httpAdmin","internalDebugLog","this","name","ModbusRead","config","nodes","createNode","topic","unitid","quantity","adr","rate","delayOnStart","rateUnit","startDelayTime","parseInt","connection","showErrors","getNode","ioFile","useIOForPayload","node","modbusClient","delayTimerID","setNodeStatusTo","logMessage","settings","verbose","JSON","stringify","statusValue","timeoutOccurred","search","setNodeStatusProperties","showStatusActivities","fill","statusOptions","shape","text","status","get_timeUnit_name","onModbusInit","clearTimeout","setTimeout","startIntervalReading","INPUT_TIMEOUT_MILLISECONDS","timerID","setInterval","modbusPollingRead","calc_rateByUnit","onModbusActive","failureMsg","clearInterval","warn","onModbusClose","reconnectTimeout","onModbusBroken","on","onModbusConnect","client","msg","from","payload","dataType","fc","functionCodeModbus","verboseLog","onModbusReadDone","onModbusReadError","resp","values","response","useIOFile","lastUpdatedAt","mbIOCore","internalDebug","allValueNames","valueNames","responseBuffer","input","origMsg","send","data","sendMessage","err","message","setModbusError","post","auth","needsPermission","req","res","params","id","sendStatus","error","_","toString"],"mappings":"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","file":"../modbus-read.js","sourcesContent":["/**\n Copyright 2016,2017 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2016 - Jason D. Harper, Argonne National Laboratory\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc.\n Copyright 2013, 2016 IBM Corp. (node-red)\n All rights reserved.\n node-red-contrib-modbus\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n/**\n * Modbus Read node.\n * @module NodeRedModbusRead\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  let mbBasics = require('./modbus-basics')\n  let mbCore = require('./core/modbus-core')\n  let mbIOCore = require('./core/modbus-io-core')\n  let internalDebugLog = require('debug')('contribModbus:read')\n\n  function ModbusRead (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.topic = config.topic\n    this.unitid = config.unitid\n\n    this.dataType = config.dataType\n    this.adr = config.adr\n    this.quantity = config.quantity || 1\n\n    this.rate = config.rate\n    this.rateUnit = config.rateUnit\n\n    this.delayOnStart = config.delayOnStart\n    this.startDelayTime = parseInt(config.startDelayTime) || 10\n\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.connection = null\n\n    this.useIOFile = config.useIOFile\n    this.ioFile = RED.nodes.getNode(config.ioFile)\n    this.useIOForPayload = config.useIOForPayload\n\n    let node = this\n    let modbusClient = RED.nodes.getNode(config.server)\n    let delayTimerID = null\n    let timerID = null\n    let timeoutOccurred = false\n    node.INPUT_TIMEOUT_MILLISECONDS = 1000\n\n    setNodeStatusTo('waiting')\n\n    node.onModbusInit = function () {\n      setNodeStatusTo('initialize')\n    }\n\n    node.onModbusConnect = function () {\n      if (node.delayOnStart) {\n        if (!delayTimerID) {\n          delayTimerID = setTimeout(node.startIntervalReading, node.INPUT_TIMEOUT_MILLISECONDS * node.startDelayTime)\n        } else {\n          clearTimeout(delayTimerID)\n          delayTimerID = setTimeout(node.startIntervalReading, node.INPUT_TIMEOUT_MILLISECONDS * node.startDelayTime)\n        }\n      } else {\n        if (delayTimerID) {\n          clearTimeout(delayTimerID)\n        }\n        node.startIntervalReading()\n      }\n\n      setNodeStatusTo('connected')\n    }\n\n    node.startIntervalReading = function () {\n      if (!timerID) {\n        timerID = setInterval(node.modbusPollingRead, mbBasics.calc_rateByUnit(node.rate, node.rateUnit))\n      }\n    }\n\n    node.onModbusActive = function () {\n      setNodeStatusTo('active')\n    }\n\n    node.onModbusError = function (failureMsg) {\n      setNodeStatusTo('failure')\n      if (timerID) {\n        clearInterval(timerID) // clear Timer from events\n      }\n      timerID = null\n      if (node.showErrors) {\n        node.warn(failureMsg)\n      }\n    }\n\n    node.onModbusClose = function () {\n      setNodeStatusTo('closed')\n      if (timerID) {\n        clearInterval(timerID) // clear Timer from events\n      }\n      timerID = null\n    }\n\n    node.onModbusBroken = function () {\n      setNodeStatusTo('reconnecting after ' + modbusClient.reconnectTimeout + ' msec.')\n      if (timerID) {\n        clearInterval(timerID) // clear Timer from events\n      }\n      timerID = null\n    }\n\n    modbusClient.on('mbinit', node.onModbusInit)\n    modbusClient.on('mbconnected', node.onModbusConnect)\n    modbusClient.on('mbactive', node.onModbusActive)\n    modbusClient.on('mberror', node.onModbusError)\n    modbusClient.on('mbbroken', node.onModbusBroken)\n    modbusClient.on('mbclosed', node.onModbusClose)\n\n    node.modbusPollingRead = function () {\n      if (!modbusClient.client) {\n        setNodeStatusTo('waiting')\n        return\n      }\n\n      let msg = {\n        topic: node.topic || 'polling',\n        from: node.name,\n        payload: {\n          unitid: node.unitid,\n          fc: mbCore.functionCodeModbus(node.dataType),\n          address: node.adr,\n          quantity: node.quantity,\n          messageId: mbCore.getObjectId()\n        }\n      }\n\n      if (node.showStatusActivities) {\n        setNodeStatusTo('polling')\n        verboseLog(msg)\n      }\n\n      modbusClient.emit('readModbus', msg, node.onModbusReadDone, node.onModbusReadError)\n    }\n\n    node.onModbusReadDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        setNodeStatusTo('reading done')\n        verboseLog('reading done -> ' + JSON.stringify(msg))\n      }\n\n      sendMessage(resp.data, resp, msg)\n    }\n\n    node.onModbusReadError = function (err, msg) {\n      internalDebugLog(err.message)\n      mbBasics.setModbusError(node, modbusClient, err, msg, setNodeStatusTo)\n    }\n\n    node.on('close', function () {\n      if (timerID) {\n        clearInterval(timerID)\n      }\n      timerID = null\n      setNodeStatusTo('closed')\n    })\n\n    function verboseLog (logMessage) {\n      if (RED.settings.verbose) {\n        internalDebugLog((typeof logMessage === 'string') ? logMessage : JSON.stringify(logMessage))\n      }\n    }\n\n    function sendMessage (values, response, msg) {\n      if (node.useIOFile && node.ioFile.lastUpdatedAt) {\n        mbIOCore.internalDebug('node.adr:' + node.adr + ' node.quantity:' + node.quantity)\n        let allValueNames = mbIOCore.nameValuesFromIOFile(msg, node.ioFile, values, response, node.adr)\n        let valueNames = mbIOCore.filterValueNames(allValueNames, mbCore.functionCodeModbus(node.dataType), node.adr, node.quantity)\n\n        let origMsg = {\n          topic: msg.topic,\n          responseBuffer: response,\n          input: msg\n        }\n\n        if (node.useIOForPayload) {\n          origMsg.payload = valueNames\n          origMsg.values = values\n        } else {\n          origMsg.payload = values\n          origMsg.valueNames = valueNames\n        }\n\n        node.send([\n          origMsg,\n          {\n            payload: response,\n            values: values,\n            input: msg,\n            valueNames: valueNames\n          }])\n      } else {\n        node.send([\n          {\n            payload: values,\n            responseBuffer: response,\n            input: msg\n          },\n          {\n            payload: response,\n            values: values,\n            input: msg\n          }\n        ])\n      }\n    }\n\n    function setNodeStatusTo (statusValue) {\n      if (statusValue === 'polling' && timeoutOccurred) {\n        return\n      }\n\n      let statusOptions = mbBasics.setNodeStatusProperties(statusValue, node.showStatusActivities)\n\n      if (statusValue.search('active') !== -1 || statusValue === 'polling') {\n        timeoutOccurred = false\n        node.status({\n          fill: statusOptions.fill,\n          shape: statusOptions.shape,\n          text: statusOptions.status + getTimeInfo()\n        })\n      } else {\n        node.status({\n          fill: statusOptions.fill,\n          shape: statusOptions.shape,\n          text: statusOptions.status\n        })\n      }\n    }\n\n    function getTimeInfo () {\n      return ' ( ' + node.rate + ' ' + mbBasics.get_timeUnit_name(node.rateUnit) + ' ) '\n    }\n  }\n\n  RED.nodes.registerType('modbus-read', ModbusRead)\n\n  RED.httpAdmin.post('/modbus/read/inject/:id', RED.auth.needsPermission('modbus.inject.write'), function (req, res) {\n    let node = RED.nodes.getNode(req.params.id)\n\n    if (node) {\n      try {\n        node.modbusPollingRead()\n        res.sendStatus(200)\n      } catch (err) {\n        res.sendStatus(500)\n        node.error(RED._('modbusinject.failed', {error: err.toString()}))\n      }\n    } else {\n      res.sendStatus(404)\n    }\n  })\n}\n"]}