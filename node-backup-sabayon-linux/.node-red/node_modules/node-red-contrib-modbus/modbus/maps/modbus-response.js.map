{"version":3,"sources":["modbus-response.js"],"names":["module","exports","RED","install","util","require","mbBasics","nodes","registerType","config","internalDebugLog","this","registerShowMax","node","setNodeStatusTo","statusValue","response","logMessage","statusLog","verbose","JSON","stringify","verboseLog","shapeValue","fillValue","status","fill","shape","text","inspect","length","setNodeStatusResponse","on","msg","inputType","payload","hasOwnProperty","data"],"mappings":"aAeAA,OAAOC,QAAU,SAAUC,GAA3BF,QAAOC,sBAAyBE,UAC9B,IAAAC,EAAAC,QAAA,QAGIC,EAAWD,QAAQ,mBAFvBA,EAAQA,QAAsBF,QAAtBE,CAAR,0BA2FGH,EAFDK,MAAAC,aAAA,kBAvFF,SAAuBC,GACvBP,EAAIQ,MAAAA,WAAmBL,KAAAA,GAEvBM,KAAAC,gBAAyBH,EAAQG,gBAK/B,IAAIC,EAAOF,KAOR,SAAAG,EAAAC,EAAAC,GAHH,IAAqBC,EAIpBX,EAAAY,YAJoBD,EAQN,oBAAsBF,EAVrCD,EAAAA,SAAgBK,SAIZT,EAAwC,iBAAfO,EAA2BA,EAAaG,KAAKC,UAAUJ,KAMhFK,IAAAA,EAAW,MACZC,EAAA,MAED,OAAIC,GACJ,IAAID,cAIAC,EAAY,QAFhBD,EAAQR,OACN,MAEEQ,IAAAA,SACAC,EAAA,QAIAD,EAAa,MAFf,MAEEA,QACAR,GAAA,YAAAA,IAIES,EAAY,OAFhBT,EAAA,eAKEF,EAAAY,OAAA,CAAAC,KAAAF,EAAAG,MAAAJ,EAAAK,KAAAxB,EAAAyB,QAAAb,GAAA,EAAA,QAGJH,SAAKY,EAAOK,GACbjB,EAAAY,OAAA,CAIGC,KAAM,QAFVC,MAASI,MACPlB,KAAKY,sBAAOK,IAvCdhB,EAAgB,eAuCFD,EAAZmB,GAAA,QAAA,SAAAC,GAKD,IAAAC,EAAA,UAUGA,OARCF,EAAGG,QAASC,eAAe,UAC9BF,EAAIA,QAGFA,EAAAA,QAAYE,eAAZ,aACDF,EAAA,WAGCA,GACD,IAAA,OAIOD,EAAIE,QAAQE,KAAKP,OAASjB,EAAKD,gBAFvCmB,EAAAE,EAAAE,QAAAE,KAAAP,QAEIhB,EAAgBuB,SAAZJ,EAA0BpB,SAE7B,MACCC,IAAAA,UACDmB,EAAAE,QAAAL,QAAAG,EAAAE,QAAAL,OAAAjB,EAAAD,gBACDmB,EAAAE,EAAAE,QAAAL,QAEAhB,EAAgBgB,SAAUG,EAAIE,SAE7B,MACCrB,QACDA,EAAA,SAAAM,KAAAC,UAAAY,EAAAE,aAbLtB,EAAAmB,GAAA,QAAA,WAXFlB,EAAA","file":"../modbus-response.js","sourcesContent":["/**\n Copyright 2016,2017 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2016 - Jason D. Harper, Argonne National Laboratory\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc.\n All rights reserved.\n node-red-contrib-modbus\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n/**\n * Modbus Response node.\n * @module NodeRedModbusResponse\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  let util = require('util')\n  let mbBasics = require('./modbus-basics')\n  let internalDebugLog = require('debug')('contribModbus:response')\n\n  function ModbusResponse (config) {\n    RED.nodes.createNode(this, config)\n\n    this.registerShowMax = config.registerShowMax\n\n    let node = this\n\n    setNodeStatusTo('initialized')\n\n    function verboseLog (logMessage) {\n      if (RED.settings.verbose) {\n        internalDebugLog((typeof logMessage === 'string') ? logMessage : JSON.stringify(logMessage))\n      }\n    }\n\n    function setNodeStatusTo (statusValue, response) {\n      if (mbBasics.statusLog) {\n        verboseLog('response status: ' + statusValue)\n      }\n\n      let fillValue = 'red'\n      let shapeValue = 'dot'\n\n      switch (statusValue) {\n        case 'initialized':\n          fillValue = 'green'\n          shapeValue = 'ring'\n          break\n\n        case 'active':\n          fillValue = 'green'\n          shapeValue = 'dot'\n          break\n\n        default:\n          if (!statusValue || statusValue === 'waiting') {\n            fillValue = 'blue'\n            statusValue = 'waiting ...'\n          }\n          break\n      }\n\n      node.status({fill: fillValue, shape: shapeValue, text: util.inspect(response, false, null)})\n    }\n\n    function setNodeStatusResponse (length) {\n      node.status({\n        fill: 'green',\n        shape: 'dot',\n        text: 'active got length: ' + length\n      })\n    }\n\n    node.on('input', function (msg) {\n      let inputType = 'default'\n\n      if (msg.payload.hasOwnProperty('data')) {\n        inputType = 'data'\n      }\n\n      if (msg.payload.hasOwnProperty('address')) {\n        inputType = 'address'\n      }\n\n      switch (inputType) {\n        case 'data':\n          if (msg.payload.data.length > node.registerShowMax) {\n            setNodeStatusResponse(msg.payload.data.length)\n          } else {\n            setNodeStatusTo('active', msg.payload)\n          }\n          break\n        case 'address':\n          if (msg.payload.length && msg.payload.length > node.registerShowMax) {\n            setNodeStatusResponse(msg.payload.length)\n          } else {\n            setNodeStatusTo('active', msg.payload)\n          }\n          break\n        default:\n          setNodeStatusTo('active', JSON.stringify(msg.payload))\n      }\n    })\n\n    node.on('close', function () {\n      setNodeStatusTo('closed')\n    })\n  }\n\n  RED.nodes.registerType('modbus-response', ModbusResponse)\n}\n"]}