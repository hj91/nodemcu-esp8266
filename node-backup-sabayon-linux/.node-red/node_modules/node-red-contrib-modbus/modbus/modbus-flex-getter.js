"use strict";module.exports=function(t){require("source-map-support").install();var i=require("./modbus-basics"),d=require("./core/modbus-core"),u=require("./core/modbus-io-core"),r=require("debug")("contribModbus:flex:getter");t.nodes.registerType("modbus-flex-getter",function(e){t.nodes.createNode(this,e),this.name=e.name,this.showStatusActivities=e.showStatusActivities,this.showErrors=e.showErrors,this.connection=null,this.useIOFile=e.useIOFile,this.ioFile=t.nodes.getNode(e.ioFile),this.useIOForPayload=e.useIOForPayload;var n=this,a=t.nodes.getNode(e.server);function s(e){var o=i.setNodeStatusProperties(e,n.showStatusActivities);n.status({fill:o.fill,shape:o.shape,text:o.status})}n.bufferMessageList=new Map,s("waiting"),n.onModbusInit=function(){s("initialize")},n.onModbusConnect=function(){s("connected")},n.onModbusActive=function(){s("active")},n.onModbusError=function(e){s("failure"),n.showErrors&&n.warn(e)},n.onModbusClose=function(){s("closed")},n.onModbusBroken=function(){s("reconnecting after "+a.reconnectTimeout+" msec.")},a.on("mbinit",n.onModbusInit),a.on("mbconnected",n.onModbusConnect),a.on("mbactive",n.onModbusActive),a.on("mberror",n.onModbusError),a.on("mbbroken",n.onModbusBroken),a.on("mbclosed",n.onModbusClose),n.on("input",function(o){var e;if(a.client)if(o.payload){try{if("string"==typeof o.payload&&(o.payload=JSON.parse(o.payload)),o.messageId=d.getObjectId(),n.bufferMessageList.set(o.messageId,o),r("Add Message "+o.messageId),o.payload.fc=parseInt(o.payload.fc)||3,o.payload.unitid=parseInt(o.payload.unitid),o.payload.address=parseInt(o.payload.address)||0,o.payload.quantity=parseInt(o.payload.quantity)||1,!(Number.isInteger(o.payload.fc)&&1<=o.payload.fc&&o.payload.fc<=4))return void n.error("FC Not Valid",o);if(!(Number.isInteger(o.payload.address)&&0<=o.payload.address&&o.payload.address<=65535))return void n.error("Address Not Valid",o);if(!(Number.isInteger(o.payload.quantity)&&1<=o.payload.quantity&&o.payload.quantity<=65535))return void n.error("Quantity Not Valid",o);o={topic:o.topic||n.id,payload:{value:o.payload.value||o.value,unitid:o.payload.unitid,fc:o.payload.fc,address:o.payload.address,quantity:o.payload.quantity,messageId:o.messageId},_msgid:o._msgid},a.emit("readModbus",o,n.onModbusReadDone,n.onModbusReadError)}catch(e){n.error(e,o)}n.showStatusActivities&&(s(a.statlyMachine.getMachineState()),e=o,t.settings.verbose&&r("string"==typeof e?e:JSON.stringify(e)))}else n.error("Payload Not Valid",o)}),n.onModbusReadDone=function(e,o){n.showStatusActivities&&s("reading done"),n.send(function(e,o,a){var s=d.getOriginalMessage(n.bufferMessageList,a)||a;s.payload=e,s.topic=a.topic,s.responseBuffer=o,s.input=a;var t=Object.assign({},s);if(t.payload=o,t.values=e,delete t.responseBuffer,n.useIOFile&&n.ioFile.lastUpdatedAt){var i=u.nameValuesFromIOFile(a,n.ioFile,e,o,parseInt(a.payload.address)||0),r=u.filterValueNames(i,parseInt(a.payload.fc)||3,parseInt(a.payload.address)||0,parseInt(a.payload.quantity)||1);return n.useIOForPayload?(s.payload=r,s.values=e):(s.payload=e,s.valueNames=r),t.valueNames=r,[s,t]}return[s,t]}(e.data,e,o))},n.onModbusReadError=function(e,o){r(e.message),i.setModbusError(n,a,e,d.getOriginalMessage(n.bufferMessageList,o)||o,s)},n.on("close",function(){s("closed")})})};
//# sourceMappingURL=maps/modbus-flex-getter.js.map
