"use strict";module.exports=function(c){require("source-map-support").install();var d=require("modbus-serial"),a=require("./modbus-basics"),f=require("debug")("contribModbus:flex:server");c.nodes.registerType("modbus-flex-server",function(e){c.nodes.createNode(this,e);var r=require("vm2"),s=r.VM,t=r.VMScript;this.name=e.name,this.logEnabled=e.logEnabled,this.serverAddress=e.serverAddress||"0.0.0.0",this.serverPort=parseInt(e.serverPort),this.responseDelay=parseInt(e.responseDelay),this.delayUnit=e.delayUnit,this.unitId=e.unitId,this.minAddress=e.minAddress,this.splitAddress=e.splitAddress,this.funcGetCoil=new t(e.funcGetCoil).compile(),this.funcGetInputRegister=new t(e.funcGetInputRegister).compile(),this.funcGetHoldingRegister=new t(e.funcGetHoldingRegister).compile(),this.funcSetCoil=new t(e.funcSetCoil).compile(),this.funcSetRegister=new t(e.funcSetRegister).compile();var n=this;function i(e){c.settings.verbose&&n.warn(n.name?n.name+": "+e:"Modbus response: "+e)}function o(e){c.settings.verbose&&f("string"==typeof e?e:JSON.stringify(e))}function u(e){a.statusLog&&o("server status: "+e);var r="red",s="dot";switch(e){case"initialized":r="green",s="ring";break;case"active":r="green",s="dot";break;default:e&&"waiting"!==e||(r="blue",e="waiting ...")}n.status({fill:r,shape:s,text:e})}n.bufferFactor=8,n.coilsBufferSize=parseInt(e.coilsBufferSize*n.bufferFactor),n.registersBufferSize=parseInt(e.registersBufferSize*n.bufferFactor),n.coils=Buffer.alloc(n.coilsBufferSize,0),n.registers=Buffer.alloc(n.registersBufferSize,0),n.server=null,u("initialized"),n.vector={};var l=new s({sandbox:{node:n}});l.run("node.vector.getCoil = "+e.funcGetCoil),l.run("node.vector.getInputRegister = "+e.funcGetInputRegister),l.run("node.vector.getHoldingRegister = "+e.funcGetHoldingRegister),l.run("node.vector.setCoil = "+e.funcSetCoil),l.run("node.vector.setRegister = "+e.funcSetRegister),n.startServer=function(){o("starting modbus flex server");try{f("ModbusTCP flex server listening on modbus://"+n.serverAddress+":"+n.serverPort),null===n.server&&(n.server=new d.ServerTCP(n.vector,{host:n.serverAddress,port:n.serverPort,debug:n.logEnabled,unitID:n.unitId}),n.server.on("socketError",function(e){i(e),u("error"),f(e.message),n.server.close(function(){o("closed modbus flex server by socket error and restart now"),n.startServer()})}))}catch(e){i(e),u("error")}null!=n.server?(o("modbus flex server started"),u("active")):(i("modbus flex server isn't ready"),u("error"))},n.startServer(),n.on("input",function(e){var r,s,t,i;o("Input:"+e),n.send((r=e,s=n.registers.slice((n.splitAddress+1)*n.bufferFactor),t=n.coils,i=n.registers.slice(0,n.splitAddress*n.bufferFactor),[{type:"holding",message:r,payload:s},{type:"coils",message:r,payload:t},{type:"input",message:r,payload:i}]))}),n.on("close",function(){u("closed"),n.server._server&&n.server._server.close(),n.server=null})})};
//# sourceMappingURL=maps/modbus-flex-server.js.map
