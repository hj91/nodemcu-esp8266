"use strict";module.exports=function(i){require("source-map-support").install();var r=require("debug")("contribModbus:queue");i.nodes.registerType("modbus-queue-info",function(e){i.nodes.createNode(this,e),this.name=e.name,this.topic=e.topic,this.unitid=parseInt(e.unitid),this.lowLowLevel=parseInt(e.lowLowLevel),this.lowLevel=parseInt(e.lowLevel),this.highLevel=parseInt(e.highLevel),this.highHighLevel=parseInt(e.highHighLevel),this.errorOnHighLevel=e.errorOnHighLevel;var o=this,h=i.nodes.getNode(e.server);function a(e){o.status({fill:"green",shape:"ring",text:e})}o.queueReadInterval=null,i.settings.verbose&&(r.enabled=!0),a("waiting"),o.resetStates=function(){o.lowLowLevelReached=!0,o.lowLevelReached=!1,o.highLevelReached=!1,o.highHighLevelReached=!1},o.resetStates(),o.readFromQueue=function(){var e=o.unitid||1;if(h.bufferCommands){(e<0||255<e)&&(e=1);var i=h.bufferCommandList.get(e).length;if((!i||!o.lowLowLevelReached&&i<o.lowLowLevel)&&o.resetStates(),!o.lowLevelReached&&i>o.lowLowLevel&&i<o.lowLevel){o.lowLevelReached=!0;var t={payload:Date.now(),topic:o.topic,state:"low level reached",unitid:e,modbusClientName:h.name,items:i};r(t),o.send(t)}if(!o.highLevelReached&&i>o.lowLevel&&i>o.highLevel){o.highLevelReached=!0;var n={payload:Date.now(),topic:o.topic,state:"high level reached",unitid:e,modbusClientName:h.name,highLevel:o.highLevel,items:i};o.errorOnHighLevel?o.error(new Error("Queue High Level Reached"),n):o.warn(n),o.send(n)}if(!o.highHighLevelReached&&i>o.highLevel&&i>o.highHighLevel){o.highHighLevelReached=!0;var l={payload:Date.now(),topic:o.topic,state:"high high level reached",unitid:e,modbusClientName:h.name,highLevel:o.highLevel,highHighLevel:o.highHighLevel,items:i};o.error(new Error("Queue High High Level Reached"),l),o.send(l)}var u="blue";o.lowLevelReached&&(u="green"),o.highLevelReached&&(u=o.errorOnHighLevel?"red":"yellow"),o.highHighLevelReached&&(u="red"),o.status({fill:u,shape:"ring",text:"active unit "+e+" queue items: "+i})}else a("active unit "+e+" without queue")},o.onModbusInit=function(){o.readFromQueue()},o.onModbusActive=function(){o.readFromQueue()},o.onModbusQueue=function(){o.readFromQueue()},h.on("mbinit",o.onModbusInit),h.on("mbqueue",o.onModbusQueue),h.on("mbactive",o.onModbusActive),o.queueReadInterval=setInterval(o.readFromQueue,1e3),o.on("input",function(e){if(e.queueEnabled=h.bufferCommands,Number.isInteger(o.unitid)?(e.queue=h.bufferCommandList.get(o.unitid),e.unitid=o.unitid):e.queues=h.bufferCommandList,e&&e.resetQueue&&h.bufferCommands){h.initQueue(),h.warn("Init Queue By External Node"),o.resetStates(),o.status({fill:"blue",shape:"ring",text:"active empty unit queue"});var i={payload:Date.now(),state:"queue reset done",unitid:e.unitid,modbusClientName:h.name,lowlowLevel:o.lowlowLevel,lowLevel:o.lowLevel,highLevel:o.highLevel,highHighLevel:o.highHighLevel};o.send(i)}}),o.on("close",function(){a("closed"),o.queueReadInterval&&clearInterval(o.queueReadInterval),o.queueReadInterval=null})})};
//# sourceMappingURL=maps/modbus-queue-info.js.map
