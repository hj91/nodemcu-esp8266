declare module "github" {
  declare type Header = string;

  declare type EmptyParams = {};

  declare type Options = {
    timeout?: number,
    host?: string,
    pathPrefix?: string,
    protocol?: string,
    port?: number,
    proxy?: string,
    ca?: string,
    headers?: { [header: Header]: any },
    rejectUnauthorized?: boolean,
    family?: number
  };

  declare type AuthBasic = {
    type: "basic",
    username: string,
    password: string
  };

  declare type AuthOAuthToken = {
    type: "oauth",
    token: string
  };

  declare type AuthOAuthSecret = {
    type: "oauth",
    key: string,
    secret: string
  };

  declare type AuthUserToken = {
    type: "token",
    token: string
  };

  declare type AuthJWT = {
    type: "integration",
    token: string
  };

  /* @deprecated Use "app" instead of "integration */
  declare type AuthDeprecatedJWT = {
    type: "integration",
    token: string
  };

  declare type Auth =
    | AuthBasic
    | AuthOAuthToken
    | AuthOAuthSecret
    | AuthUserToken
    | AuthJWT
    | AuthDeprecatedJWT;

  declare type Link =
    | { link: string }
    | { headers: { link: string } }
    | string
    | any;

  declare type Callback = (error: ?Error, result: ?any) => any;

  declare type ActivityCheckNotificationThreadSubscriptionParams = {
    thread_id: number
  };
  declare type ActivityCheckStarringRepoParams = {
    owner: string,
    repo: string
  };
  declare type ActivityDeleteNotificationThreadSubscriptionParams = {
    thread_id: number
  };
  declare type ActivityGetEventsParams = {
    per_page?: number,
    page?: number
  };
  declare type ActivityGetEventsForOrgParams = {
    org: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityGetEventsForRepoParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityGetEventsForRepoNetworkParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityGetEventsForUserParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityGetEventsForUserOrgParams = {
    username: string,
    org: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityGetEventsForUserPublicParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityGetEventsReceivedParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityGetEventsReceivedPublicParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityGetNotificationThreadParams = {
    thread_id: number
  };
  declare type ActivityGetNotificationsParams = {
    all?: boolean,
    participating?: boolean,
    since?: string,
    before?: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityGetNotificationsForUserParams = {
    owner: string,
    repo: string,
    all?: boolean,
    participating?: boolean,
    since?: string,
    before?: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityGetRepoSubscriptionParams = {
    owner: string,
    repo: string
  };
  declare type ActivityGetStargazersForRepoParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityGetStarredReposParams = {
    sort?: "created" | "updated",
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type ActivityGetStarredReposForUserParams = {
    username: string,
    sort?: "created" | "updated",
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type ActivityGetWatchedReposParams = {
    per_page?: number,
    page?: number
  };
  declare type ActivityGetWatchedReposForUserParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityGetWatchersForRepoParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ActivityMarkNotificationThreadAsReadParams = {
    thread_id: number
  };
  declare type ActivityMarkNotificationsAsReadParams = {
    last_read_at?: string
  };
  declare type ActivityMarkNotificationsAsReadForRepoParams = {
    owner: string,
    repo: string,
    last_read_at?: string
  };
  declare type ActivitySetNotificationThreadSubscriptionParams = {
    thread_id: number,
    ignored?: boolean
  };
  declare type ActivitySetRepoSubscriptionParams = {
    owner: string,
    repo: string,
    subscribed?: boolean,
    ignored?: boolean
  };
  declare type ActivityStarRepoParams = {
    owner: string,
    repo: string
  };
  declare type ActivityUnstarRepoParams = {
    owner: string,
    repo: string
  };
  declare type ActivityUnwatchRepoParams = {
    owner: string,
    repo: string
  };
  declare type AppsAddRepoToInstallationParams = {
    installation_id: number,
    repository_id: number
  };
  declare type AppsCheckMarketplaceListingAccountParams = {
    account_id: number,
    per_page?: number,
    page?: number
  };
  declare type AppsCheckMarketplaceListingStubbedAccountParams = {
    account_id: number,
    per_page?: number,
    page?: number
  };
  declare type AppsCreateFromManifestParams = {
    code: string
  };
  declare type AppsCreateInstallationTokenParams = {
    installation_id: number
  };
  declare type AppsFindOrgInstallationParams = {
    org: string
  };
  declare type AppsFindRepoInstallationParams = {
    owner: string,
    repo: string
  };
  declare type AppsFindUserInstallationParams = {
    username: string
  };
  declare type AppsGetForSlugParams = {
    app_slug: string
  };
  declare type AppsGetInstallationParams = {
    installation_id: number
  };
  declare type AppsGetInstallationRepositoriesParams = {
    per_page?: number,
    page?: number
  };
  declare type AppsGetInstallationsParams = {
    per_page?: number,
    page?: number
  };
  declare type AppsGetMarketplaceListingPlanAccountsParams = {
    plan_id: number,
    sort?: "created" | "updated",
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type AppsGetMarketplaceListingPlansParams = {
    per_page?: number,
    page?: number
  };
  declare type AppsGetMarketplaceListingStubbedPlanAccountsParams = {
    plan_id: number,
    sort?: "created" | "updated",
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type AppsGetMarketplaceListingStubbedPlansParams = {
    per_page?: number,
    page?: number
  };
  declare type AppsRemoveRepoFromInstallationParams = {
    installation_id: number,
    repository_id: number
  };
  declare type AuthorizationCheckParams = {
    client_id: string,
    access_token: string
  };
  declare type AuthorizationCreateParams = {
    scopes?: string[],
    note: string,
    note_url?: string,
    client_id?: string,
    client_secret?: string,
    fingerprint?: string
  };
  declare type AuthorizationDeleteParams = {
    authorization_id: number
  };
  declare type AuthorizationDeleteGrantParams = {
    grant_id: number
  };
  declare type AuthorizationGetParams = {
    authorization_id: number
  };
  declare type AuthorizationGetAllParams = {
    per_page?: number,
    page?: number
  };
  declare type AuthorizationGetGrantParams = {
    grant_id: number
  };
  declare type AuthorizationGetGrantsParams = {
    per_page?: number,
    page?: number
  };
  declare type AuthorizationGetOrCreateAuthorizationForAppParams = {
    client_id: string,
    client_secret: string,
    scopes?: string[],
    note?: string,
    note_url?: string,
    fingerprint?: string
  };
  declare type AuthorizationGetOrCreateAuthorizationForAppAndFingerprintParams = {
    client_id: string,
    fingerprint: string,
    client_secret: string,
    scopes?: string[],
    note?: string,
    note_url?: string
  };
  declare type AuthorizationResetParams = {
    client_id: string,
    access_token: string
  };
  declare type AuthorizationRevokeParams = {
    client_id: string,
    access_token: string
  };
  declare type AuthorizationRevokeGrantParams = {
    client_id: string,
    access_token: string
  };
  declare type AuthorizationUpdateParams = {
    authorization_id: number,
    scopes?: string[],
    add_scopes?: string[],
    remove_scopes?: string[],
    note?: string,
    note_url?: string,
    fingerprint?: string
  };
  declare type ChecksCreateParams = {
    owner: string,
    repo: string,
    name: string,
    head_sha: string,
    details_url?: string,
    external_id?: string,
    status?: "queued" | "in_progress" | "completed",
    started_at?: string,
    conclusion?:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "details_url"
      | "conclusion"
      | "status"
      | "completed",
    completed_at?: string,
    output?: ChecksCreateParamsOutput,
    actions?: ChecksCreateParamsActions[]
  };
  declare type ChecksCreateSuiteParams = {
    owner: string,
    repo: string,
    head_sha: string
  };
  declare type ChecksGetParams = {
    owner: string,
    repo: string,
    check_run_id: number
  };
  declare type ChecksGetSuiteParams = {
    owner: string,
    repo: string,
    check_suite_id: number
  };
  declare type ChecksListAnnotationsParams = {
    owner: string,
    repo: string,
    check_run_id: number,
    per_page?: number,
    page?: number
  };
  declare type ChecksListForRefParams = {
    owner: string,
    repo: string,
    ref: string,
    check_name?: string,
    status?: "queued" | "in_progress" | "completed",
    filter?: "latest" | "all",
    per_page?: number,
    page?: number
  };
  declare type ChecksListForSuiteParams = {
    owner: string,
    repo: string,
    check_suite_id: number,
    check_name?: string,
    status?: "queued" | "in_progress" | "completed",
    filter?: "latest" | "all",
    per_page?: number,
    page?: number
  };
  declare type ChecksListSuitesForRefParams = {
    owner: string,
    repo: string,
    ref: string,
    app_id?: number,
    check_name?: string,
    per_page?: number,
    page?: number
  };
  declare type ChecksRerequestSuiteParams = {
    owner: string,
    repo: string,
    check_suite_id: number
  };
  declare type ChecksSetSuitesPreferencesParams = {
    owner: string,
    repo: string,
    auto_trigger_checks?: ChecksSetSuitesPreferencesParamsAutoTriggerChecks[]
  };
  declare type ChecksUpdateParams = {
    owner: string,
    repo: string,
    check_run_id: number,
    name?: string,
    details_url?: string,
    external_id?: string,
    started_at?: string,
    status?: "queued" | "in_progress" | "completed",
    conclusion?:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "conclusion"
      | "status"
      | "completed",
    completed_at?: string,
    output?: ChecksUpdateParamsOutput,
    actions?: ChecksUpdateParamsActions[]
  };
  declare type GistsCheckStarParams = {
    gist_id: string
  };
  declare type GistsCreateParams = {
    files: GistsCreateParamsFiles,
    description?: string,
    public?: boolean
  };
  declare type GistsCreateCommentParams = {
    gist_id: string,
    body: string
  };
  declare type GistsDeleteParams = {
    gist_id: string
  };
  declare type GistsDeleteCommentParams = {
    gist_id: string,
    comment_id: number
  };
  declare type GistsEditParams = {
    gist_id: string,
    description?: string,
    files?: GistsEditParamsFiles
  };
  declare type GistsEditCommentParams = {
    gist_id: string,
    comment_id: number,
    body: string
  };
  declare type GistsForkParams = {
    gist_id: string
  };
  declare type GistsGetParams = {
    gist_id: string
  };
  declare type GistsGetAllParams = {
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type GistsGetCommentParams = {
    gist_id: string,
    comment_id: number
  };
  declare type GistsGetCommentsParams = {
    gist_id: string,
    per_page?: number,
    page?: number
  };
  declare type GistsGetCommitsParams = {
    gist_id: string,
    per_page?: number,
    page?: number
  };
  declare type GistsGetForUserParams = {
    username: string,
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type GistsGetForksParams = {
    gist_id: string,
    per_page?: number,
    page?: number
  };
  declare type GistsGetPublicParams = {
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type GistsGetRevisionParams = {
    gist_id: string,
    sha: string
  };
  declare type GistsGetStarredParams = {
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type GistsStarParams = {
    gist_id: string
  };
  declare type GistsUnstarParams = {
    gist_id: string
  };
  declare type GitdataCreateBlobParams = {
    owner: string,
    repo: string,
    content: string,
    encoding?: string
  };
  declare type GitdataCreateCommitParams = {
    owner: string,
    repo: string,
    message: string,
    tree: string,
    parents: string[],
    committer?: GitdataCreateCommitParamsCommitter,
    author?: GitdataCreateCommitParamsAuthor
  };
  declare type GitdataCreateReferenceParams = {
    owner: string,
    repo: string,
    ref: string,
    sha: string
  };
  declare type GitdataCreateTagParams = {
    owner: string,
    repo: string,
    tag: string,
    message: string,
    object: string,
    type: "commit" | "tree" | "blob",
    tagger?: GitdataCreateTagParamsTagger
  };
  declare type GitdataCreateTreeParams = {
    owner: string,
    repo: string,
    tree: GitdataCreateTreeParamsTree[],
    base_tree?: string
  };
  declare type GitdataDeleteReferenceParams = {
    owner: string,
    repo: string,
    ref: string
  };
  declare type GitdataGetBlobParams = {
    owner: string,
    repo: string,
    file_sha: string
  };
  declare type GitdataGetCommitParams = {
    owner: string,
    repo: string,
    commit_sha: string
  };
  declare type GitdataGetReferenceParams = {
    owner: string,
    repo: string,
    ref: string
  };
  declare type GitdataGetTagParams = {
    owner: string,
    repo: string,
    tag_sha: string
  };
  declare type GitdataGetTreeParams = {
    owner: string,
    repo: string,
    tree_sha: string,
    recursive?: 1
  };
  declare type GitdataUpdateReferenceParams = {
    owner: string,
    repo: string,
    ref: string,
    sha: string,
    force?: boolean
  };
  declare type IssuesAddAssigneesToIssueParams = {
    owner: string,
    repo: string,
    number: number,
    assignees?: string[]
  };
  declare type IssuesAddLabelsParams = {
    owner: string,
    repo: string,
    number: number,
    labels: string[]
  };
  declare type IssuesCheckAssigneeParams = {
    owner: string,
    repo: string,
    assignee: string
  };
  declare type IssuesCreateParams = {
    owner: string,
    repo: string,
    title: string,
    body?: string,
    assignee?: string,
    milestone?: number,
    labels?: string[],
    assignees?: string[]
  };
  declare type IssuesCreateCommentParams = {
    owner: string,
    repo: string,
    number: number,
    body: string
  };
  declare type IssuesCreateLabelParams = {
    owner: string,
    repo: string,
    name: string,
    color: string,
    description?: string
  };
  declare type IssuesCreateMilestoneParams = {
    owner: string,
    repo: string,
    title: string,
    state?: "open" | "closed",
    description?: string,
    due_on?: string
  };
  declare type IssuesDeleteCommentParams = {
    owner: string,
    repo: string,
    comment_id: number
  };
  declare type IssuesDeleteLabelParams = {
    owner: string,
    repo: string,
    name: string
  };
  declare type IssuesDeleteMilestoneParams = {
    owner: string,
    repo: string,
    number: number
  };
  declare type IssuesEditParams = {
    owner: string,
    repo: string,
    number: number,
    title?: string,
    body?: string,
    assignee?: string,
    state?: "open" | "closed",
    milestone?: number,
    labels?: string[],
    assignees?: string[]
  };
  declare type IssuesEditCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    body: string
  };
  declare type IssuesGetParams = {
    owner: string,
    repo: string,
    number: number
  };
  declare type IssuesGetAllParams = {
    filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all",
    state?: "open" | "closed" | "all",
    labels?: string,
    sort?: "created" | "updated" | "comments",
    direction?: "asc" | "desc",
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type IssuesGetAssigneesParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type IssuesGetCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    per_page?: number,
    page?: number
  };
  declare type IssuesGetCommentsParams = {
    owner: string,
    repo: string,
    number: number,
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type IssuesGetCommentsForRepoParams = {
    owner: string,
    repo: string,
    sort?: "created" | "updated",
    direction?: "asc" | "desc",
    since?: string
  };
  declare type IssuesGetEventParams = {
    owner: string,
    repo: string,
    event_id: number
  };
  declare type IssuesGetEventsParams = {
    owner: string,
    repo: string,
    number: number,
    per_page?: number,
    page?: number
  };
  declare type IssuesGetEventsForRepoParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type IssuesGetEventsTimelineParams = {
    owner: string,
    repo: string,
    number: number,
    per_page?: number,
    page?: number
  };
  declare type IssuesGetForOrgParams = {
    org: string,
    filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all",
    state?: "open" | "closed" | "all",
    labels?: string,
    sort?: "created" | "updated" | "comments",
    direction?: "asc" | "desc",
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type IssuesGetForRepoParams = {
    owner: string,
    repo: string,
    milestone?: string,
    state?: "open" | "closed" | "all",
    assignee?: string,
    creator?: string,
    mentioned?: string,
    labels?: string,
    sort?: "created" | "updated" | "comments",
    direction?: "asc" | "desc",
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type IssuesGetForUserParams = {
    filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all",
    state?: "open" | "closed" | "all",
    labels?: string,
    sort?: "created" | "updated" | "comments",
    direction?: "asc" | "desc",
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type IssuesGetIssueLabelsParams = {
    owner: string,
    repo: string,
    number: number,
    per_page?: number,
    page?: number
  };
  declare type IssuesGetLabelParams = {
    owner: string,
    repo: string,
    name: string
  };
  declare type IssuesGetLabelsParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type IssuesGetMilestoneParams = {
    owner: string,
    repo: string,
    number: number
  };
  declare type IssuesGetMilestoneLabelsParams = {
    owner: string,
    repo: string,
    number: number,
    per_page?: number,
    page?: number
  };
  declare type IssuesGetMilestonesParams = {
    owner: string,
    repo: string,
    state?: "open" | "closed" | "all",
    sort?: "due_on" | "completeness",
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type IssuesLockParams = {
    owner: string,
    repo: string,
    number: number,
    lock_reason?: "off-topic" | "too heated" | "resolved" | "spam"
  };
  declare type IssuesRemoveAllLabelsParams = {
    owner: string,
    repo: string,
    number: number
  };
  declare type IssuesRemoveAssigneesFromIssueParams = {
    owner: string,
    repo: string,
    number: number,
    assignees?: string[]
  };
  declare type IssuesRemoveLabelParams = {
    owner: string,
    repo: string,
    number: number,
    name: string
  };
  declare type IssuesReplaceAllLabelsParams = {
    owner: string,
    repo: string,
    number: number,
    labels: string[]
  };
  declare type IssuesUnlockParams = {
    owner: string,
    repo: string,
    number: number
  };
  declare type IssuesUpdateLabelParams = {
    owner: string,
    repo: string,
    current_name: string,
    name?: string,
    color?: string,
    description?: string
  };
  declare type IssuesUpdateMilestoneParams = {
    owner: string,
    repo: string,
    number: number,
    title?: string,
    state?: "open" | "closed",
    description?: string,
    due_on?: string
  };
  declare type MigrationsCancelImportParams = {
    owner: string,
    repo: string
  };
  declare type MigrationsDeleteArchiveForAuthenticatedUserParams = {
    migration_id: number
  };
  declare type MigrationsDeleteMigrationArchiveParams = {
    org: string,
    migration_id: number
  };
  declare type MigrationsGetArchiveForAuthenticatedUserParams = {
    migration_id: number
  };
  declare type MigrationsGetImportCommitAuthorsParams = {
    owner: string,
    repo: string,
    since?: string
  };
  declare type MigrationsGetImportProgressParams = {
    owner: string,
    repo: string
  };
  declare type MigrationsGetLargeImportFilesParams = {
    owner: string,
    repo: string
  };
  declare type MigrationsGetMigrationArchiveLinkParams = {
    org: string,
    migration_id: number
  };
  declare type MigrationsGetMigrationStatusParams = {
    org: string,
    migration_id: number
  };
  declare type MigrationsGetMigrationsParams = {
    org: string,
    per_page?: number,
    page?: number
  };
  declare type MigrationsGetStatusForAuthenticatedUserParams = {
    migration_id: number
  };
  declare type MigrationsListForAuthenticatedUserParams = {
    per_page?: number,
    page?: number
  };
  declare type MigrationsMapImportCommitAuthorParams = {
    owner: string,
    repo: string,
    author_id: number,
    email?: string,
    name?: string
  };
  declare type MigrationsSetImportLfsPreferenceParams = {
    owner: string,
    repo: string,
    use_lfs: "opt_in" | "opt_out"
  };
  declare type MigrationsStartForAuthenticatedUserParams = {
    repositories: string[],
    lock_repositories?: boolean,
    exclude_attachments?: boolean
  };
  declare type MigrationsStartImportParams = {
    owner: string,
    repo: string,
    vcs_url: string,
    vcs?: "subversion" | "git" | "mercurial" | "tfvc",
    vcs_username?: string,
    vcs_password?: string,
    tfvc_project?: string
  };
  declare type MigrationsStartMigrationParams = {
    org: string,
    repositories: string[],
    lock_repositories?: boolean,
    exclude_attachments?: boolean
  };
  declare type MigrationsUnlockRepoForAuthenticatedUserParams = {
    migration_id: number,
    repo_name: string
  };
  declare type MigrationsUnlockRepoLockedForMigrationParams = {
    org: string,
    migration_id: number,
    repo_name: string
  };
  declare type MigrationsUpdateImportParams = {
    owner: string,
    repo: string,
    vcs_username?: string,
    vcs_password?: string
  };
  declare type MiscGetCodeOfConductParams = {
    key: string
  };
  declare type MiscGetGitignoreTemplateParams = {
    name: string
  };
  declare type MiscGetLicenseParams = {
    license: string
  };
  declare type MiscGetRepoCodeOfConductParams = {
    owner: string,
    repo: string
  };
  declare type MiscGetRepoLicenseParams = {
    owner: string,
    repo: string
  };
  declare type MiscRenderMarkdownParams = {
    text: string,
    mode?: "markdown" | "gfm",
    context?: string
  };
  declare type MiscRenderMarkdownRawParams = {
    data: string
  };
  declare type OrgsAddOrgMembershipParams = {
    org: string,
    username: string,
    role?: "admin" | "member"
  };
  declare type OrgsAddTeamMembershipParams = {
    team_id: number,
    username: string,
    role?: "member" | "maintainer"
  };
  declare type OrgsAddTeamRepoParams = {
    team_id: number,
    owner: string,
    repo: string,
    permission?: "pull" | "push" | "admin"
  };
  declare type OrgsBlockUserParams = {
    org: string,
    username: string
  };
  declare type OrgsCheckBlockedUserParams = {
    org: string,
    username: string
  };
  declare type OrgsCheckMembershipParams = {
    org: string,
    username: string
  };
  declare type OrgsCheckPublicMembershipParams = {
    org: string,
    username: string
  };
  declare type OrgsCheckTeamRepoParams = {
    team_id: number,
    owner: string,
    repo: string
  };
  declare type OrgsConcealMembershipParams = {
    org: string,
    username: string
  };
  declare type OrgsConvertMemberToOutsideCollaboratorParams = {
    org: string,
    username: string
  };
  declare type OrgsCreateHookParams = {
    org: string,
    name: string,
    config: OrgsCreateHookParamsConfig,
    events?: string[],
    active?: boolean
  };
  declare type OrgsCreateInvitationParams = {
    org: string,
    invitee_id?: number,
    email?: string,
    role?: "admin" | "direct_member" | "billing_manager",
    team_ids?: number[]
  };
  declare type OrgsCreateTeamParams = {
    org: string,
    name: string,
    description?: string,
    maintainers?: string[],
    repo_names?: string[],
    privacy?: "secret" | "closed",
    permission?: "pull" | "push" | "admin",
    parent_team_id?: number
  };
  declare type OrgsDeleteHookParams = {
    org: string,
    hook_id: number
  };
  declare type OrgsDeleteTeamParams = {
    team_id: number
  };
  declare type OrgsDeleteTeamRepoParams = {
    team_id: number,
    owner: string,
    repo: string
  };
  declare type OrgsEditHookParams = {
    org: string,
    hook_id: number,
    config?: OrgsEditHookParamsConfig,
    events?: string[],
    active?: boolean
  };
  declare type OrgsEditTeamParams = {
    team_id: number,
    name: string,
    description?: string,
    privacy?: string,
    permission?: "pull" | "push" | "admin",
    parent_team_id?: number
  };
  declare type OrgsGetParams = {
    org: string
  };
  declare type OrgsGetAllParams = {
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type OrgsGetBlockedUsersParams = {
    org: string
  };
  declare type OrgsGetChildTeamsParams = {
    team_id: number,
    per_page?: number,
    page?: number
  };
  declare type OrgsGetForUserParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type OrgsGetHookParams = {
    org: string,
    hook_id: number
  };
  declare type OrgsGetHooksParams = {
    org: string,
    per_page?: number,
    page?: number
  };
  declare type OrgsGetInvitationTeamsParams = {
    org: string,
    invitation_id: number,
    per_page?: number,
    page?: number
  };
  declare type OrgsGetMembersParams = {
    org: string,
    filter?: "2fa_disabled" | "all",
    role?: "all" | "admin" | "member",
    per_page?: number,
    page?: number
  };
  declare type OrgsGetOrgMembershipParams = {
    org: string,
    username: string
  };
  declare type OrgsGetOutsideCollaboratorsParams = {
    org: string,
    filter?: "2fa_disabled" | "all",
    per_page?: number,
    page?: number
  };
  declare type OrgsGetPendingOrgInvitesParams = {
    org: string,
    per_page?: number,
    page?: number
  };
  declare type OrgsGetPendingTeamInvitesParams = {
    team_id: number,
    per_page?: number,
    page?: number
  };
  declare type OrgsGetPublicMembersParams = {
    org: string,
    per_page?: number,
    page?: number
  };
  declare type OrgsGetTeamParams = {
    team_id: number
  };
  declare type OrgsGetTeamMembersParams = {
    team_id: number,
    role?: "member" | "maintainer" | "all",
    per_page?: number,
    page?: number
  };
  declare type OrgsGetTeamMembershipParams = {
    team_id: number,
    username: string
  };
  declare type OrgsGetTeamReposParams = {
    team_id: number,
    per_page?: number,
    page?: number
  };
  declare type OrgsGetTeamsParams = {
    org: string,
    per_page?: number,
    page?: number
  };
  declare type OrgsPingHookParams = {
    org: string,
    hook_id: number
  };
  declare type OrgsPublicizeMembershipParams = {
    org: string,
    username: string
  };
  declare type OrgsRemoveMemberParams = {
    org: string,
    username: string
  };
  declare type OrgsRemoveOrgMembershipParams = {
    org: string,
    username: string
  };
  declare type OrgsRemoveOutsideCollaboratorParams = {
    org: string,
    username: string
  };
  declare type OrgsRemoveTeamMembershipParams = {
    team_id: number,
    username: string
  };
  declare type OrgsUnblockUserParams = {
    org: string,
    username: string
  };
  declare type OrgsUpdateParams = {
    org: string,
    billing_email?: string,
    company?: string,
    email?: string,
    location?: string,
    name?: string,
    description?: string,
    has_organization_projects?: boolean,
    has_repository_projects?: boolean,
    default_repository_permission?: "read" | "write" | "admin" | "none",
    members_can_create_repositories?: boolean
  };
  declare type ProjectsAddCollaboratorParams = {
    project_id: number,
    username: string,
    permission?: "read" | "write" | "admin"
  };
  declare type ProjectsCreateOrgProjectParams = {
    org: string,
    name: string,
    body?: string,
    per_page?: number,
    page?: number
  };
  declare type ProjectsCreateProjectCardParams = {
    column_id: number,
    note?: string,
    content_id?: number,
    content_type?: string
  };
  declare type ProjectsCreateProjectColumnParams = {
    project_id: number,
    name: string
  };
  declare type ProjectsCreateRepoProjectParams = {
    owner: string,
    repo: string,
    name: string,
    body?: string,
    per_page?: number,
    page?: number
  };
  declare type ProjectsDeleteProjectParams = {
    project_id: number
  };
  declare type ProjectsDeleteProjectCardParams = {
    card_id: number
  };
  declare type ProjectsDeleteProjectColumnParams = {
    column_id: number
  };
  declare type ProjectsGetCollaboratorsParams = {
    project_id: number,
    affiliation?: "outside" | "direct" | "all",
    per_page?: number,
    page?: number
  };
  declare type ProjectsGetOrgProjectsParams = {
    org: string,
    state?: "open" | "closed" | "all",
    per_page?: number,
    page?: number
  };
  declare type ProjectsGetProjectParams = {
    project_id: number,
    per_page?: number,
    page?: number
  };
  declare type ProjectsGetProjectCardParams = {
    card_id: number
  };
  declare type ProjectsGetProjectCardsParams = {
    column_id: number,
    archived_state?: "all" | "archived" | "not_archived",
    per_page?: number,
    page?: number
  };
  declare type ProjectsGetProjectColumnParams = {
    column_id: number
  };
  declare type ProjectsGetProjectColumnsParams = {
    project_id: number,
    per_page?: number,
    page?: number
  };
  declare type ProjectsGetRepoProjectsParams = {
    owner: string,
    repo: string,
    state?: "open" | "closed" | "all",
    per_page?: number,
    page?: number
  };
  declare type ProjectsGetUserPermissionLevelParams = {
    project_id: number,
    username: string
  };
  declare type ProjectsMoveProjectCardParams = {
    card_id: number,
    position: "top" | "bottom" | "after:<card_id>",
    column_id?: number
  };
  declare type ProjectsMoveProjectColumnParams = {
    column_id: number,
    position: "first" | "last" | "after:<column_id>"
  };
  declare type ProjectsRemoveCollaboratorParams = {
    project_id: number,
    username: string
  };
  declare type ProjectsUpdateProjectParams = {
    project_id: number,
    name?: string,
    body?: string,
    state?: "open" | "closed",
    organization_permission?: string,
    public?: boolean,
    per_page?: number,
    page?: number
  };
  declare type ProjectsUpdateProjectCardParams = {
    card_id: number,
    note?: string,
    archived?: boolean
  };
  declare type ProjectsUpdateProjectColumnParams = {
    column_id: number,
    name: string
  };
  declare type PullRequestsCheckMergedParams = {
    owner: string,
    repo: string,
    number: number
  };
  declare type PullRequestsCreateParams = {
    owner: string,
    repo: string,
    title: string,
    head: string,
    base: string,
    body?: string,
    maintainer_can_modify?: boolean
  };
  declare type PullRequestsCreateCommentParams = {
    owner: string,
    repo: string,
    number: number,
    body: string,
    commit_id: string,
    path: string,
    position: number
  };
  declare type PullRequestsCreateCommentReplyParams = {
    owner: string,
    repo: string,
    number: number,
    body: string,
    in_reply_to: number
  };
  declare type PullRequestsCreateFromIssueParams = {
    owner: string,
    repo: string,
    issue: number,
    head: string,
    base: string,
    maintainer_can_modify?: boolean
  };
  declare type PullRequestsCreateReviewParams = {
    owner: string,
    repo: string,
    number: number,
    commit_id?: string,
    body?: string,
    event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT",
    comments?: PullRequestsCreateReviewParamsComments[]
  };
  declare type PullRequestsCreateReviewRequestParams = {
    owner: string,
    repo: string,
    number: number,
    reviewers?: string[],
    team_reviewers?: string[]
  };
  declare type PullRequestsDeleteCommentParams = {
    owner: string,
    repo: string,
    comment_id: number
  };
  declare type PullRequestsDeletePendingReviewParams = {
    owner: string,
    repo: string,
    number: number,
    review_id: number
  };
  declare type PullRequestsDeleteReviewRequestParams = {
    owner: string,
    repo: string,
    number: number,
    reviewers?: string[],
    team_reviewers?: string[]
  };
  declare type PullRequestsDismissReviewParams = {
    owner: string,
    repo: string,
    number: number,
    review_id: number,
    message?: string
  };
  declare type PullRequestsEditCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    body: string
  };
  declare type PullRequestsGetParams = {
    owner: string,
    repo: string,
    number: number
  };
  declare type PullRequestsGetAllParams = {
    owner: string,
    repo: string,
    state?: "open" | "closed" | "all",
    head?: string,
    base?: string,
    sort?: "created" | "updated" | "popularity" | "long-running",
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type PullRequestsGetCommentParams = {
    owner: string,
    repo: string,
    comment_id: number
  };
  declare type PullRequestsGetCommentsParams = {
    owner: string,
    repo: string,
    number: number,
    sort?: "created" | "updated",
    direction?: "asc" | "desc",
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type PullRequestsGetCommentsForRepoParams = {
    owner: string,
    repo: string,
    sort?: "created" | "updated",
    direction?: "asc" | "desc",
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type PullRequestsGetCommitsParams = {
    owner: string,
    repo: string,
    number: number,
    per_page?: number,
    page?: number
  };
  declare type PullRequestsGetFilesParams = {
    owner: string,
    repo: string,
    number: number,
    per_page?: number,
    page?: number
  };
  declare type PullRequestsGetReviewParams = {
    owner: string,
    repo: string,
    number: number,
    review_id: number
  };
  declare type PullRequestsGetReviewCommentsParams = {
    owner: string,
    repo: string,
    number: number,
    review_id: number,
    per_page?: number,
    page?: number
  };
  declare type PullRequestsGetReviewRequestsParams = {
    owner: string,
    repo: string,
    number: number,
    per_page?: number,
    page?: number
  };
  declare type PullRequestsGetReviewsParams = {
    owner: string,
    repo: string,
    number: number,
    per_page?: number,
    page?: number
  };
  declare type PullRequestsMergeParams = {
    owner: string,
    repo: string,
    number: number,
    commit_title?: string,
    commit_message?: string,
    sha?: string,
    merge_method?: "merge" | "squash" | "rebase"
  };
  declare type PullRequestsSubmitReviewParams = {
    owner: string,
    repo: string,
    number: number,
    review_id: number,
    body?: string,
    event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT"
  };
  declare type PullRequestsUpdateParams = {
    owner: string,
    repo: string,
    number: number,
    title?: string,
    body?: string,
    state?: "open" | "closed",
    base?: string,
    maintainer_can_modify?: boolean
  };
  declare type ReactionsCreateForCommitCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray"
  };
  declare type ReactionsCreateForIssueParams = {
    owner: string,
    repo: string,
    number: number,
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray"
  };
  declare type ReactionsCreateForIssueCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray"
  };
  declare type ReactionsCreateForPullRequestReviewCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray"
  };
  declare type ReactionsCreateForTeamDiscussionParams = {
    team_id: number,
    discussion_number: number,
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray"
  };
  declare type ReactionsCreateForTeamDiscussionCommentParams = {
    team_id: number,
    discussion_number: number,
    comment_number: number,
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray"
  };
  declare type ReactionsDeleteParams = {
    reaction_id: number
  };
  declare type ReactionsGetForCommitCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray",
    per_page?: number,
    page?: number
  };
  declare type ReactionsGetForIssueParams = {
    owner: string,
    repo: string,
    number: number,
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray",
    per_page?: number,
    page?: number
  };
  declare type ReactionsGetForIssueCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray",
    per_page?: number,
    page?: number
  };
  declare type ReactionsGetForPullRequestReviewCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray",
    per_page?: number,
    page?: number
  };
  declare type ReactionsGetForTeamDiscussionParams = {
    team_id: number,
    discussion_number: number,
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray",
    per_page?: number,
    page?: number
  };
  declare type ReactionsGetForTeamDiscussionCommentParams = {
    team_id: number,
    discussion_number: number,
    comment_number: number,
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray",
    per_page?: number,
    page?: number
  };
  declare type ReposAddCollaboratorParams = {
    owner: string,
    repo: string,
    username: string,
    permission?: "pull" | "push" | "admin"
  };
  declare type ReposAddDeployKeyParams = {
    owner: string,
    repo: string,
    title?: string,
    key: string,
    read_only?: boolean
  };
  declare type ReposAddProtectedBranchAdminEnforcementParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposAddProtectedBranchRequiredSignaturesParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposAddProtectedBranchRequiredStatusChecksContextsParams = {
    owner: string,
    repo: string,
    branch: string,
    contexts: string[]
  };
  declare type ReposAddProtectedBranchTeamRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string,
    teams: string[]
  };
  declare type ReposAddProtectedBranchUserRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string,
    users: string[]
  };
  declare type ReposCheckCollaboratorParams = {
    owner: string,
    repo: string,
    username: string
  };
  declare type ReposCompareCommitsParams = {
    owner: string,
    repo: string,
    base: string,
    head: string
  };
  declare type ReposCreateParams = {
    name: string,
    description?: string,
    homepage?: string,
    private?: boolean,
    has_issues?: boolean,
    has_projects?: boolean,
    has_wiki?: boolean,
    team_id?: number,
    auto_init?: boolean,
    gitignore_template?: string,
    license_template?: string,
    allow_squash_merge?: boolean,
    allow_merge_commit?: boolean,
    allow_rebase_merge?: boolean
  };
  declare type ReposCreateCommitCommentParams = {
    owner: string,
    repo: string,
    sha: string,
    body: string,
    path?: string,
    position?: number,
    line?: number
  };
  declare type ReposCreateDeploymentParams = {
    owner: string,
    repo: string,
    ref: string,
    task?: string,
    auto_merge?: boolean,
    required_contexts?: string[],
    payload?: string,
    environment?: string,
    description?: string,
    transient_environment?: boolean,
    production_environment?: boolean
  };
  declare type ReposCreateDeploymentStatusParams = {
    owner: string,
    repo: string,
    deployment_id: number,
    state: "error" | "failure" | "inactive" | "pending" | "success",
    target_url?: string,
    log_url?: string,
    description?: string,
    environment_url?: string,
    auto_inactive?: boolean
  };
  declare type ReposCreateFileParams = {
    owner: string,
    repo: string,
    path: string,
    message: string,
    content: string,
    branch?: string,
    committer?: ReposCreateFileParamsCommitter,
    author?: ReposCreateFileParamsAuthor
  };
  declare type ReposCreateForOrgParams = {
    org: string,
    name: string,
    description?: string,
    homepage?: string,
    private?: boolean,
    has_issues?: boolean,
    has_projects?: boolean,
    has_wiki?: boolean,
    team_id?: number,
    auto_init?: boolean,
    gitignore_template?: string,
    license_template?: string,
    allow_squash_merge?: boolean,
    allow_merge_commit?: boolean,
    allow_rebase_merge?: boolean
  };
  declare type ReposCreateHookParams = {
    owner: string,
    repo: string,
    name: string,
    config: ReposCreateHookParamsConfig,
    events?: string[],
    active?: boolean
  };
  declare type ReposCreateReleaseParams = {
    owner: string,
    repo: string,
    tag_name: string,
    target_commitish?: string,
    name?: string,
    body?: string,
    draft?: boolean,
    prerelease?: boolean
  };
  declare type ReposCreateStatusParams = {
    owner: string,
    repo: string,
    sha: string,
    state: "error" | "failure" | "pending" | "success",
    target_url?: string,
    description?: string,
    context?: string
  };
  declare type ReposDeleteParams = {
    owner: string,
    repo: string
  };
  declare type ReposDeleteAssetParams = {
    owner: string,
    repo: string,
    asset_id: number
  };
  declare type ReposDeleteCommitCommentParams = {
    owner: string,
    repo: string,
    comment_id: number
  };
  declare type ReposDeleteDeployKeyParams = {
    owner: string,
    repo: string,
    key_id: number
  };
  declare type ReposDeleteDownloadParams = {
    owner: string,
    repo: string,
    download_id: number
  };
  declare type ReposDeleteFileParams = {
    owner: string,
    repo: string,
    path: string,
    message: string,
    sha: string,
    branch?: string,
    committer?: ReposDeleteFileParamsCommitter,
    author?: ReposDeleteFileParamsAuthor
  };
  declare type ReposDeleteHookParams = {
    owner: string,
    repo: string,
    hook_id: number
  };
  declare type ReposDeleteInviteParams = {
    owner: string,
    repo: string,
    invitation_id: number
  };
  declare type ReposDeleteReleaseParams = {
    owner: string,
    repo: string,
    release_id: number
  };
  declare type ReposEditParams = {
    owner: string,
    repo: string,
    name: string,
    description?: string,
    homepage?: string,
    private?: boolean,
    has_issues?: boolean,
    has_projects?: boolean,
    has_wiki?: boolean,
    default_branch?: string,
    allow_squash_merge?: boolean,
    allow_merge_commit?: boolean,
    allow_rebase_merge?: boolean,
    archived?: boolean
  };
  declare type ReposEditAssetParams = {
    owner: string,
    repo: string,
    asset_id: number,
    name?: string,
    label?: string
  };
  declare type ReposEditHookParams = {
    owner: string,
    repo: string,
    hook_id: number,
    config?: ReposEditHookParamsConfig,
    events?: string[],
    add_events?: string[],
    remove_events?: string[],
    active?: boolean
  };
  declare type ReposEditReleaseParams = {
    owner: string,
    repo: string,
    release_id: number,
    tag_name?: string,
    target_commitish?: string,
    name?: string,
    body?: string,
    draft?: boolean,
    prerelease?: boolean
  };
  declare type ReposForkParams = {
    owner: string,
    repo: string,
    organization?: string
  };
  declare type ReposGetParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetAllParams = {
    visibility?: "all" | "public" | "private",
    affiliation?: "owner" | "collaborator" | "organization_member",
    type?: "all" | "owner" | "public" | "private" | "member",
    sort?: "created" | "updated" | "pushed" | "full_name",
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type ReposGetAllCommitCommentsParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposGetArchiveLinkParams = {
    owner: string,
    repo: string,
    archive_format: "tarball" | "zipball",
    ref: string
  };
  declare type ReposGetAssetParams = {
    owner: string,
    repo: string,
    asset_id: number
  };
  declare type ReposGetAssetsParams = {
    owner: string,
    repo: string,
    release_id: number,
    per_page?: number,
    page?: number
  };
  declare type ReposGetBranchParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposGetBranchProtectionParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposGetBranchesParams = {
    owner: string,
    repo: string,
    protected?: boolean,
    per_page?: number,
    page?: number
  };
  declare type ReposGetClonesParams = {
    owner: string,
    repo: string,
    per?: "day" | "week"
  };
  declare type ReposGetCollaboratorsParams = {
    owner: string,
    repo: string,
    affiliation?: "outside" | "direct" | "all",
    per_page?: number,
    page?: number
  };
  declare type ReposGetCombinedStatusForRefParams = {
    owner: string,
    repo: string,
    ref: string
  };
  declare type ReposGetCommitParams = {
    owner: string,
    repo: string,
    sha: string
  };
  declare type ReposGetCommitCommentParams = {
    owner: string,
    repo: string,
    comment_id: number
  };
  declare type ReposGetCommitCommentsParams = {
    owner: string,
    repo: string,
    ref: string,
    per_page?: number,
    page?: number
  };
  declare type ReposGetCommitsParams = {
    owner: string,
    repo: string,
    sha?: string,
    path?: string,
    author?: string,
    since?: string,
    until?: string,
    per_page?: number,
    page?: number
  };
  declare type ReposGetCommunityProfileMetricsParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetContentParams = {
    owner: string,
    repo: string,
    path: string,
    ref?: string
  };
  declare type ReposGetContributorsParams = {
    owner: string,
    repo: string,
    anon?: string,
    per_page?: number,
    page?: number
  };
  declare type ReposGetDeployKeyParams = {
    owner: string,
    repo: string,
    key_id: number
  };
  declare type ReposGetDeployKeysParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposGetDeploymentParams = {
    owner: string,
    repo: string,
    deployment_id: number
  };
  declare type ReposGetDeploymentStatusParams = {
    owner: string,
    repo: string,
    deployment_id: number,
    id: number,
    status_id: number
  };
  declare type ReposGetDeploymentStatusesParams = {
    owner: string,
    repo: string,
    deployment_id: number,
    id: number,
    per_page?: number,
    page?: number
  };
  declare type ReposGetDeploymentsParams = {
    owner: string,
    repo: string,
    sha?: string,
    ref?: string,
    task?: string,
    environment?: string,
    per_page?: number,
    page?: number
  };
  declare type ReposGetDownloadParams = {
    owner: string,
    repo: string,
    download_id: number
  };
  declare type ReposGetDownloadsParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposGetForOrgParams = {
    org: string,
    type?: "all" | "public" | "private" | "forks" | "sources" | "member",
    per_page?: number,
    page?: number
  };
  declare type ReposGetForUserParams = {
    username: string,
    type?: "all" | "owner" | "member",
    sort?: "created" | "updated" | "pushed" | "full_name",
    direction?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type ReposGetForksParams = {
    owner: string,
    repo: string,
    sort?: "newest" | "oldest" | "stargazers",
    per_page?: number,
    page?: number
  };
  declare type ReposGetHookParams = {
    owner: string,
    repo: string,
    hook_id: number
  };
  declare type ReposGetHooksParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposGetInvitesParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposGetLanguagesParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetLatestPagesBuildParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetLatestReleaseParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetPagesParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetPagesBuildParams = {
    owner: string,
    repo: string,
    build_id: number
  };
  declare type ReposGetPagesBuildsParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposGetPathsParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetProtectedBranchAdminEnforcementParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposGetProtectedBranchPullRequestReviewEnforcementParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposGetProtectedBranchRequiredSignaturesParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposGetProtectedBranchRequiredStatusChecksParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposGetProtectedBranchRequiredStatusChecksContextsParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposGetProtectedBranchRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposGetProtectedBranchTeamRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string,
    per_page?: number,
    page?: number
  };
  declare type ReposGetProtectedBranchUserRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposGetPublicParams = {
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type ReposGetReadmeParams = {
    owner: string,
    repo: string,
    ref?: string
  };
  declare type ReposGetReferrersParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetReleaseParams = {
    owner: string,
    repo: string,
    release_id: number
  };
  declare type ReposGetReleaseByTagParams = {
    owner: string,
    repo: string,
    tag: string
  };
  declare type ReposGetReleasesParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposGetShaOfCommitRefParams = {
    owner: string,
    repo: string,
    ref: string
  };
  declare type ReposGetStatsCodeFrequencyParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetStatsCommitActivityParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetStatsContributorsParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetStatsParticipationParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetStatsPunchCardParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetStatusesParams = {
    owner: string,
    repo: string,
    ref: string,
    per_page?: number,
    page?: number
  };
  declare type ReposGetTagsParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposGetTeamsParams = {
    owner: string,
    repo: string,
    per_page?: number,
    page?: number
  };
  declare type ReposGetTopicsParams = {
    owner: string,
    repo: string
  };
  declare type ReposGetViewsParams = {
    owner: string,
    repo: string,
    per?: "day" | "week"
  };
  declare type ReposMergeParams = {
    owner: string,
    repo: string,
    base: string,
    head: string,
    commit_message?: string
  };
  declare type ReposPingHookParams = {
    owner: string,
    repo: string,
    hook_id: number
  };
  declare type ReposRemoveBranchProtectionParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposRemoveCollaboratorParams = {
    owner: string,
    repo: string,
    username: string
  };
  declare type ReposRemoveProtectedBranchAdminEnforcementParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposRemoveProtectedBranchPullRequestReviewEnforcementParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposRemoveProtectedBranchRequiredSignaturesParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposRemoveProtectedBranchRequiredStatusChecksParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposRemoveProtectedBranchRequiredStatusChecksContextsParams = {
    owner: string,
    repo: string,
    branch: string,
    contexts: string[]
  };
  declare type ReposRemoveProtectedBranchRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string
  };
  declare type ReposRemoveProtectedBranchTeamRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string,
    teams: string[]
  };
  declare type ReposRemoveProtectedBranchUserRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string,
    users: string[]
  };
  declare type ReposReplaceProtectedBranchRequiredStatusChecksContextsParams = {
    owner: string,
    repo: string,
    branch: string,
    contexts: string[]
  };
  declare type ReposReplaceProtectedBranchTeamRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string,
    teams: string[]
  };
  declare type ReposReplaceProtectedBranchUserRestrictionsParams = {
    owner: string,
    repo: string,
    branch: string,
    users: string[]
  };
  declare type ReposReplaceTopicsParams = {
    owner: string,
    repo: string,
    names: string[]
  };
  declare type ReposRequestPageBuildParams = {
    owner: string,
    repo: string
  };
  declare type ReposReviewUserPermissionLevelParams = {
    owner: string,
    repo: string,
    username: string
  };
  declare type ReposTestHookParams = {
    owner: string,
    repo: string,
    hook_id: number
  };
  declare type ReposTransferParams = {
    owner: string,
    repo: string,
    new_owner?: string,
    team_ids?: number[]
  };
  declare type ReposUpdateBranchProtectionParams = {
    owner: string,
    repo: string,
    branch: string,
    required_status_checks: ReposUpdateBranchProtectionParamsRequiredStatusChecks,
    enforce_admins: boolean,
    required_pull_request_reviews: ReposUpdateBranchProtectionParamsRequiredPullRequestReviews,
    restrictions: ReposUpdateBranchProtectionParamsRestrictions
  };
  declare type ReposUpdateCommitCommentParams = {
    owner: string,
    repo: string,
    comment_id: number,
    body: string
  };
  declare type ReposUpdateFileParams = {
    owner: string,
    repo: string,
    path: string,
    message: string,
    content: string,
    sha: string,
    branch?: string,
    committer?: ReposUpdateFileParamsCommitter,
    author?: ReposUpdateFileParamsAuthor
  };
  declare type ReposUpdateInviteParams = {
    owner: string,
    repo: string,
    invitation_id: number,
    permissions?: "read" | "write" | "admin"
  };
  declare type ReposUpdateProtectedBranchPullRequestReviewEnforcementParams = {
    owner: string,
    repo: string,
    branch: string,
    dismissal_restrictions?: ReposUpdateProtectedBranchPullRequestReviewEnforcementParamsDismissalRestrictions,
    dismiss_stale_reviews?: boolean,
    require_code_owner_reviews?: boolean,
    required_approving_review_count?: number
  };
  declare type ReposUpdateProtectedBranchRequiredStatusChecksParams = {
    owner: string,
    repo: string,
    branch: string,
    strict?: boolean,
    contexts?: string[]
  };
  declare type ReposUploadAssetParams = {
    url: string,
    "Content-Length": number,
    "Content-Type": string,
    name: string,
    label?: string,
    file: string | object
  };
  declare type SearchCodeParams = {
    q: string,
    sort?: "indexed",
    order?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type SearchCommitsParams = {
    q: string,
    sort?: "author-date" | "committer-date",
    order?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type SearchIssuesParams = {
    q: string,
    sort?: "comments" | "created" | "updated",
    order?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type SearchLabelsParams = {
    repository_id: number,
    q: string,
    sort?: "created" | "updated",
    order?: "asc" | "desc"
  };
  declare type SearchReposParams = {
    q: string,
    sort?: "stars" | "forks" | "updated",
    order?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type SearchTopicsParams = {
    q: string
  };
  declare type SearchUsersParams = {
    q: string,
    sort?: "followers" | "repositories" | "joined",
    order?: "asc" | "desc",
    per_page?: number,
    page?: number
  };
  declare type UsersAcceptRepoInviteParams = {
    invitation_id: number
  };
  declare type UsersAddEmailsParams = {
    emails: string[]
  };
  declare type UsersAddRepoToInstallationParams = {
    installation_id: number,
    repository_id: number
  };
  declare type UsersBlockUserParams = {
    username: string
  };
  declare type UsersCheckBlockedUserParams = {
    username: string
  };
  declare type UsersCheckFollowingParams = {
    username: string
  };
  declare type UsersCheckIfOneFollowersOtherParams = {
    username: string,
    target_user: string
  };
  declare type UsersCreateGpgKeyParams = {
    armored_public_key?: string
  };
  declare type UsersCreateKeyParams = {
    title?: string,
    key?: string
  };
  declare type UsersDeclineRepoInviteParams = {
    invitation_id: number
  };
  declare type UsersDeleteEmailsParams = {
    emails: string[]
  };
  declare type UsersDeleteGpgKeyParams = {
    gpg_key_id: number
  };
  declare type UsersDeleteKeyParams = {
    key_id: number
  };
  declare type UsersEditOrgMembershipParams = {
    org: string,
    state: "active"
  };
  declare type UsersFollowUserParams = {
    username: string
  };
  declare type UsersGetAllParams = {
    since?: string,
    per_page?: number,
    page?: number
  };
  declare type UsersGetContextForUserParams = {
    username: string,
    subject_type?: "organization" | "repository" | "issue" | "pull_request",
    subject_id?: string
  };
  declare type UsersGetEmailsParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersGetFollowersParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersGetFollowersForUserParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type UsersGetFollowingParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersGetFollowingForUserParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type UsersGetForUserParams = {
    username: string
  };
  declare type UsersGetGpgKeyParams = {
    gpg_key_id: number
  };
  declare type UsersGetGpgKeysParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersGetGpgKeysForUserParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type UsersGetInstallationReposParams = {
    installation_id: number,
    per_page?: number,
    page?: number
  };
  declare type UsersGetInstallationsParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersGetKeyParams = {
    key_id: number
  };
  declare type UsersGetKeysParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersGetKeysForUserParams = {
    username: string,
    per_page?: number,
    page?: number
  };
  declare type UsersGetMarketplacePurchasesParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersGetMarketplaceStubbedPurchasesParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersGetOrgMembershipParams = {
    org: string
  };
  declare type UsersGetOrgMembershipsParams = {
    state?: "active" | "pending",
    per_page?: number,
    page?: number
  };
  declare type UsersGetOrgsParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersGetPublicEmailsParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersGetRepoInvitesParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersGetTeamsParams = {
    per_page?: number,
    page?: number
  };
  declare type UsersRemoveRepoFromInstallationParams = {
    installation_id: number,
    repository_id: number
  };
  declare type UsersTogglePrimaryEmailVisibilityParams = {
    email: string,
    visibility: string
  };
  declare type UsersUnblockUserParams = {
    username: string
  };
  declare type UsersUnfollowUserParams = {
    username: string
  };
  declare type UsersUpdateParams = {
    name?: string,
    email?: string,
    blog?: string,
    company?: string,
    location?: string,
    hireable?: boolean,
    bio?: string
  };

  declare class Github {
    constructor(options?: Options): Github;
    authenticate(auth: Auth): void;
    hasNextPage(link: Link): ?string;
    hasPreviousPage(link: Link): ?string;
    hasLastPage(link: Link): ?string;
    hasFirstPage(link: Link): ?string;
    getNextPage(
      link: Link,
      headers?: { [header: Header]: any },
      callback?: Callback
    ): Promise<any>;
    getPreviousPage(
      link: Link,
      headers?: { [header: Header]: any },
      callback?: Callback
    ): Promise<any>;
    getLastPage(
      link: Link,
      headers?: { [header: Header]: any },
      callback?: Callback
    ): Promise<any>;
    getFirstPage(
      link: Link,
      headers?: { [header: Header]: any },
      callback?: Callback
    ): Promise<any>;
    activity: {
      checkNotificationThreadSubscription(
        params: ActivityCheckNotificationThreadSubscriptionParams,
        callback?: Callback
      ): Promise<any>,
      checkStarringRepo(
        params: ActivityCheckStarringRepoParams,
        callback?: Callback
      ): Promise<any>,
      deleteNotificationThreadSubscription(
        params: ActivityDeleteNotificationThreadSubscriptionParams,
        callback?: Callback
      ): Promise<any>,
      getEvents(
        params: ActivityGetEventsParams,
        callback?: Callback
      ): Promise<any>,
      getEventsForOrg(
        params: ActivityGetEventsForOrgParams,
        callback?: Callback
      ): Promise<any>,
      getEventsForRepo(
        params: ActivityGetEventsForRepoParams,
        callback?: Callback
      ): Promise<any>,
      getEventsForRepoNetwork(
        params: ActivityGetEventsForRepoNetworkParams,
        callback?: Callback
      ): Promise<any>,
      getEventsForUser(
        params: ActivityGetEventsForUserParams,
        callback?: Callback
      ): Promise<any>,
      getEventsForUserOrg(
        params: ActivityGetEventsForUserOrgParams,
        callback?: Callback
      ): Promise<any>,
      getEventsForUserPublic(
        params: ActivityGetEventsForUserPublicParams,
        callback?: Callback
      ): Promise<any>,
      getEventsReceived(
        params: ActivityGetEventsReceivedParams,
        callback?: Callback
      ): Promise<any>,
      getEventsReceivedPublic(
        params: ActivityGetEventsReceivedPublicParams,
        callback?: Callback
      ): Promise<any>,
      getFeeds(params: EmptyParams, callback?: Callback): Promise<any>,
      getNotificationThread(
        params: ActivityGetNotificationThreadParams,
        callback?: Callback
      ): Promise<any>,
      getNotifications(
        params: ActivityGetNotificationsParams,
        callback?: Callback
      ): Promise<any>,
      getNotificationsForUser(
        params: ActivityGetNotificationsForUserParams,
        callback?: Callback
      ): Promise<any>,
      getRepoSubscription(
        params: ActivityGetRepoSubscriptionParams,
        callback?: Callback
      ): Promise<any>,
      getStargazersForRepo(
        params: ActivityGetStargazersForRepoParams,
        callback?: Callback
      ): Promise<any>,
      getStarredRepos(
        params: ActivityGetStarredReposParams,
        callback?: Callback
      ): Promise<any>,
      getStarredReposForUser(
        params: ActivityGetStarredReposForUserParams,
        callback?: Callback
      ): Promise<any>,
      getWatchedRepos(
        params: ActivityGetWatchedReposParams,
        callback?: Callback
      ): Promise<any>,
      getWatchedReposForUser(
        params: ActivityGetWatchedReposForUserParams,
        callback?: Callback
      ): Promise<any>,
      getWatchersForRepo(
        params: ActivityGetWatchersForRepoParams,
        callback?: Callback
      ): Promise<any>,
      markNotificationThreadAsRead(
        params: ActivityMarkNotificationThreadAsReadParams,
        callback?: Callback
      ): Promise<any>,
      markNotificationsAsRead(
        params: ActivityMarkNotificationsAsReadParams,
        callback?: Callback
      ): Promise<any>,
      markNotificationsAsReadForRepo(
        params: ActivityMarkNotificationsAsReadForRepoParams,
        callback?: Callback
      ): Promise<any>,
      setNotificationThreadSubscription(
        params: ActivitySetNotificationThreadSubscriptionParams,
        callback?: Callback
      ): Promise<any>,
      setRepoSubscription(
        params: ActivitySetRepoSubscriptionParams,
        callback?: Callback
      ): Promise<any>,
      starRepo(
        params: ActivityStarRepoParams,
        callback?: Callback
      ): Promise<any>,
      unstarRepo(
        params: ActivityUnstarRepoParams,
        callback?: Callback
      ): Promise<any>,
      unwatchRepo(
        params: ActivityUnwatchRepoParams,
        callback?: Callback
      ): Promise<any>
    };
    apps: {
      addRepoToInstallation(
        params: AppsAddRepoToInstallationParams,
        callback?: Callback
      ): Promise<any>,
      checkMarketplaceListingAccount(
        params: AppsCheckMarketplaceListingAccountParams,
        callback?: Callback
      ): Promise<any>,
      checkMarketplaceListingStubbedAccount(
        params: AppsCheckMarketplaceListingStubbedAccountParams,
        callback?: Callback
      ): Promise<any>,
      createFromManifest(
        params: AppsCreateFromManifestParams,
        callback?: Callback
      ): Promise<any>,
      createInstallationToken(
        params: AppsCreateInstallationTokenParams,
        callback?: Callback
      ): Promise<any>,
      findOrgInstallation(
        params: AppsFindOrgInstallationParams,
        callback?: Callback
      ): Promise<any>,
      findRepoInstallation(
        params: AppsFindRepoInstallationParams,
        callback?: Callback
      ): Promise<any>,
      findUserInstallation(
        params: AppsFindUserInstallationParams,
        callback?: Callback
      ): Promise<any>,
      get(params: EmptyParams, callback?: Callback): Promise<any>,
      getForSlug(
        params: AppsGetForSlugParams,
        callback?: Callback
      ): Promise<any>,
      getInstallation(
        params: AppsGetInstallationParams,
        callback?: Callback
      ): Promise<any>,
      getInstallationRepositories(
        params: AppsGetInstallationRepositoriesParams,
        callback?: Callback
      ): Promise<any>,
      getInstallations(
        params: AppsGetInstallationsParams,
        callback?: Callback
      ): Promise<any>,
      getMarketplaceListingPlanAccounts(
        params: AppsGetMarketplaceListingPlanAccountsParams,
        callback?: Callback
      ): Promise<any>,
      getMarketplaceListingPlans(
        params: AppsGetMarketplaceListingPlansParams,
        callback?: Callback
      ): Promise<any>,
      getMarketplaceListingStubbedPlanAccounts(
        params: AppsGetMarketplaceListingStubbedPlanAccountsParams,
        callback?: Callback
      ): Promise<any>,
      getMarketplaceListingStubbedPlans(
        params: AppsGetMarketplaceListingStubbedPlansParams,
        callback?: Callback
      ): Promise<any>,
      removeRepoFromInstallation(
        params: AppsRemoveRepoFromInstallationParams,
        callback?: Callback
      ): Promise<any>
    };
    authorization: {
      check(
        params: AuthorizationCheckParams,
        callback?: Callback
      ): Promise<any>,
      create(
        params: AuthorizationCreateParams,
        callback?: Callback
      ): Promise<any>,
      delete(
        params: AuthorizationDeleteParams,
        callback?: Callback
      ): Promise<any>,
      deleteGrant(
        params: AuthorizationDeleteGrantParams,
        callback?: Callback
      ): Promise<any>,
      get(params: AuthorizationGetParams, callback?: Callback): Promise<any>,
      getAll(
        params: AuthorizationGetAllParams,
        callback?: Callback
      ): Promise<any>,
      getGrant(
        params: AuthorizationGetGrantParams,
        callback?: Callback
      ): Promise<any>,
      getGrants(
        params: AuthorizationGetGrantsParams,
        callback?: Callback
      ): Promise<any>,
      getOrCreateAuthorizationForApp(
        params: AuthorizationGetOrCreateAuthorizationForAppParams,
        callback?: Callback
      ): Promise<any>,
      getOrCreateAuthorizationForAppAndFingerprint(
        params: AuthorizationGetOrCreateAuthorizationForAppAndFingerprintParams,
        callback?: Callback
      ): Promise<any>,
      reset(
        params: AuthorizationResetParams,
        callback?: Callback
      ): Promise<any>,
      revoke(
        params: AuthorizationRevokeParams,
        callback?: Callback
      ): Promise<any>,
      revokeGrant(
        params: AuthorizationRevokeGrantParams,
        callback?: Callback
      ): Promise<any>,
      update(
        params: AuthorizationUpdateParams,
        callback?: Callback
      ): Promise<any>
    };
    checks: {
      create(params: ChecksCreateParams, callback?: Callback): Promise<any>,
      createSuite(
        params: ChecksCreateSuiteParams,
        callback?: Callback
      ): Promise<any>,
      get(params: ChecksGetParams, callback?: Callback): Promise<any>,
      getSuite(params: ChecksGetSuiteParams, callback?: Callback): Promise<any>,
      listAnnotations(
        params: ChecksListAnnotationsParams,
        callback?: Callback
      ): Promise<any>,
      listForRef(
        params: ChecksListForRefParams,
        callback?: Callback
      ): Promise<any>,
      listForSuite(
        params: ChecksListForSuiteParams,
        callback?: Callback
      ): Promise<any>,
      listSuitesForRef(
        params: ChecksListSuitesForRefParams,
        callback?: Callback
      ): Promise<any>,
      rerequestSuite(
        params: ChecksRerequestSuiteParams,
        callback?: Callback
      ): Promise<any>,
      setSuitesPreferences(
        params: ChecksSetSuitesPreferencesParams,
        callback?: Callback
      ): Promise<any>,
      update(params: ChecksUpdateParams, callback?: Callback): Promise<any>
    };
    gists: {
      checkStar(
        params: GistsCheckStarParams,
        callback?: Callback
      ): Promise<any>,
      create(params: GistsCreateParams, callback?: Callback): Promise<any>,
      createComment(
        params: GistsCreateCommentParams,
        callback?: Callback
      ): Promise<any>,
      delete(params: GistsDeleteParams, callback?: Callback): Promise<any>,
      deleteComment(
        params: GistsDeleteCommentParams,
        callback?: Callback
      ): Promise<any>,
      edit(params: GistsEditParams, callback?: Callback): Promise<any>,
      editComment(
        params: GistsEditCommentParams,
        callback?: Callback
      ): Promise<any>,
      fork(params: GistsForkParams, callback?: Callback): Promise<any>,
      get(params: GistsGetParams, callback?: Callback): Promise<any>,
      getAll(params: GistsGetAllParams, callback?: Callback): Promise<any>,
      getComment(
        params: GistsGetCommentParams,
        callback?: Callback
      ): Promise<any>,
      getComments(
        params: GistsGetCommentsParams,
        callback?: Callback
      ): Promise<any>,
      getCommits(
        params: GistsGetCommitsParams,
        callback?: Callback
      ): Promise<any>,
      getForUser(
        params: GistsGetForUserParams,
        callback?: Callback
      ): Promise<any>,
      getForks(params: GistsGetForksParams, callback?: Callback): Promise<any>,
      getPublic(
        params: GistsGetPublicParams,
        callback?: Callback
      ): Promise<any>,
      getRevision(
        params: GistsGetRevisionParams,
        callback?: Callback
      ): Promise<any>,
      getStarred(
        params: GistsGetStarredParams,
        callback?: Callback
      ): Promise<any>,
      star(params: GistsStarParams, callback?: Callback): Promise<any>,
      unstar(params: GistsUnstarParams, callback?: Callback): Promise<any>
    };
    gitdata: {
      createBlob(
        params: GitdataCreateBlobParams,
        callback?: Callback
      ): Promise<any>,
      createCommit(
        params: GitdataCreateCommitParams,
        callback?: Callback
      ): Promise<any>,
      createReference(
        params: GitdataCreateReferenceParams,
        callback?: Callback
      ): Promise<any>,
      createTag(
        params: GitdataCreateTagParams,
        callback?: Callback
      ): Promise<any>,
      createTree(
        params: GitdataCreateTreeParams,
        callback?: Callback
      ): Promise<any>,
      deleteReference(
        params: GitdataDeleteReferenceParams,
        callback?: Callback
      ): Promise<any>,
      getBlob(params: GitdataGetBlobParams, callback?: Callback): Promise<any>,
      getCommit(
        params: GitdataGetCommitParams,
        callback?: Callback
      ): Promise<any>,
      getReference(
        params: GitdataGetReferenceParams,
        callback?: Callback
      ): Promise<any>,
      getTag(params: GitdataGetTagParams, callback?: Callback): Promise<any>,
      getTree(params: GitdataGetTreeParams, callback?: Callback): Promise<any>,
      updateReference(
        params: GitdataUpdateReferenceParams,
        callback?: Callback
      ): Promise<any>
    };
    issues: {
      addAssigneesToIssue(
        params: IssuesAddAssigneesToIssueParams,
        callback?: Callback
      ): Promise<any>,
      addLabels(
        params: IssuesAddLabelsParams,
        callback?: Callback
      ): Promise<any>,
      checkAssignee(
        params: IssuesCheckAssigneeParams,
        callback?: Callback
      ): Promise<any>,
      create(params: IssuesCreateParams, callback?: Callback): Promise<any>,
      createComment(
        params: IssuesCreateCommentParams,
        callback?: Callback
      ): Promise<any>,
      createLabel(
        params: IssuesCreateLabelParams,
        callback?: Callback
      ): Promise<any>,
      createMilestone(
        params: IssuesCreateMilestoneParams,
        callback?: Callback
      ): Promise<any>,
      deleteComment(
        params: IssuesDeleteCommentParams,
        callback?: Callback
      ): Promise<any>,
      deleteLabel(
        params: IssuesDeleteLabelParams,
        callback?: Callback
      ): Promise<any>,
      deleteMilestone(
        params: IssuesDeleteMilestoneParams,
        callback?: Callback
      ): Promise<any>,
      edit(params: IssuesEditParams, callback?: Callback): Promise<any>,
      editComment(
        params: IssuesEditCommentParams,
        callback?: Callback
      ): Promise<any>,
      get(params: IssuesGetParams, callback?: Callback): Promise<any>,
      getAll(params: IssuesGetAllParams, callback?: Callback): Promise<any>,
      getAssignees(
        params: IssuesGetAssigneesParams,
        callback?: Callback
      ): Promise<any>,
      getComment(
        params: IssuesGetCommentParams,
        callback?: Callback
      ): Promise<any>,
      getComments(
        params: IssuesGetCommentsParams,
        callback?: Callback
      ): Promise<any>,
      getCommentsForRepo(
        params: IssuesGetCommentsForRepoParams,
        callback?: Callback
      ): Promise<any>,
      getEvent(params: IssuesGetEventParams, callback?: Callback): Promise<any>,
      getEvents(
        params: IssuesGetEventsParams,
        callback?: Callback
      ): Promise<any>,
      getEventsForRepo(
        params: IssuesGetEventsForRepoParams,
        callback?: Callback
      ): Promise<any>,
      getEventsTimeline(
        params: IssuesGetEventsTimelineParams,
        callback?: Callback
      ): Promise<any>,
      getForOrg(
        params: IssuesGetForOrgParams,
        callback?: Callback
      ): Promise<any>,
      getForRepo(
        params: IssuesGetForRepoParams,
        callback?: Callback
      ): Promise<any>,
      getForUser(
        params: IssuesGetForUserParams,
        callback?: Callback
      ): Promise<any>,
      getIssueLabels(
        params: IssuesGetIssueLabelsParams,
        callback?: Callback
      ): Promise<any>,
      getLabel(params: IssuesGetLabelParams, callback?: Callback): Promise<any>,
      getLabels(
        params: IssuesGetLabelsParams,
        callback?: Callback
      ): Promise<any>,
      getMilestone(
        params: IssuesGetMilestoneParams,
        callback?: Callback
      ): Promise<any>,
      getMilestoneLabels(
        params: IssuesGetMilestoneLabelsParams,
        callback?: Callback
      ): Promise<any>,
      getMilestones(
        params: IssuesGetMilestonesParams,
        callback?: Callback
      ): Promise<any>,
      lock(params: IssuesLockParams, callback?: Callback): Promise<any>,
      removeAllLabels(
        params: IssuesRemoveAllLabelsParams,
        callback?: Callback
      ): Promise<any>,
      removeAssigneesFromIssue(
        params: IssuesRemoveAssigneesFromIssueParams,
        callback?: Callback
      ): Promise<any>,
      removeLabel(
        params: IssuesRemoveLabelParams,
        callback?: Callback
      ): Promise<any>,
      replaceAllLabels(
        params: IssuesReplaceAllLabelsParams,
        callback?: Callback
      ): Promise<any>,
      unlock(params: IssuesUnlockParams, callback?: Callback): Promise<any>,
      updateLabel(
        params: IssuesUpdateLabelParams,
        callback?: Callback
      ): Promise<any>,
      updateMilestone(
        params: IssuesUpdateMilestoneParams,
        callback?: Callback
      ): Promise<any>
    };
    migrations: {
      cancelImport(
        params: MigrationsCancelImportParams,
        callback?: Callback
      ): Promise<any>,
      deleteArchiveForAuthenticatedUser(
        params: MigrationsDeleteArchiveForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      deleteMigrationArchive(
        params: MigrationsDeleteMigrationArchiveParams,
        callback?: Callback
      ): Promise<any>,
      getArchiveForAuthenticatedUser(
        params: MigrationsGetArchiveForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      getImportCommitAuthors(
        params: MigrationsGetImportCommitAuthorsParams,
        callback?: Callback
      ): Promise<any>,
      getImportProgress(
        params: MigrationsGetImportProgressParams,
        callback?: Callback
      ): Promise<any>,
      getLargeImportFiles(
        params: MigrationsGetLargeImportFilesParams,
        callback?: Callback
      ): Promise<any>,
      getMigrationArchiveLink(
        params: MigrationsGetMigrationArchiveLinkParams,
        callback?: Callback
      ): Promise<any>,
      getMigrationStatus(
        params: MigrationsGetMigrationStatusParams,
        callback?: Callback
      ): Promise<any>,
      getMigrations(
        params: MigrationsGetMigrationsParams,
        callback?: Callback
      ): Promise<any>,
      getStatusForAuthenticatedUser(
        params: MigrationsGetStatusForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      listForAuthenticatedUser(
        params: MigrationsListForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      mapImportCommitAuthor(
        params: MigrationsMapImportCommitAuthorParams,
        callback?: Callback
      ): Promise<any>,
      setImportLfsPreference(
        params: MigrationsSetImportLfsPreferenceParams,
        callback?: Callback
      ): Promise<any>,
      startForAuthenticatedUser(
        params: MigrationsStartForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      startImport(
        params: MigrationsStartImportParams,
        callback?: Callback
      ): Promise<any>,
      startMigration(
        params: MigrationsStartMigrationParams,
        callback?: Callback
      ): Promise<any>,
      unlockRepoForAuthenticatedUser(
        params: MigrationsUnlockRepoForAuthenticatedUserParams,
        callback?: Callback
      ): Promise<any>,
      unlockRepoLockedForMigration(
        params: MigrationsUnlockRepoLockedForMigrationParams,
        callback?: Callback
      ): Promise<any>,
      updateImport(
        params: MigrationsUpdateImportParams,
        callback?: Callback
      ): Promise<any>
    };
    misc: {
      getCodeOfConduct(
        params: MiscGetCodeOfConductParams,
        callback?: Callback
      ): Promise<any>,
      getCodesOfConduct(params: EmptyParams, callback?: Callback): Promise<any>,
      getGitignoreTemplate(
        params: MiscGetGitignoreTemplateParams,
        callback?: Callback
      ): Promise<any>,
      getGitignoreTemplates(
        params: EmptyParams,
        callback?: Callback
      ): Promise<any>,
      getLicense(
        params: MiscGetLicenseParams,
        callback?: Callback
      ): Promise<any>,
      getLicenses(params: EmptyParams, callback?: Callback): Promise<any>,
      getRateLimit(params: EmptyParams, callback?: Callback): Promise<any>,
      getRepoCodeOfConduct(
        params: MiscGetRepoCodeOfConductParams,
        callback?: Callback
      ): Promise<any>,
      getRepoLicense(
        params: MiscGetRepoLicenseParams,
        callback?: Callback
      ): Promise<any>,
      renderMarkdown(
        params: MiscRenderMarkdownParams,
        callback?: Callback
      ): Promise<any>,
      renderMarkdownRaw(
        params: MiscRenderMarkdownRawParams,
        callback?: Callback
      ): Promise<any>
    };
    orgs: {
      addOrgMembership(
        params: OrgsAddOrgMembershipParams,
        callback?: Callback
      ): Promise<any>,
      addTeamMembership(
        params: OrgsAddTeamMembershipParams,
        callback?: Callback
      ): Promise<any>,
      addTeamRepo(
        params: OrgsAddTeamRepoParams,
        callback?: Callback
      ): Promise<any>,
      blockUser(params: OrgsBlockUserParams, callback?: Callback): Promise<any>,
      checkBlockedUser(
        params: OrgsCheckBlockedUserParams,
        callback?: Callback
      ): Promise<any>,
      checkMembership(
        params: OrgsCheckMembershipParams,
        callback?: Callback
      ): Promise<any>,
      checkPublicMembership(
        params: OrgsCheckPublicMembershipParams,
        callback?: Callback
      ): Promise<any>,
      checkTeamRepo(
        params: OrgsCheckTeamRepoParams,
        callback?: Callback
      ): Promise<any>,
      concealMembership(
        params: OrgsConcealMembershipParams,
        callback?: Callback
      ): Promise<any>,
      convertMemberToOutsideCollaborator(
        params: OrgsConvertMemberToOutsideCollaboratorParams,
        callback?: Callback
      ): Promise<any>,
      createHook(
        params: OrgsCreateHookParams,
        callback?: Callback
      ): Promise<any>,
      createInvitation(
        params: OrgsCreateInvitationParams,
        callback?: Callback
      ): Promise<any>,
      createTeam(
        params: OrgsCreateTeamParams,
        callback?: Callback
      ): Promise<any>,
      deleteHook(
        params: OrgsDeleteHookParams,
        callback?: Callback
      ): Promise<any>,
      deleteTeam(
        params: OrgsDeleteTeamParams,
        callback?: Callback
      ): Promise<any>,
      deleteTeamRepo(
        params: OrgsDeleteTeamRepoParams,
        callback?: Callback
      ): Promise<any>,
      editHook(params: OrgsEditHookParams, callback?: Callback): Promise<any>,
      editTeam(params: OrgsEditTeamParams, callback?: Callback): Promise<any>,
      get(params: OrgsGetParams, callback?: Callback): Promise<any>,
      getAll(params: OrgsGetAllParams, callback?: Callback): Promise<any>,
      getBlockedUsers(
        params: OrgsGetBlockedUsersParams,
        callback?: Callback
      ): Promise<any>,
      getChildTeams(
        params: OrgsGetChildTeamsParams,
        callback?: Callback
      ): Promise<any>,
      getForUser(
        params: OrgsGetForUserParams,
        callback?: Callback
      ): Promise<any>,
      getHook(params: OrgsGetHookParams, callback?: Callback): Promise<any>,
      getHooks(params: OrgsGetHooksParams, callback?: Callback): Promise<any>,
      getInvitationTeams(
        params: OrgsGetInvitationTeamsParams,
        callback?: Callback
      ): Promise<any>,
      getMembers(
        params: OrgsGetMembersParams,
        callback?: Callback
      ): Promise<any>,
      getOrgMembership(
        params: OrgsGetOrgMembershipParams,
        callback?: Callback
      ): Promise<any>,
      getOutsideCollaborators(
        params: OrgsGetOutsideCollaboratorsParams,
        callback?: Callback
      ): Promise<any>,
      getPendingOrgInvites(
        params: OrgsGetPendingOrgInvitesParams,
        callback?: Callback
      ): Promise<any>,
      getPendingTeamInvites(
        params: OrgsGetPendingTeamInvitesParams,
        callback?: Callback
      ): Promise<any>,
      getPublicMembers(
        params: OrgsGetPublicMembersParams,
        callback?: Callback
      ): Promise<any>,
      getTeam(params: OrgsGetTeamParams, callback?: Callback): Promise<any>,
      getTeamMembers(
        params: OrgsGetTeamMembersParams,
        callback?: Callback
      ): Promise<any>,
      getTeamMembership(
        params: OrgsGetTeamMembershipParams,
        callback?: Callback
      ): Promise<any>,
      getTeamRepos(
        params: OrgsGetTeamReposParams,
        callback?: Callback
      ): Promise<any>,
      getTeams(params: OrgsGetTeamsParams, callback?: Callback): Promise<any>,
      pingHook(params: OrgsPingHookParams, callback?: Callback): Promise<any>,
      publicizeMembership(
        params: OrgsPublicizeMembershipParams,
        callback?: Callback
      ): Promise<any>,
      removeMember(
        params: OrgsRemoveMemberParams,
        callback?: Callback
      ): Promise<any>,
      removeOrgMembership(
        params: OrgsRemoveOrgMembershipParams,
        callback?: Callback
      ): Promise<any>,
      removeOutsideCollaborator(
        params: OrgsRemoveOutsideCollaboratorParams,
        callback?: Callback
      ): Promise<any>,
      removeTeamMembership(
        params: OrgsRemoveTeamMembershipParams,
        callback?: Callback
      ): Promise<any>,
      unblockUser(
        params: OrgsUnblockUserParams,
        callback?: Callback
      ): Promise<any>,
      update(params: OrgsUpdateParams, callback?: Callback): Promise<any>
    };
    projects: {
      addCollaborator(
        params: ProjectsAddCollaboratorParams,
        callback?: Callback
      ): Promise<any>,
      createOrgProject(
        params: ProjectsCreateOrgProjectParams,
        callback?: Callback
      ): Promise<any>,
      createProjectCard(
        params: ProjectsCreateProjectCardParams,
        callback?: Callback
      ): Promise<any>,
      createProjectColumn(
        params: ProjectsCreateProjectColumnParams,
        callback?: Callback
      ): Promise<any>,
      createRepoProject(
        params: ProjectsCreateRepoProjectParams,
        callback?: Callback
      ): Promise<any>,
      deleteProject(
        params: ProjectsDeleteProjectParams,
        callback?: Callback
      ): Promise<any>,
      deleteProjectCard(
        params: ProjectsDeleteProjectCardParams,
        callback?: Callback
      ): Promise<any>,
      deleteProjectColumn(
        params: ProjectsDeleteProjectColumnParams,
        callback?: Callback
      ): Promise<any>,
      getCollaborators(
        params: ProjectsGetCollaboratorsParams,
        callback?: Callback
      ): Promise<any>,
      getOrgProjects(
        params: ProjectsGetOrgProjectsParams,
        callback?: Callback
      ): Promise<any>,
      getProject(
        params: ProjectsGetProjectParams,
        callback?: Callback
      ): Promise<any>,
      getProjectCard(
        params: ProjectsGetProjectCardParams,
        callback?: Callback
      ): Promise<any>,
      getProjectCards(
        params: ProjectsGetProjectCardsParams,
        callback?: Callback
      ): Promise<any>,
      getProjectColumn(
        params: ProjectsGetProjectColumnParams,
        callback?: Callback
      ): Promise<any>,
      getProjectColumns(
        params: ProjectsGetProjectColumnsParams,
        callback?: Callback
      ): Promise<any>,
      getRepoProjects(
        params: ProjectsGetRepoProjectsParams,
        callback?: Callback
      ): Promise<any>,
      getUserPermissionLevel(
        params: ProjectsGetUserPermissionLevelParams,
        callback?: Callback
      ): Promise<any>,
      moveProjectCard(
        params: ProjectsMoveProjectCardParams,
        callback?: Callback
      ): Promise<any>,
      moveProjectColumn(
        params: ProjectsMoveProjectColumnParams,
        callback?: Callback
      ): Promise<any>,
      removeCollaborator(
        params: ProjectsRemoveCollaboratorParams,
        callback?: Callback
      ): Promise<any>,
      updateProject(
        params: ProjectsUpdateProjectParams,
        callback?: Callback
      ): Promise<any>,
      updateProjectCard(
        params: ProjectsUpdateProjectCardParams,
        callback?: Callback
      ): Promise<any>,
      updateProjectColumn(
        params: ProjectsUpdateProjectColumnParams,
        callback?: Callback
      ): Promise<any>
    };
    pullRequests: {
      checkMerged(
        params: PullRequestsCheckMergedParams,
        callback?: Callback
      ): Promise<any>,
      create(
        params: PullRequestsCreateParams,
        callback?: Callback
      ): Promise<any>,
      createComment(
        params: PullRequestsCreateCommentParams,
        callback?: Callback
      ): Promise<any>,
      createCommentReply(
        params: PullRequestsCreateCommentReplyParams,
        callback?: Callback
      ): Promise<any>,
      createFromIssue(
        params: PullRequestsCreateFromIssueParams,
        callback?: Callback
      ): Promise<any>,
      createReview(
        params: PullRequestsCreateReviewParams,
        callback?: Callback
      ): Promise<any>,
      createReviewRequest(
        params: PullRequestsCreateReviewRequestParams,
        callback?: Callback
      ): Promise<any>,
      deleteComment(
        params: PullRequestsDeleteCommentParams,
        callback?: Callback
      ): Promise<any>,
      deletePendingReview(
        params: PullRequestsDeletePendingReviewParams,
        callback?: Callback
      ): Promise<any>,
      deleteReviewRequest(
        params: PullRequestsDeleteReviewRequestParams,
        callback?: Callback
      ): Promise<any>,
      dismissReview(
        params: PullRequestsDismissReviewParams,
        callback?: Callback
      ): Promise<any>,
      editComment(
        params: PullRequestsEditCommentParams,
        callback?: Callback
      ): Promise<any>,
      get(params: PullRequestsGetParams, callback?: Callback): Promise<any>,
      getAll(
        params: PullRequestsGetAllParams,
        callback?: Callback
      ): Promise<any>,
      getComment(
        params: PullRequestsGetCommentParams,
        callback?: Callback
      ): Promise<any>,
      getComments(
        params: PullRequestsGetCommentsParams,
        callback?: Callback
      ): Promise<any>,
      getCommentsForRepo(
        params: PullRequestsGetCommentsForRepoParams,
        callback?: Callback
      ): Promise<any>,
      getCommits(
        params: PullRequestsGetCommitsParams,
        callback?: Callback
      ): Promise<any>,
      getFiles(
        params: PullRequestsGetFilesParams,
        callback?: Callback
      ): Promise<any>,
      getReview(
        params: PullRequestsGetReviewParams,
        callback?: Callback
      ): Promise<any>,
      getReviewComments(
        params: PullRequestsGetReviewCommentsParams,
        callback?: Callback
      ): Promise<any>,
      getReviewRequests(
        params: PullRequestsGetReviewRequestsParams,
        callback?: Callback
      ): Promise<any>,
      getReviews(
        params: PullRequestsGetReviewsParams,
        callback?: Callback
      ): Promise<any>,
      merge(params: PullRequestsMergeParams, callback?: Callback): Promise<any>,
      submitReview(
        params: PullRequestsSubmitReviewParams,
        callback?: Callback
      ): Promise<any>,
      update(
        params: PullRequestsUpdateParams,
        callback?: Callback
      ): Promise<any>
    };
    reactions: {
      createForCommitComment(
        params: ReactionsCreateForCommitCommentParams,
        callback?: Callback
      ): Promise<any>,
      createForIssue(
        params: ReactionsCreateForIssueParams,
        callback?: Callback
      ): Promise<any>,
      createForIssueComment(
        params: ReactionsCreateForIssueCommentParams,
        callback?: Callback
      ): Promise<any>,
      createForPullRequestReviewComment(
        params: ReactionsCreateForPullRequestReviewCommentParams,
        callback?: Callback
      ): Promise<any>,
      createForTeamDiscussion(
        params: ReactionsCreateForTeamDiscussionParams,
        callback?: Callback
      ): Promise<any>,
      createForTeamDiscussionComment(
        params: ReactionsCreateForTeamDiscussionCommentParams,
        callback?: Callback
      ): Promise<any>,
      delete(params: ReactionsDeleteParams, callback?: Callback): Promise<any>,
      getForCommitComment(
        params: ReactionsGetForCommitCommentParams,
        callback?: Callback
      ): Promise<any>,
      getForIssue(
        params: ReactionsGetForIssueParams,
        callback?: Callback
      ): Promise<any>,
      getForIssueComment(
        params: ReactionsGetForIssueCommentParams,
        callback?: Callback
      ): Promise<any>,
      getForPullRequestReviewComment(
        params: ReactionsGetForPullRequestReviewCommentParams,
        callback?: Callback
      ): Promise<any>,
      getForTeamDiscussion(
        params: ReactionsGetForTeamDiscussionParams,
        callback?: Callback
      ): Promise<any>,
      getForTeamDiscussionComment(
        params: ReactionsGetForTeamDiscussionCommentParams,
        callback?: Callback
      ): Promise<any>
    };
    repos: {
      addCollaborator(
        params: ReposAddCollaboratorParams,
        callback?: Callback
      ): Promise<any>,
      addDeployKey(
        params: ReposAddDeployKeyParams,
        callback?: Callback
      ): Promise<any>,
      addProtectedBranchAdminEnforcement(
        params: ReposAddProtectedBranchAdminEnforcementParams,
        callback?: Callback
      ): Promise<any>,
      addProtectedBranchRequiredSignatures(
        params: ReposAddProtectedBranchRequiredSignaturesParams,
        callback?: Callback
      ): Promise<any>,
      addProtectedBranchRequiredStatusChecksContexts(
        params: ReposAddProtectedBranchRequiredStatusChecksContextsParams,
        callback?: Callback
      ): Promise<any>,
      addProtectedBranchTeamRestrictions(
        params: ReposAddProtectedBranchTeamRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      addProtectedBranchUserRestrictions(
        params: ReposAddProtectedBranchUserRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      checkCollaborator(
        params: ReposCheckCollaboratorParams,
        callback?: Callback
      ): Promise<any>,
      compareCommits(
        params: ReposCompareCommitsParams,
        callback?: Callback
      ): Promise<any>,
      create(params: ReposCreateParams, callback?: Callback): Promise<any>,
      createCommitComment(
        params: ReposCreateCommitCommentParams,
        callback?: Callback
      ): Promise<any>,
      createDeployment(
        params: ReposCreateDeploymentParams,
        callback?: Callback
      ): Promise<any>,
      createDeploymentStatus(
        params: ReposCreateDeploymentStatusParams,
        callback?: Callback
      ): Promise<any>,
      createFile(
        params: ReposCreateFileParams,
        callback?: Callback
      ): Promise<any>,
      createForOrg(
        params: ReposCreateForOrgParams,
        callback?: Callback
      ): Promise<any>,
      createHook(
        params: ReposCreateHookParams,
        callback?: Callback
      ): Promise<any>,
      createRelease(
        params: ReposCreateReleaseParams,
        callback?: Callback
      ): Promise<any>,
      createStatus(
        params: ReposCreateStatusParams,
        callback?: Callback
      ): Promise<any>,
      delete(params: ReposDeleteParams, callback?: Callback): Promise<any>,
      deleteAsset(
        params: ReposDeleteAssetParams,
        callback?: Callback
      ): Promise<any>,
      deleteCommitComment(
        params: ReposDeleteCommitCommentParams,
        callback?: Callback
      ): Promise<any>,
      deleteDeployKey(
        params: ReposDeleteDeployKeyParams,
        callback?: Callback
      ): Promise<any>,
      deleteDownload(
        params: ReposDeleteDownloadParams,
        callback?: Callback
      ): Promise<any>,
      deleteFile(
        params: ReposDeleteFileParams,
        callback?: Callback
      ): Promise<any>,
      deleteHook(
        params: ReposDeleteHookParams,
        callback?: Callback
      ): Promise<any>,
      deleteInvite(
        params: ReposDeleteInviteParams,
        callback?: Callback
      ): Promise<any>,
      deleteRelease(
        params: ReposDeleteReleaseParams,
        callback?: Callback
      ): Promise<any>,
      edit(params: ReposEditParams, callback?: Callback): Promise<any>,
      editAsset(
        params: ReposEditAssetParams,
        callback?: Callback
      ): Promise<any>,
      editHook(params: ReposEditHookParams, callback?: Callback): Promise<any>,
      editRelease(
        params: ReposEditReleaseParams,
        callback?: Callback
      ): Promise<any>,
      fork(params: ReposForkParams, callback?: Callback): Promise<any>,
      get(params: ReposGetParams, callback?: Callback): Promise<any>,
      getAll(params: ReposGetAllParams, callback?: Callback): Promise<any>,
      getAllCommitComments(
        params: ReposGetAllCommitCommentsParams,
        callback?: Callback
      ): Promise<any>,
      getArchiveLink(
        params: ReposGetArchiveLinkParams,
        callback?: Callback
      ): Promise<any>,
      getAsset(params: ReposGetAssetParams, callback?: Callback): Promise<any>,
      getAssets(
        params: ReposGetAssetsParams,
        callback?: Callback
      ): Promise<any>,
      getBranch(
        params: ReposGetBranchParams,
        callback?: Callback
      ): Promise<any>,
      getBranchProtection(
        params: ReposGetBranchProtectionParams,
        callback?: Callback
      ): Promise<any>,
      getBranches(
        params: ReposGetBranchesParams,
        callback?: Callback
      ): Promise<any>,
      getClones(
        params: ReposGetClonesParams,
        callback?: Callback
      ): Promise<any>,
      getCollaborators(
        params: ReposGetCollaboratorsParams,
        callback?: Callback
      ): Promise<any>,
      getCombinedStatusForRef(
        params: ReposGetCombinedStatusForRefParams,
        callback?: Callback
      ): Promise<any>,
      getCommit(
        params: ReposGetCommitParams,
        callback?: Callback
      ): Promise<any>,
      getCommitComment(
        params: ReposGetCommitCommentParams,
        callback?: Callback
      ): Promise<any>,
      getCommitComments(
        params: ReposGetCommitCommentsParams,
        callback?: Callback
      ): Promise<any>,
      getCommits(
        params: ReposGetCommitsParams,
        callback?: Callback
      ): Promise<any>,
      getCommunityProfileMetrics(
        params: ReposGetCommunityProfileMetricsParams,
        callback?: Callback
      ): Promise<any>,
      getContent(
        params: ReposGetContentParams,
        callback?: Callback
      ): Promise<any>,
      getContributors(
        params: ReposGetContributorsParams,
        callback?: Callback
      ): Promise<any>,
      getDeployKey(
        params: ReposGetDeployKeyParams,
        callback?: Callback
      ): Promise<any>,
      getDeployKeys(
        params: ReposGetDeployKeysParams,
        callback?: Callback
      ): Promise<any>,
      getDeployment(
        params: ReposGetDeploymentParams,
        callback?: Callback
      ): Promise<any>,
      getDeploymentStatus(
        params: ReposGetDeploymentStatusParams,
        callback?: Callback
      ): Promise<any>,
      getDeploymentStatuses(
        params: ReposGetDeploymentStatusesParams,
        callback?: Callback
      ): Promise<any>,
      getDeployments(
        params: ReposGetDeploymentsParams,
        callback?: Callback
      ): Promise<any>,
      getDownload(
        params: ReposGetDownloadParams,
        callback?: Callback
      ): Promise<any>,
      getDownloads(
        params: ReposGetDownloadsParams,
        callback?: Callback
      ): Promise<any>,
      getForOrg(
        params: ReposGetForOrgParams,
        callback?: Callback
      ): Promise<any>,
      getForUser(
        params: ReposGetForUserParams,
        callback?: Callback
      ): Promise<any>,
      getForks(params: ReposGetForksParams, callback?: Callback): Promise<any>,
      getHook(params: ReposGetHookParams, callback?: Callback): Promise<any>,
      getHooks(params: ReposGetHooksParams, callback?: Callback): Promise<any>,
      getInvites(
        params: ReposGetInvitesParams,
        callback?: Callback
      ): Promise<any>,
      getLanguages(
        params: ReposGetLanguagesParams,
        callback?: Callback
      ): Promise<any>,
      getLatestPagesBuild(
        params: ReposGetLatestPagesBuildParams,
        callback?: Callback
      ): Promise<any>,
      getLatestRelease(
        params: ReposGetLatestReleaseParams,
        callback?: Callback
      ): Promise<any>,
      getPages(params: ReposGetPagesParams, callback?: Callback): Promise<any>,
      getPagesBuild(
        params: ReposGetPagesBuildParams,
        callback?: Callback
      ): Promise<any>,
      getPagesBuilds(
        params: ReposGetPagesBuildsParams,
        callback?: Callback
      ): Promise<any>,
      getPaths(params: ReposGetPathsParams, callback?: Callback): Promise<any>,
      getProtectedBranchAdminEnforcement(
        params: ReposGetProtectedBranchAdminEnforcementParams,
        callback?: Callback
      ): Promise<any>,
      getProtectedBranchPullRequestReviewEnforcement(
        params: ReposGetProtectedBranchPullRequestReviewEnforcementParams,
        callback?: Callback
      ): Promise<any>,
      getProtectedBranchRequiredSignatures(
        params: ReposGetProtectedBranchRequiredSignaturesParams,
        callback?: Callback
      ): Promise<any>,
      getProtectedBranchRequiredStatusChecks(
        params: ReposGetProtectedBranchRequiredStatusChecksParams,
        callback?: Callback
      ): Promise<any>,
      getProtectedBranchRequiredStatusChecksContexts(
        params: ReposGetProtectedBranchRequiredStatusChecksContextsParams,
        callback?: Callback
      ): Promise<any>,
      getProtectedBranchRestrictions(
        params: ReposGetProtectedBranchRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      getProtectedBranchTeamRestrictions(
        params: ReposGetProtectedBranchTeamRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      getProtectedBranchUserRestrictions(
        params: ReposGetProtectedBranchUserRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      getPublic(
        params: ReposGetPublicParams,
        callback?: Callback
      ): Promise<any>,
      getReadme(
        params: ReposGetReadmeParams,
        callback?: Callback
      ): Promise<any>,
      getReferrers(
        params: ReposGetReferrersParams,
        callback?: Callback
      ): Promise<any>,
      getRelease(
        params: ReposGetReleaseParams,
        callback?: Callback
      ): Promise<any>,
      getReleaseByTag(
        params: ReposGetReleaseByTagParams,
        callback?: Callback
      ): Promise<any>,
      getReleases(
        params: ReposGetReleasesParams,
        callback?: Callback
      ): Promise<any>,
      getShaOfCommitRef(
        params: ReposGetShaOfCommitRefParams,
        callback?: Callback
      ): Promise<any>,
      getStatsCodeFrequency(
        params: ReposGetStatsCodeFrequencyParams,
        callback?: Callback
      ): Promise<any>,
      getStatsCommitActivity(
        params: ReposGetStatsCommitActivityParams,
        callback?: Callback
      ): Promise<any>,
      getStatsContributors(
        params: ReposGetStatsContributorsParams,
        callback?: Callback
      ): Promise<any>,
      getStatsParticipation(
        params: ReposGetStatsParticipationParams,
        callback?: Callback
      ): Promise<any>,
      getStatsPunchCard(
        params: ReposGetStatsPunchCardParams,
        callback?: Callback
      ): Promise<any>,
      getStatuses(
        params: ReposGetStatusesParams,
        callback?: Callback
      ): Promise<any>,
      getTags(params: ReposGetTagsParams, callback?: Callback): Promise<any>,
      getTeams(params: ReposGetTeamsParams, callback?: Callback): Promise<any>,
      getTopics(
        params: ReposGetTopicsParams,
        callback?: Callback
      ): Promise<any>,
      getViews(params: ReposGetViewsParams, callback?: Callback): Promise<any>,
      merge(params: ReposMergeParams, callback?: Callback): Promise<any>,
      pingHook(params: ReposPingHookParams, callback?: Callback): Promise<any>,
      removeBranchProtection(
        params: ReposRemoveBranchProtectionParams,
        callback?: Callback
      ): Promise<any>,
      removeCollaborator(
        params: ReposRemoveCollaboratorParams,
        callback?: Callback
      ): Promise<any>,
      removeProtectedBranchAdminEnforcement(
        params: ReposRemoveProtectedBranchAdminEnforcementParams,
        callback?: Callback
      ): Promise<any>,
      removeProtectedBranchPullRequestReviewEnforcement(
        params: ReposRemoveProtectedBranchPullRequestReviewEnforcementParams,
        callback?: Callback
      ): Promise<any>,
      removeProtectedBranchRequiredSignatures(
        params: ReposRemoveProtectedBranchRequiredSignaturesParams,
        callback?: Callback
      ): Promise<any>,
      removeProtectedBranchRequiredStatusChecks(
        params: ReposRemoveProtectedBranchRequiredStatusChecksParams,
        callback?: Callback
      ): Promise<any>,
      removeProtectedBranchRequiredStatusChecksContexts(
        params: ReposRemoveProtectedBranchRequiredStatusChecksContextsParams,
        callback?: Callback
      ): Promise<any>,
      removeProtectedBranchRestrictions(
        params: ReposRemoveProtectedBranchRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      removeProtectedBranchTeamRestrictions(
        params: ReposRemoveProtectedBranchTeamRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      removeProtectedBranchUserRestrictions(
        params: ReposRemoveProtectedBranchUserRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      replaceProtectedBranchRequiredStatusChecksContexts(
        params: ReposReplaceProtectedBranchRequiredStatusChecksContextsParams,
        callback?: Callback
      ): Promise<any>,
      replaceProtectedBranchTeamRestrictions(
        params: ReposReplaceProtectedBranchTeamRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      replaceProtectedBranchUserRestrictions(
        params: ReposReplaceProtectedBranchUserRestrictionsParams,
        callback?: Callback
      ): Promise<any>,
      replaceTopics(
        params: ReposReplaceTopicsParams,
        callback?: Callback
      ): Promise<any>,
      requestPageBuild(
        params: ReposRequestPageBuildParams,
        callback?: Callback
      ): Promise<any>,
      reviewUserPermissionLevel(
        params: ReposReviewUserPermissionLevelParams,
        callback?: Callback
      ): Promise<any>,
      testHook(params: ReposTestHookParams, callback?: Callback): Promise<any>,
      transfer(params: ReposTransferParams, callback?: Callback): Promise<any>,
      updateBranchProtection(
        params: ReposUpdateBranchProtectionParams,
        callback?: Callback
      ): Promise<any>,
      updateCommitComment(
        params: ReposUpdateCommitCommentParams,
        callback?: Callback
      ): Promise<any>,
      updateFile(
        params: ReposUpdateFileParams,
        callback?: Callback
      ): Promise<any>,
      updateInvite(
        params: ReposUpdateInviteParams,
        callback?: Callback
      ): Promise<any>,
      updateProtectedBranchPullRequestReviewEnforcement(
        params: ReposUpdateProtectedBranchPullRequestReviewEnforcementParams,
        callback?: Callback
      ): Promise<any>,
      updateProtectedBranchRequiredStatusChecks(
        params: ReposUpdateProtectedBranchRequiredStatusChecksParams,
        callback?: Callback
      ): Promise<any>,
      uploadAsset(
        params: ReposUploadAssetParams,
        callback?: Callback
      ): Promise<any>
    };
    search: {
      code(params: SearchCodeParams, callback?: Callback): Promise<any>,
      commits(params: SearchCommitsParams, callback?: Callback): Promise<any>,
      issues(params: SearchIssuesParams, callback?: Callback): Promise<any>,
      labels(params: SearchLabelsParams, callback?: Callback): Promise<any>,
      repos(params: SearchReposParams, callback?: Callback): Promise<any>,
      topics(params: SearchTopicsParams, callback?: Callback): Promise<any>,
      users(params: SearchUsersParams, callback?: Callback): Promise<any>
    };
    users: {
      acceptRepoInvite(
        params: UsersAcceptRepoInviteParams,
        callback?: Callback
      ): Promise<any>,
      addEmails(
        params: UsersAddEmailsParams,
        callback?: Callback
      ): Promise<any>,
      addRepoToInstallation(
        params: UsersAddRepoToInstallationParams,
        callback?: Callback
      ): Promise<any>,
      blockUser(
        params: UsersBlockUserParams,
        callback?: Callback
      ): Promise<any>,
      checkBlockedUser(
        params: UsersCheckBlockedUserParams,
        callback?: Callback
      ): Promise<any>,
      checkFollowing(
        params: UsersCheckFollowingParams,
        callback?: Callback
      ): Promise<any>,
      checkIfOneFollowersOther(
        params: UsersCheckIfOneFollowersOtherParams,
        callback?: Callback
      ): Promise<any>,
      createGpgKey(
        params: UsersCreateGpgKeyParams,
        callback?: Callback
      ): Promise<any>,
      createKey(
        params: UsersCreateKeyParams,
        callback?: Callback
      ): Promise<any>,
      declineRepoInvite(
        params: UsersDeclineRepoInviteParams,
        callback?: Callback
      ): Promise<any>,
      deleteEmails(
        params: UsersDeleteEmailsParams,
        callback?: Callback
      ): Promise<any>,
      deleteGpgKey(
        params: UsersDeleteGpgKeyParams,
        callback?: Callback
      ): Promise<any>,
      deleteKey(
        params: UsersDeleteKeyParams,
        callback?: Callback
      ): Promise<any>,
      editOrgMembership(
        params: UsersEditOrgMembershipParams,
        callback?: Callback
      ): Promise<any>,
      followUser(
        params: UsersFollowUserParams,
        callback?: Callback
      ): Promise<any>,
      get(params: EmptyParams, callback?: Callback): Promise<any>,
      getAll(params: UsersGetAllParams, callback?: Callback): Promise<any>,
      getBlockedUsers(params: EmptyParams, callback?: Callback): Promise<any>,
      getContextForUser(
        params: UsersGetContextForUserParams,
        callback?: Callback
      ): Promise<any>,
      getEmails(
        params: UsersGetEmailsParams,
        callback?: Callback
      ): Promise<any>,
      getFollowers(
        params: UsersGetFollowersParams,
        callback?: Callback
      ): Promise<any>,
      getFollowersForUser(
        params: UsersGetFollowersForUserParams,
        callback?: Callback
      ): Promise<any>,
      getFollowing(
        params: UsersGetFollowingParams,
        callback?: Callback
      ): Promise<any>,
      getFollowingForUser(
        params: UsersGetFollowingForUserParams,
        callback?: Callback
      ): Promise<any>,
      getForUser(
        params: UsersGetForUserParams,
        callback?: Callback
      ): Promise<any>,
      getGpgKey(
        params: UsersGetGpgKeyParams,
        callback?: Callback
      ): Promise<any>,
      getGpgKeys(
        params: UsersGetGpgKeysParams,
        callback?: Callback
      ): Promise<any>,
      getGpgKeysForUser(
        params: UsersGetGpgKeysForUserParams,
        callback?: Callback
      ): Promise<any>,
      getInstallationRepos(
        params: UsersGetInstallationReposParams,
        callback?: Callback
      ): Promise<any>,
      getInstallations(
        params: UsersGetInstallationsParams,
        callback?: Callback
      ): Promise<any>,
      getKey(params: UsersGetKeyParams, callback?: Callback): Promise<any>,
      getKeys(params: UsersGetKeysParams, callback?: Callback): Promise<any>,
      getKeysForUser(
        params: UsersGetKeysForUserParams,
        callback?: Callback
      ): Promise<any>,
      getMarketplacePurchases(
        params: UsersGetMarketplacePurchasesParams,
        callback?: Callback
      ): Promise<any>,
      getMarketplaceStubbedPurchases(
        params: UsersGetMarketplaceStubbedPurchasesParams,
        callback?: Callback
      ): Promise<any>,
      getOrgMembership(
        params: UsersGetOrgMembershipParams,
        callback?: Callback
      ): Promise<any>,
      getOrgMemberships(
        params: UsersGetOrgMembershipsParams,
        callback?: Callback
      ): Promise<any>,
      getOrgs(params: UsersGetOrgsParams, callback?: Callback): Promise<any>,
      getPublicEmails(
        params: UsersGetPublicEmailsParams,
        callback?: Callback
      ): Promise<any>,
      getRepoInvites(
        params: UsersGetRepoInvitesParams,
        callback?: Callback
      ): Promise<any>,
      getTeams(params: UsersGetTeamsParams, callback?: Callback): Promise<any>,
      removeRepoFromInstallation(
        params: UsersRemoveRepoFromInstallationParams,
        callback?: Callback
      ): Promise<any>,
      togglePrimaryEmailVisibility(
        params: UsersTogglePrimaryEmailVisibilityParams,
        callback?: Callback
      ): Promise<any>,
      unblockUser(
        params: UsersUnblockUserParams,
        callback?: Callback
      ): Promise<any>,
      unfollowUser(
        params: UsersUnfollowUserParams,
        callback?: Callback
      ): Promise<any>,
      update(params: UsersUpdateParams, callback?: Callback): Promise<any>
    };
  }

  declare var exports: Class<Github>;
}
