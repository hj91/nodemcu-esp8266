var request = require( 'request' );
var async = require( 'async' );

var moduleInfoPath = "/module/info.json";
var adiInfoPath = "/adi/info.json";
var adiMetadataPath = "/adi/metadata.json";
var adiDataPath = "/adi/data.json";
var adiOffsetPath = "?offset=";
var adiCountPath = "&count=";

var adiListInstKey = "adi";
var adiOrderIndexKey = "adiIndex";


module.exports = function( RED ) {
   "use strict";

   function GetJson( node, auth, url, respCallback )
   {
      var opts = {
         method: "GET",
         url: url,
         timeout: 120000,
         headers: {}
      };

      if( auth )
      {
         opts.auth = auth;
      }

      request( opts, function( error, response, body )
      {
         var returnData = null;

         node.status( { } );

         if( error )
         {
            node.error( error );
            node.status( {
               fill: "red",
               shape: "ring",
               text: error.code
            } );

            returnData = { "error" : error.code, errorStr : error.toString() + ":" + url };
         }
         else
         {
            if( response.statusCode == 200 )
            {
               try
               {
                  returnData = JSON.parse( body );
               }
               catch( e )
               {
                  node.error( e );

                  returnData = { "error" : e.name, "errorStr" : e.message };
               }
            }
            else
            {
               node.warn( "HTTP status code: " + response.statusCode );

               node.status( {
                  fill: "yellow",
                  shape: "dot",
                  text: "HTTP status code: " + response.statusCode
               } );

               returnData = { "error" : "HTTP " + response.statusCode, "errorStr" : "" };
            }
         }

         respCallback( returnData );
      } );
   }

   function GetJsonModuleInfo( node, auth, ipAddress, callbackFunc )
   {
      GetJson( node,
               auth,
               "http://" + ipAddress + moduleInfoPath,
               function( returnData ){
         if( returnData.hasOwnProperty( 'error' ) )
         {
            callbackFunc( returnData, null );
         }
         else
         {
            callbackFunc( null, returnData );
         }
      } );
   }

   function GetJsonAdiInfo( node, auth, ipAddress, callbackFunc )
   {
      GetJson( node,
               auth,
               "http://" + ipAddress + adiInfoPath,
               function( returnData ){
         if( returnData.hasOwnProperty( 'error' ) )
         {
            callbackFunc( returnData, null );
         }
         else
         {
            callbackFunc( null, returnData );
         }
      } );
   }

   function GetJsonAdiMetadata( node, auth, ipAddress, numAdis, callbackFunc )
   {
      GetJson( node,
               auth,
               "http://" + ipAddress + adiMetadataPath + adiOffsetPath + "0" + adiCountPath + numAdis,
               function( returnData ){
         if( returnData.hasOwnProperty( 'error' ) )
         {
            callbackFunc( returnData, null );
         }
         else
         {
            callbackFunc( null, returnData );
         }
      } );
   }

   function GetJsonAdiData( node, auth, ipAddress, adiOffset, callbackFunc )
   {
      GetJson( node,
               auth,
               "http://" + ipAddress + adiDataPath + adiOffsetPath + adiOffset + adiCountPath + "1",
               function( returnData ){
         if( returnData.hasOwnProperty( 'error' ) )
         {
            callbackFunc( returnData, null );
         }
         else
         {
            callbackFunc( null, returnData );
         }
      } );
   }

   function GetModuleInfo( node, ipAddress, auth, module, callbackFunc )
   {
      async.parallel( {
         modInfo: function( callbackFunc ) {
            GetJsonModuleInfo( node, auth, ipAddress, function( error, moduleInfoData ){
               callbackFunc( error, moduleInfoData );
            } );
         },
         adiInfo: function( callbackFunc ) {
            GetJsonAdiInfo( node, auth, ipAddress, function( error, adiInfoData ){
               callbackFunc( error, adiInfoData );
            } );
      } },
      function( error, result ) {

         var context = node.context();

         if( error == null )
         {
            // Module info
            module.prodName = result.modInfo.modulename;
            module.serialNumber = result.modInfo.serial;
            module.fwVersion = result.modInfo.fwver;

            // Adi info
            module.dataFormat = result.adiInfo.dataformat;
            module.numAdis = result.adiInfo.numadis;

            callbackFunc( null, module, module.numAdis );
         }
         else
         {
            callbackFunc( error );
         }
      } );
   }

   function GetAdiMetadata( node, ipAddress, auth, module, numAdis, adiNoList, callbackFunc )
   {
      var context = node.context(),
          adiNoIndex,
          adiOffsets = {},
          adiIndex;

      GetJsonAdiMetadata( node, auth, ipAddress, numAdis, function( error, adiMetadataArray ) {
         var adiInst;

         if( error == null )
         {
            for( adiIndex = 0; adiIndex < adiMetadataArray.length; adiIndex += 1 )
            {
               adiInst = adiMetadataArray[ adiIndex ];

               if( typeof adiInst === "object" && adiInst.hasOwnProperty( "instance" ) )
               {
                  for( adiNoIndex = 0; adiNoIndex < adiNoList.length; adiNoIndex += 1 )
                  {
                     if( adiInst.instance == adiNoList[ adiNoIndex ] )
                     {
                        module.adiList[ adiListInstKey + adiInst.instance ] = {};
                        module.adiList[ adiListInstKey + adiInst.instance ].instance = adiInst.instance;
                        module.adiList[ adiListInstKey + adiInst.instance ].name = adiInst.name;
                        module.adiList[ adiListInstKey + adiInst.instance ].numElements = adiInst.numelements;
                        module.adiList[ adiListInstKey + adiInst.instance ].dataType = adiInst.datatype;
                        module.adiList[ adiListInstKey + adiInst.instance ].minValue = adiInst.min;
                        module.adiList[ adiListInstKey + adiInst.instance ].maxValue = adiInst.max;
                        module.adiList[ adiListInstKey + adiInst.instance ].access = adiInst.access;
                        adiOffsets[ adiListInstKey + adiInst.instance ] = adiIndex;

                        break;
                     }
                  }
               }
            }

            callbackFunc( null, module, adiOffsets );
         }
         else
         {
            callbackFunc( error );
         }
      } );
   }

   function GetAdiData( node, ipAddress, auth, module, adiOffsets, callbackFunc )
   {
      var funcArray = {},
          adiInst;

      for( adiInst in adiOffsets )
      {
         funcArray[ adiInst ] = ( function( adiInst ) {
            return function( callbackFunc ) {
               GetJsonAdiData( node, auth, ipAddress, adiOffsets[ adiInst ], function( error, adiData ) {
                  callbackFunc( error, adiData );
               } );
            };
         } )( adiInst );
      }

      async.parallel( funcArray,
         function( error, result ) {
            var adiInst;

            if( error == null )
            {
               for( adiInst in adiOffsets )
               {
                  module.adiList[ adiInst ].value = result[ adiInst ];
               }

               callbackFunc( null, module, adiOffsets );
            }
            else
            {
               callbackFunc( error );
            }
         } );
   }

   function GetAnybusModuleData( node, ipAddress, auth, module, adiNoList, adiOffsets, callbackFunc )
   {
      async.waterfall( [
         function( callbackFunc ) {

            if( module.hasOwnProperty( 'name' ) )
            {
               // Module data loaded from the node's context, continue.
               callbackFunc( null, module, module.numAdis );
            }
            else
            {
               GetModuleInfo( node, ipAddress, auth, module, callbackFunc );
            }
         },
         function( module, numAdis, callbackFunc ) {

            if( module.hasOwnProperty( "adiList" ) )
            {
               // ADI list was populated with data from the node's context, continue.
               callbackFunc( null, module, adiOffsets );
            }
            else
            {
               module.adiList = {};
               GetAdiMetadata( node, ipAddress, auth, module, numAdis, adiNoList, callbackFunc );
            }
         },
         function( module, adiOffsets, callbackFunc ) {
            GetAdiData( node, ipAddress, auth, module, adiOffsets, callbackFunc );
         } ],
         function( error, result, adiOffsets ) {

            if( error == null )
            {
               callbackFunc( result, adiOffsets );
            }
            else
            {
               callbackFunc( error );
            }
         } );
   }

   function CompactCom40RestRead( config )
   {
      RED.nodes.createNode( this, config );

      var node = this,
          compactCom40Module = RED.nodes.getNode( config.compactCom40Module ),
          nodeAdiList = config.adiList,
          nodeIpAddr = null,
          nodeAuth = null;

      if( compactCom40Module )
      {
         nodeIpAddr = compactCom40Module.ipAddress;
         nodeAuth = compactCom40Module.auth;
      }

      this.on( 'input', function( msg ) {

         var ipAddr = nodeIpAddr || msg.ip,
             storedIpAddr,
             context = node.context(),
             adiNoIndex,
             adiNoList,
             adiOffsets = {},
             storedAdiList = {},
             adiContext,
             module;

         if( !ipAddr )
         {
            return node.error( "No IP address set", msg );
         }

         if( nodeAdiList )
         {
            if( !/^([0-9]+,?\s*)*$/.test( nodeAdiList ) )
            {
               return node.error( "Invalid ADI list in config" );
            }
            else
            {
               adiNoList = nodeAdiList.split( ',' ).map( Number );
            }
         }
         else
         {
            adiNoList = msg.adiList || [];
         }

         storedIpAddr = context.get( 'ipAddress' ) || null;
         module = context.get( 'moduleInfo' ) || null;

         if( storedIpAddr == null || storedIpAddr !== ipAddr || module == null )
         {
            // New IP address or no module data stored in the node's context
            module = { };
         }
         else
         {
            // Look into the node's context for the metadata of the ADIs
            for( adiNoIndex = 0; adiNoIndex < adiNoList.length; adiNoIndex += 1 )
            {
               adiContext = context.get( adiListInstKey + adiNoList[ adiNoIndex ] );

               if( adiContext == null )
               {
                  // At least one ADI is not found, reload all ADIs
                  break;
               }
               else
               {
                  adiOffsets[ adiListInstKey + adiNoList[ adiNoIndex ] ] = context.get( adiOrderIndexKey + adiNoList[ adiNoIndex ] );
                  storedAdiList[ adiListInstKey + adiNoList[ adiNoIndex ] ] = adiContext;
               }
            }

            if( adiNoIndex == adiNoList.length )
            {
               // All instances were found, use this list.
               module.adiList = storedAdiList;
            }
         }

         GetAnybusModuleData( node, ipAddr, nodeAuth, module, adiNoList, adiOffsets, function( moduleData, adiOffsets ) {

            var adiInst,
                msg;

            if( !moduleData.hasOwnProperty( "error" ) )
            {
               context.set( 'moduleInfo', { prodName : moduleData.prodName,
                                            ipAddress : ipAddr,
                                            serialNumber : moduleData.serialNumber,
                                            fwVersion : moduleData.fwVersion,
                                            dataFormat : moduleData.dataFormat,
                                            numAdis : moduleData.numAdis } );

               for( adiInst in moduleData.adiList )
               {
                  context.set( adiInst, { instance : moduleData.adiList[ adiInst ].instance,
                                          name : moduleData.adiList[ adiInst ].name,
                                          numElements : moduleData.adiList[ adiInst ].numElements,
                                          dataType : moduleData.adiList[ adiInst ].dataType,
                                          minValue : moduleData.adiList[ adiInst ].minValue,
                                          maxValue : moduleData.adiList[ adiInst ].maxValue,
                                          access : moduleData.adiList[ adiInst ].access } );

                  context.set( adiOrderIndexKey + moduleData.adiList[ adiInst ].instance, adiOffsets[ adiInst ] );
               }

               context.set( 'ipAddress', ipAddr );
            }

            moduleData.ipAddress = ipAddr;

            msg = { payload : moduleData };
            node.send( msg );
         } );
      } );
   }

   RED.nodes.registerType( "compactcom-40-rest-read", CompactCom40RestRead );
}
