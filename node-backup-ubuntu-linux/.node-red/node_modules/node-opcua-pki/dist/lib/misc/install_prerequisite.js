"use strict";
// ---------------------------------------------------------------------------------------------------------------------
// node-opcua
// ---------------------------------------------------------------------------------------------------------------------
// Copyright (c) 2014-2018 - Etienne Rossignon - etienne.rossignon (at) gadz.org
// ---------------------------------------------------------------------------------------------------------------------
//
// This  project is licensed under the terms of the MIT license.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
// documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so,  subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
// Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// ---------------------------------------------------------------------------------------------------------------------
// tslint:disable:no-console
// tslint:disable:no-shadowed-variable
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const byline = require("byline");
const chalk_1 = require("chalk");
const child_process = require("child_process");
const fs = require("fs");
const os = require("os");
const path = require("path");
const ProgressBar = require("progress");
const _ = require("underscore");
const yauzl = require("yauzl");
const Table = require("cli-table");
// tslint:disable-next-line:no-var-requires
const wget = require("wget-improved");
function execute(cmd, callback, cwd) {
    let output = "";
    // xx cwd = cwd ? {cwd: cwd} : {};
    const options = {};
    if (cwd) {
        options.cwd = cwd;
    }
    const child = child_process.exec(cmd, options, (err /*, stdout: string, stderr: string*/) => {
        const exitCode = err === null ? 0 : err.code;
        callback(err ? err : null, { exitCode, output });
    });
    const stream1 = byline(child.stdout);
    stream1.on("data", (line) => {
        output += line + "\n";
        process.stdout.write("        stdout " + chalk_1.default.yellow(line) + "\n");
    });
}
function quote(str) {
    return "\"" + str.replace(/\\/g, "/") + "\"";
}
function is_expected_openssl_version(strVersion) {
    return !!strVersion.match(/OpenSSL 1.0./);
}
function check_system_openssl_version(callback) {
    execute("which openssl", (err, result) => {
        if (err) {
            console.log("warning: ", err.message);
            return callback(new Error("Cannot find openssl"));
        }
        const exitCode = result.exitCode;
        const output = result.output;
        if (exitCode !== 0) {
            console.log(chalk_1.default.yellow(" it seems that ") +
                chalk_1.default.cyan("openssl") +
                chalk_1.default.yellow(" is not installed on your computer "));
            console.log(chalk_1.default.yellow("Please install it before running this programs"));
            return callback(new Error("Cannot find openssl"));
        }
        const opensslExecPath = output.replace(/\n\r/g, "").trim();
        // tslint:disable-next-line:variable-name
        const q_opensslExecPath = quote(opensslExecPath);
        console.log("              OpenSSL found in : " + chalk_1.default.yellow(opensslExecPath));
        // ------------------------ now verify that openssl version is the correct one
        execute(q_opensslExecPath + " version", (err, result) => {
            if (err) {
                return callback(err);
            }
            const exitCode = result.exitCode;
            const output = result.output;
            const version = output.trim();
            const versionOK = (exitCode === 0) && is_expected_openssl_version(version);
            if (!versionOK) {
                let message = chalk_1.default.whiteBright("Warning !!!!!!!!!!!! ") +
                    "\nyour version of openssl doesn't match the expected version";
                if (process.platform === "darwin") {
                    message += chalk_1.default.cyan("\nplease refer to :") +
                        chalk_1.default.yellow(" https://github.com/node-opcua/node-opcua/" +
                            "wiki/installing-node-opcua-or-node-red-on-MacOS");
                }
                const table = new Table();
                table.push([message]);
                console.error(table.toString());
            }
            return callback(null, output);
        });
    });
}
exports.check_system_openssl_version = check_system_openssl_version;
function install_and_check_win32_openssl_version(callback) {
    const downloadFolder = path.join(os.tmpdir(), ".");
    function get_openssl_folder_win32() {
        if (process.env.LOCALAPPDATA) {
            const userProgramFolder = path.join(process.env.LOCALAPPDATA, "Programs");
            if (fs.existsSync(userProgramFolder)) {
                return path.join(userProgramFolder, "openssl");
            }
        }
        return path.join(process.cwd(), "openssl");
    }
    function get_openssl_exec_path_win32() {
        const opensslFolder = get_openssl_folder_win32();
        return path.join(opensslFolder, "openssl.exe");
    }
    function check_openssl_win32(callback) {
        const opensslExecPath = get_openssl_exec_path_win32();
        console.log("checking presence of ", opensslExecPath);
        fs.exists(opensslExecPath, (exists) => {
            if (!exists) {
                console.log(chalk_1.default.red(" cannot find file ") + opensslExecPath);
                return callback(null, false, "cannot find file " + opensslExecPath);
            }
            else {
                // tslint:disable-next-line:variable-name
                const q_openssl_exe_path = quote(opensslExecPath);
                const cwd = ".";
                execute(q_openssl_exe_path + " version", (err, result) => {
                    if (err) {
                        return callback(err);
                    }
                    const exitCode = result.exitCode;
                    const output = result.output;
                    const version = output.trim();
                    console.log(" Version = ", version);
                    callback(null, (exitCode === 0) && is_expected_openssl_version(version), version);
                }, cwd);
            }
        });
    }
    /**
     * detect whether windows OS is a 64 bits or 32 bits
     * http://ss64.com/nt/syntax-64bit.html
     * http://blogs.msdn.com/b/david.wang/archive/2006/03/26/howto-detect-process-bitness.aspx
     * @return {number}
     */
    function win32or64() {
        if (process.env.PROCESSOR_ARCHITECTURE === "x86" && process.env.PROCESSOR_ARCHITEW6432) {
            return 64;
        }
        if (process.env.PROCESSOR_ARCHITECTURE === "AMD64") {
            return 64;
        }
        // check if we are running node  x32 on a x64 arch
        if (process.env.CURRENT_CPU === "x64") {
            return 64;
        }
        return 32;
    }
    function download_openssl(callback) {
        // const url = (win32or64() === 64 )
        //         ? "http://indy.fulgan.com/SSL/openssl-1.0.2o-x64_86-win64.zip"
        //         : "http://indy.fulgan.com/SSL/openssl-1.0.2o-i386-win32.zip"
        //     ;
        const url = (win32or64() === 64)
            ? "https://github.com/node-opcua/node-opcua-pki/files/1886617/openssl-1.0.2o-x64_86-win64.zip"
            : "https://github.com/node-opcua/node-opcua-pki/files/1886617/openssl-1.0.2o-i386-win32.zip";
        // the zip file
        const outputFilename = path.join(downloadFolder, path.basename(url));
        console.log("downloading " + chalk_1.default.yellow(url));
        if (fs.existsSync(outputFilename)) {
            return callback(null, outputFilename);
        }
        const options = {};
        const bar = new ProgressBar(chalk_1.default.cyan("[:bar]") + chalk_1.default.cyan(" :percent ") + chalk_1.default.white(":etas"), {
            complete: "=",
            incomplete: " ",
            total: 100,
            width: 100,
        });
        const download = wget.download(url, outputFilename, options);
        download.on("error", (err) => {
            console.log(err);
        });
        download.on("end", (output) => {
            console.log(output);
            // console.log("done ...");
            setImmediate(() => {
                callback(null, outputFilename);
            });
        });
        download.on("progress", (progress) => {
            bar.update(progress);
        });
    }
    function unzip_openssl(zipFilename, callback) {
        const opensslFolder = get_openssl_folder_win32();
        yauzl.open(zipFilename, { lazyEntries: true }, (err, zipFile) => {
            if (err) {
                return callback(err);
            }
            if (!zipFile) {
                return callback(new Error("Internal error"));
            }
            zipFile.readEntry();
            zipFile.on("end", (err) => {
                setImmediate(() => {
                    console.log("unzip done");
                    callback(err);
                });
            });
            zipFile.on("entry", (entry) => {
                zipFile.openReadStream(entry, (err, readStream) => {
                    if (err) {
                        return callback(err);
                    }
                    const file = path.join(opensslFolder, entry.fileName);
                    console.log(" unzipping :", file);
                    const writeStream = fs.createWriteStream(file, "binary");
                    // ensure parent directory exists
                    readStream.pipe(writeStream);
                    writeStream.on("close", () => {
                        zipFile.readEntry();
                    });
                });
            });
        });
    }
    const opensslFolder = get_openssl_folder_win32();
    const opensslExecPath = get_openssl_exec_path_win32();
    if (!fs.existsSync(opensslFolder)) {
        console.log("creating openssl_folder", opensslFolder);
        fs.mkdirSync(opensslFolder);
    }
    check_openssl_win32((err, opensslOK) => {
        if (err) {
            return callback(err);
        }
        if (!opensslOK) {
            console.log(chalk_1.default.yellow("openssl seems to be missing and need to be installed"));
            download_openssl((err, filename) => {
                if (err) {
                    return callback(err);
                }
                console.log("deflating ", chalk_1.default.yellow(filename));
                unzip_openssl(filename, (err) => {
                    if (err) {
                        return callback(err);
                    }
                    const opensslExists = !!fs.existsSync(opensslExecPath);
                    console.log("verifying ", opensslExists, opensslExists ? chalk_1.default.green("OK ") : chalk_1.default.red(" Error"), opensslExecPath);
                    console.log("done ", err ? err : "");
                    check_openssl_win32((err) => {
                        callback(err, opensslExecPath);
                    });
                });
            });
        }
        else {
            console.log(chalk_1.default.green("openssl is already installed and have the expected version."));
            return callback(null, opensslExecPath);
        }
    });
}
/**
 *
 * @param callback    {Function}
 * @param callback.err {Error|null}
 * @param callback.pathToOpenSSL {string}
 */
function install_prerequisite(callback) {
    // istanbul ignore else
    if (process.platform !== "win32") {
        return check_system_openssl_version(callback);
    }
    else {
        return install_and_check_win32_openssl_version(callback);
    }
}
exports.install_prerequisite = install_prerequisite;
function get_openssl_exec_path(callback) {
    assert(_.isFunction(callback));
    if (process.platform === "win32") {
        install_prerequisite((err, opensslExecPath) => {
            if (err) {
                return callback(err);
            }
            if (!fs.existsSync(opensslExecPath)) {
                throw new Error("internal error cannot find " + opensslExecPath);
            }
            callback(err, opensslExecPath);
        });
    }
    else {
        setImmediate(() => {
            callback(null, "openssl");
        });
    }
}
exports.get_openssl_exec_path = get_openssl_exec_path;
//# sourceMappingURL=install_prerequisite.js.map