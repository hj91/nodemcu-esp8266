// --------- This code has been automatically generated !!! 2018-09-03T20:28:07.570Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/MdnsDiscoveryConfiguration_schema").MdnsDiscoveryConfiguration_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * mDNS discovery configuration.
 * 
 * @class MdnsDiscoveryConfiguration
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function MdnsDiscoveryConfiguration(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        return ;
    }

    /**
      * The name of the Server when it is announced via mDNS. See Part 12 for
the details about mDNS.
This string shall be less than 64 bytes.
      * @property mdnsServerName
      * @type {String}
      */
    self.mdnsServerName = initialize_field(schema.fields[0], options.mdnsServerName);

    /**
      * The set of server capabilities supported by the Server.
A server capability is a short identifier for a feature
The set of allowed server capabilities are defined in Part 12.
      * @property serverCapabilities
      * @type {String[]}
      */
    self.serverCapabilities = initialize_field_array(schema.fields[1], options.serverCapabilities);

   // Object.preventExtensions(self);
}
util.inherits(MdnsDiscoveryConfiguration,BaseUAObject);
MdnsDiscoveryConfiguration.prototype.encodingDefaultBinary = makeExpandedNodeId(12901,0);
MdnsDiscoveryConfiguration.prototype.encodingDefaultXml = makeExpandedNodeId(12893,0);
MdnsDiscoveryConfiguration.prototype._schema = schema;

const encode_String = _defaultTypeMap.String.encode;
const decode_String = _defaultTypeMap.String.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
MdnsDiscoveryConfiguration.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_String(this.mdnsServerName,stream);
    encodeArray(this.serverCapabilities, stream, encode_String);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
MdnsDiscoveryConfiguration.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.mdnsServerName = decode_String(stream);
    this.serverCapabilities = decodeArray(stream, decode_String);
};
MdnsDiscoveryConfiguration.possibleFields = [
  "mdnsServerName",
         "serverCapabilities"
];


exports.MdnsDiscoveryConfiguration = MdnsDiscoveryConfiguration;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("MdnsDiscoveryConfiguration",MdnsDiscoveryConfiguration);
