"use strict";module.exports=function(r){var i=require("./core/bacnet-core"),u=require("@biancoroyal/bacstack"),y=require("underscore");r.nodes.registerType("BACnet-Write",function(e){r.nodes.createNode(this,e),this.name=e.name,this.objectType=parseInt(e.objectType),this.valueTag=parseInt(e.valueTag),this.valueValue=e.valueValue,this.propertyId=parseInt(e.propertyId),this.priority=parseInt(e.priority)||15,this.multipleWrite=e.multipleWrite,this.instance=r.nodes.getNode(e.instance),this.objectInstance=this.instance.instanceAddress||0,this.device=r.nodes.getNode(e.device),this.deviceIPAddress=this.device.deviceAddress||"127.0.0.1",this.connector=r.nodes.getNode(e.server);var n=this;n.status({fill:"green",shape:"dot",text:"active"}),n.on("input",function(a){if(n.connector){var e=a.payload.options||{};if(n.multipleWrite){if(i.internalDebugLog("Multiple Write"),!a.payload.values||!a.payload.values[0].values)return void n.error(new Error("msg.payload.values missing or invalid array for multiple write"),a);a.payload.values.forEach(function(e){e.objectId||(e.objectId={type:n.objectType,instance:parseInt(n.objectInstance)})});try{i.internalDebugLog("writePropertyMultiple msg.payload.values: "+JSON.stringify(a.payload.values))}catch(e){i.internalDebugLog("writePropertyMultiple error: "+e)}n.connector.client.writePropertyMultiple(a.payload.deviceIPAddress||n.deviceIPAddress,a.payload.values,e,function(e,r){if(e){var t=i.translateErrorMessage(e);i.internalDebugLog(t),n.error(t,a)}else a.input=a.payload,a.payload=r,n.send(a)})}else{if(i.internalDebugLog("Write"),a.payload.values&&!a.payload.values[0])return void n.error(new Error("invalid msg.payload.values array for write"),a);var r={type:n.objectType,instance:parseInt(n.objectInstance)},t=[{type:n.valueTag,value:n.valueValue}];try{i.internalDebugLog("readProperty default objectId: "+JSON.stringify(r)),i.internalDebugLog("writeProperty default values: "+JSON.stringify(t)),i.internalDebugLog("writeProperty msg.payload.values: "+JSON.stringify(a.payload.values)),i.internalDebugLog("writeProperty node.propertyId: "+n.propertyId)}catch(e){i.internalDebugLog("writeProperty error: "+e)}n.connector.client.writeProperty(a.payload.deviceIPAddress||n.deviceIPAddress,a.payload.objectId||r,a.payload.propertyId||n.propertyId,a.payload.values||t,e,function(e,r){if(e){var t=i.translateErrorMessage(e);i.internalDebugLog(t),n.error(t,a)}else a.input=a.payload,a.payload=r,n.send(a)})}}else n.error(new Error("Client Not Ready To Write"),a)})}),r.httpAdmin.get("/bacnet/ApplicationTags",r.auth.needsPermission("bacnet.CMD.read"),function(e,r){var t=u.enum.ApplicationTags,a=y.toArray(y.invert(t)),n=[],i=void 0,o=!0,l=!1,s=void 0;try{for(var d,p=a[Symbol.iterator]();!(o=(d=p.next()).done);o=!0)i=d.value,n.push({typeValue:t[i],label:i})}catch(e){l=!0,s=e}finally{try{!o&&p.return&&p.return()}finally{if(l)throw s}}r.json(n)}),r.httpAdmin.get("/bacnet/PropertyIds",r.auth.needsPermission("bacnet.CMD.read"),function(e,r){var t=u.enum.PropertyIdentifier,a=y.toArray(y.invert(t)),n=[],i=void 0,o=!0,l=!1,s=void 0;try{for(var d,p=a[Symbol.iterator]();!(o=(d=p.next()).done);o=!0)i=d.value,n.push({typeValue:t[i],label:i})}catch(e){l=!0,s=e}finally{try{!o&&p.return&&p.return()}finally{if(l)throw s}}r.json(n)}),r.httpAdmin.get("/bacnet/ObjectTypes",r.auth.needsPermission("bacnet.CMD.read"),function(e,r){var t=u.enum.ObjectType,a=y.toArray(y.invert(t)),n=[],i=void 0,o=!0,l=!1,s=void 0;try{for(var d,p=a[Symbol.iterator]();!(o=(d=p.next()).done);o=!0)i=d.value,n.push({typeValue:t[i],label:i})}catch(e){l=!0,s=e}finally{try{!o&&p.return&&p.return()}finally{if(l)throw s}}r.json(n)})};
//# sourceMappingURL=maps/bacnet-write.js.map
