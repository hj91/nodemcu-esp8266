{"version":3,"sources":["bacnet-client.js"],"names":["module","exports","RED","bacnetCore","require","BACnet","nodes","registerType","config","createNode","this","name","adpuTimeout","port","IPAddress","broadcastAddress","node","devices","internalDebugLog","client","interface","on","device","push","address","deviceId","maxAdpu","segmentation","vendorId","whoIs","err","error","payload","close","msg","send","done","whoIsExplicit","lowLimit","highLimit","deviceIPAddress","cb","options","setTimeout"],"mappings":"AAOA,aAEAA,OAAOC,QAAU,SAAUC,GACzB,IAAIC,EAAaC,QAAQ,sBACrBC,EAASD,QAAQ,yBA8ErBF,EAAII,MAAMC,aAAa,gBA5EvB,SAAuBC,GACrBN,EAAII,MAAMG,WAAWC,KAAMF,GAC3BE,KAAKC,KAAOH,EAAOG,KACnBD,KAAKE,YAAcJ,EAAOI,aAAe,IACzCF,KAAKG,KAAOL,EAAOK,MAAQ,MAC3BH,KAAKI,UAAYN,EAAOM,WAAa,KACrCJ,KAAKK,iBAAmBP,EAAOO,kBAAoB,KAEnD,IAAIC,EAAON,KACXM,EAAKC,QAAU,GAEXD,EAAKF,WACPX,EAAWe,iBAAiB,2BAC5BF,EAAKG,OAAS,IAAId,EAAO,CAAAO,YAACA,EAAaI,YAAdH,KAAgCA,EAAMG,KAAtCI,UAAiDA,EAAWJ,UAA5DD,iBAA4EA,EAAkBC,qBAEvHb,EAAWe,iBAAiB,8BAC5BF,EAAKG,OAAS,IAAId,EAAO,CAAAO,YAACA,EAAaI,YAAdH,KAAgCA,EAAMG,QAG7DA,EAAKG,SACPH,EAAKG,OAAOE,GAAG,MAAO,SAAAC,GACpBN,EAAKC,QAAQM,KAAKD,GAClBnB,EAAWe,iBAAiB,aAC5Bf,EAAWe,iBAAiB,YAAaI,EAAOE,SAChDrB,EAAWe,iBAAiB,aAAcI,EAAOG,UACjDtB,EAAWe,iBAAiB,YAAaI,EAAOI,SAChDvB,EAAWe,iBAAiB,iBAAkBI,EAAOK,cACrDxB,EAAWe,iBAAiB,aAAcI,EAAOM,YAGnDZ,EAAKG,OAAOE,GAAG,UAAW,WACxBlB,EAAWe,iBAAiB,aAG9BF,EAAKG,OAAOU,QAEZb,EAAKG,OAAOE,GAAG,QAAS,SAAUS,GAChCd,EAAKe,MAAMD,EAAK,CAAAE,QAACA,wBACjBhB,EAAKG,OAAOc,QACZjB,EAAKG,OAAS,KACdH,EAAKC,QAAU,GACfD,EAAKG,OAAS,IAAId,EAAO,CAAAO,YAACA,EAAaI,YAAdH,KAAgCA,EAAMG,KAAtCI,UAAiDA,EAAWJ,UAA5DD,iBAA4EA,EAAkBC,sBAI3HA,EAAKK,GAAG,QAAS,SAAUa,GACzBA,EAAIjB,QAAUD,EAAKC,QACnBD,EAAKmB,KAAKD,KAGZlB,EAAKK,GAAG,QAAS,SAAUe,GACrBpB,EAAKG,SACPH,EAAKG,OAAOc,QACZjB,EAAKG,OAAS,MAEhBiB,MAGFpB,EAAKqB,cAAgB,SAAUC,EAAUC,EAAWC,EAAiBC,GACnEzB,EAAKC,QAAU,GACf,IAAIyB,EAAU,CACZJ,SAAUA,EACVC,UAAWA,EACXC,gBAAiBA,GAEnBxB,EAAKG,OAAOU,MAAMa,GAClBC,WAAWF,EAAI,MAGjBzB,EAAKa,MAAQ,SAAUY,GACrBzB,EAAKC,QAAU,GACfD,EAAKG,OAAOU,QACZc,WAAWF,EAAI","file":"../bacnet-client.js","sourcesContent":["/*\n The MIT License\n\n Copyright (c) 2017 - Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-bacnet\n */\n'use strict'\n\nmodule.exports = function (RED) {\n  let bacnetCore = require('./core/bacnet-core')\n  let BACnet = require('@biancoroyal/bacstack')\n\n  function BACnetClient (config) {\n    RED.nodes.createNode(this, config)\n    this.name = config.name\n    this.adpuTimeout = config.adpuTimeout || 6000\n    this.port = config.port || 47808\n    this.IPAddress = config.IPAddress || null\n    this.broadcastAddress = config.broadcastAddress || null\n\n    let node = this\n    node.devices = []\n\n    if (node.IPAddress) {\n      bacnetCore.internalDebugLog('client with IP settings')\n      node.client = new BACnet({adpuTimeout: node.adpuTimeout, port: node.port, interface: node.IPAddress, broadcastAddress: node.broadcastAddress})\n    } else {\n      bacnetCore.internalDebugLog('client without IP settings')\n      node.client = new BACnet({adpuTimeout: node.adpuTimeout, port: node.port})\n    }\n\n    if (node.client) {\n      node.client.on('iAm', (device) => {\n        node.devices.push(device)\n        bacnetCore.internalDebugLog('iAm Event')\n        bacnetCore.internalDebugLog('address: ', device.address)\n        bacnetCore.internalDebugLog('deviceId: ', device.deviceId)\n        bacnetCore.internalDebugLog('maxAdpu: ', device.maxAdpu)\n        bacnetCore.internalDebugLog('segmentation: ', device.segmentation)\n        bacnetCore.internalDebugLog('vendorId: ', device.vendorId)\n      })\n\n      node.client.on('timeout', function () {\n        bacnetCore.internalDebugLog('timeout')\n      })\n\n      node.client.whoIs()\n\n      node.client.on('error', function (err) {\n        node.error(err, {payload: 'BACnet Client Error'})\n        node.client.close()\n        node.client = null\n        node.devices = []\n        node.client = new BACnet({adpuTimeout: node.adpuTimeout, port: node.port, interface: node.IPAddress, broadcastAddress: node.broadcastAddress})\n      })\n    }\n\n    node.on('input', function (msg) {\n      msg.devices = node.devices\n      node.send(msg)\n    })\n\n    node.on('close', function (done) {\n      if (node.client) {\n        node.client.close()\n        node.client = null\n      }\n      done()\n    })\n\n    node.whoIsExplicit = function (lowLimit, highLimit, deviceIPAddress, cb) {\n      node.devices = []\n      let options = {\n        lowLimit: lowLimit,\n        highLimit: highLimit,\n        deviceIPAddress: deviceIPAddress\n      }\n      node.client.whoIs(options)\n      setTimeout(cb, 3000)\n    }\n\n    node.whoIs = function (cb) {\n      node.devices = []\n      node.client.whoIs()\n      setTimeout(cb, 3000)\n    }\n  }\n\n  RED.nodes.registerType('BACnet-Client', BACnetClient)\n}\n"]}