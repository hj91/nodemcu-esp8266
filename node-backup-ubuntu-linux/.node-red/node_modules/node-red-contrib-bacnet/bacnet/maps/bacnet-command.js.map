{"version":3,"sources":["bacnet-command.js"],"names":["module","exports","RED","bacnetCore","require","BACnet","_","nodes","registerType","config","createNode","this","name","commandType","timeDuration","enableDisable","enum","EnableDisable","ENABLE","deviceState","ReinitializedState","COLDSTART","isUtc","lowLimit","highLimit","credentials","device","getNode","deviceIPAddress","deviceAddress","connector","server","node","status","fill","shape","text","on","msg","error","Error","internalDebugLog","payload","options","password","maxSegments","MaxSegmentsAccepted","SEGMENTS_65","maxAdpu","MaxApduLengthAccepted","OCTETS_1476","invokeId","client","deviceCommunicationControl","err","translatedError","value","input","translateErrorMessage","reinitializeDevice","timeSyncUTC","send","syncDateTime","Date","timeSync","whoIs","whoIsExplicit","devices","httpAdmin","get","typeList","invertedTypeList","typelistEntry","auth","needsPermission","req","res","toArray","invert","resultTypeList","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","push","typeValue","label","return","json","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2"],"mappings":"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","file":"../bacnet-command.js","sourcesContent":["/*\n The MIT License\n\n Copyright (c) 2017 - Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-bacnet\n */\n'use strict'\n\nmodule.exports = function (RED) {\n  let bacnetCore = require('./core/bacnet-core')\n  let BACnet = require('@biancoroyal/bacstack')\n  let _ = require('underscore')\n\n  function BACnetCommand (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.commandType = config.commandType\n    this.timeDuration = config.timeDuration || 0\n    this.enableDisable = config.enableDisable || BACnet.enum.EnableDisable.ENABLE\n    this.deviceState = config.deviceState || BACnet.enum.ReinitializedState.COLDSTART\n    this.isUtc = config.isUtc || true\n    this.lowLimit = config.lowLimit || null\n    this.highLimit = config.highLimit || null\n    this.credentials = config.credentials\n\n    this.device = RED.nodes.getNode(config.device)\n    this.deviceIPAddress = this.device.deviceAddress || '127.0.0.1'\n\n    this.connector = RED.nodes.getNode(config.server)\n\n    let node = this\n\n    node.status({fill: 'green', shape: 'dot', text: 'active'})\n\n    node.on('input', function (msg) {\n      if (!node.connector) {\n        node.error(new Error('Client Not Ready To Read'), msg)\n      }\n\n      bacnetCore.internalDebugLog('Command')\n\n      let commandType = msg.payload.commandType || node.commandType\n      let options = msg.payload.options || null\n\n      if (!options) {\n        options = {\n          maxSegments: BACnet.enum.MaxSegmentsAccepted.SEGMENTS_65,\n          maxAdpu: BACnet.enum.MaxApduLengthAccepted.OCTETS_1476,\n          invokeId: null,\n          password: (node.credentials) ? node.credentials.password : null\n        }\n      } else {\n        if (!msg.payload.options.password) {\n          msg.payload.options.password = node.credentials.password\n        }\n      }\n\n      switch (commandType) {\n        case 'deviceCommunicationControl':\n          node.connector.client.deviceCommunicationControl(\n            msg.payload.deviceIPAddress || node.deviceIPAddress,\n            msg.payload.timeDuration || node.timeDuration,\n            msg.payload.enableDisable || node.enableDisable,\n            options,\n            function (err, value) {\n              if (err) {\n                let translatedError = bacnetCore.translateErrorMessage(err)\n                bacnetCore.internalDebugLog(translatedError)\n                node.error(translatedError, msg)\n              } else {\n                bacnetCore.internalDebugLog('value: ', value)\n                msg.input = msg.payload\n                msg.payload = value\n              }\n            })\n          break\n\n        case 'reinitializeDevice':\n          node.connector.client.reinitializeDevice(\n            msg.payload.deviceIPAddress || node.deviceIPAddress,\n            msg.payload.deviceState || node.deviceState,\n            options,\n            function (err, value) {\n              if (err) {\n                let translatedError = bacnetCore.translateErrorMessage(err)\n                bacnetCore.internalDebugLog(translatedError)\n                node.error(translatedError, msg)\n              } else {\n                bacnetCore.internalDebugLog('value: ', value)\n                msg.input = msg.payload\n                msg.payload = value\n              }\n            })\n          break\n\n        case 'timeSync':\n          if (msg.payload.isUtc || node.isUtc) {\n            node.connector.client.timeSyncUTC(\n              msg.payload.deviceIPAddress || node.deviceIPAddress,\n              msg.payload.syncDateTime || new Date())\n          } else {\n            node.connector.client.timeSync(\n              msg.payload.deviceIPAddress || node.deviceIPAddress,\n              msg.payload.syncDateTime || new Date())\n          }\n          break\n\n        case 'whoIsExplicit':\n          node.connector.whoIsExplicit(\n            msg.payload.lowLimit || node.lowLimit,\n            msg.payload.highLimit || node.highLimit,\n            msg.payload.deviceIPAddress || node.deviceIPAddress,\n            function () {\n              msg.input = msg.payload\n              msg.payload = node.connector.devices\n              node.send(msg)\n            })\n          break\n\n        case 'whoIs':\n          node.connector.whoIs(\n          function () {\n            msg.input = msg.payload\n            msg.payload = node.connector.devices\n            node.send(msg)\n          })\n          break\n\n        default:\n          bacnetCore.internalDebugLog('Unknown Command Type Selected ' + commandType)\n      }\n\n      msg.devices = node.connector.devices\n\n      node.send(msg)\n    })\n  }\n\n  RED.nodes.registerType('BACnet-Command', BACnetCommand)\n\n  RED.httpAdmin.get('/bacnet/BacnetEnableDisable', RED.auth.needsPermission('bacnet.CMD.read'), function (req, res) {\n    let typeList = BACnet.enum.EnableDisable\n    let invertedTypeList = _.toArray(_.invert(typeList))\n    let resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ typeValue: typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/bacnet/BacnetReinitializedStates', RED.auth.needsPermission('bacnet.CMD.read'), function (req, res) {\n    let typeList = BACnet.enum.ReinitializedState\n    let invertedTypeList = _.toArray(_.invert(typeList))\n    let resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ typeValue: typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n}\n"]}