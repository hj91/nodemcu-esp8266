{"version":3,"sources":["bacnet-read.js"],"names":["module","exports","RED","bacnetCore","require","nodes","registerType","config","createNode","this","name","objectType","parseInt","propertyId","multipleRead","instance","getNode","objectInstance","instanceAddress","device","deviceIPAddress","deviceAddress","connector","server","node","status","fill","shape","text","on","msg","options","payload","internalDebugLog","defaultRequestArray","objectId","type","properties","id","JSON","stringify","requestArray","e","client","readPropertyMultiple","err","translatedError","error","input","translateErrorMessage","send","result","Error"],"mappings":"AAOA,aAEAA,OAAOC,QAAU,SAAUC,GACzB,IAAIC,EAAaC,QAAQ,sBAoGzBF,EAAIG,MAAMC,aAAa,cAlGvB,SAAqBC,GACnBL,EAAIG,MAAMG,WAAWC,KAAMF,GAE3BE,KAAKC,KAAOH,EAAOG,KACnBD,KAAKE,WAAaC,SAASL,EAAOI,YAClCF,KAAKI,WAAaD,SAASL,EAAOM,YAClCJ,KAAKK,aAAeP,EAAOO,aAE3BL,KAAKM,SAAWb,EAAIG,MAAMW,QAAQT,EAAOQ,UACzCN,KAAKQ,eAAiBR,KAAKM,SAASG,iBAAmB,EAEvDT,KAAKU,OAASjB,EAAIG,MAAMW,QAAQT,EAAOY,QACvCV,KAAKW,gBAAkBX,KAAKU,OAAOE,eAAiB,YAEpDZ,KAAKa,UAAYpB,EAAIG,MAAMW,QAAQT,EAAOgB,QAE1C,IAAIC,EAAOf,KAEXe,EAAKC,OAAO,CAAAC,KAACA,QAADC,MAAgBA,MAAhBC,KAA8BA,WAE1CJ,EAAKK,GAAG,QAAS,SAAUC,GACzB,GAAKN,EAAKF,UAAV,CAKA,IAAIS,EAAUD,EAAIE,QAAQD,SAAW,GAErC,GAAIP,EAAKV,aAAc,CACrBX,EAAW8B,iBAAiB,iBAE5B,IAAIC,EAAsB,CAAC,CACzBC,SAAU,CACRC,KAAMZ,EAAKb,WACXI,SAAUH,SAASY,EAAKP,iBAE1BoB,WAAY,CAAC,CAAAC,GAACA,SAAI1B,EAASY,gBAG7B,IACErB,EAAW8B,iBAAiB,8CAAgDM,KAAKC,UAAUN,IAC3F/B,EAAW8B,iBAAiB,kDAAoDM,KAAKC,UAAUV,EAAIE,QAAQS,eAC3GtC,EAAW8B,iBAAiB,iCAAmCT,EAAKX,YACpE,MAAO6B,GACPvC,EAAW8B,iBAAiB,wBAA0BS,GAGxDlB,EAAKF,UAAUqB,OAAOC,qBAKlBd,EAAIe,QAAKzB,iBAAAI,EAAAJ,gBACPU,EAAAE,QAAIc,cAAkB3C,EACtBA,EACAqB,SAAKuB,EAAMD,GAHb,GAAAD,EAIO,CACLf,IAAIkB,EAAJ7C,EAAA8C,sBAAAJ,GACAf,EAAAG,iBAAAa,GACAtB,EAAK0B,MAALJ,EAAAhB,QAZNA,EAAAkB,MAAAlB,EAAAE,QAeKF,EAAAE,QAAAmB,EACLhD,EAAW8B,KAAAA,SAGTG,CACArB,EAAAA,iBAAwBE,QAF1B,IAAIkB,EAAW,CAKfC,KAAIZ,EAAAb,WACFR,SAAAA,SAAW8B,EAAAA,iBAGZ,IACC9B,EAAW8B,iBAAiB,kCAA5BM,KAAAC,UAAAL,IACDhC,EAAA8B,iBAAA,sCAAAM,KAAAC,UAAAV,EAAAE,QAAAG,WAHChC,EAAW8B,iBAAiB,iCAAmCT,EAAKX,YAKtEW,MAAKF,GAMDnB,EAAS8B,iBAAA,wBAAAS,GAGPlB,EAAAA,UAAWsB,OAAAA,aACZhB,EAJDE,QAIOZ,iBAAAI,EAAAJ,gBACLU,EAAAA,QAAAK,UAAgBH,EAChBF,EAAAA,QAAIE,YAAJR,EAAAX,WACAW,EACD,SAAAqB,EAAAM,GAdL,GAAAN,EAAA,CAgBD,IAAAC,EAAA3C,EAAA8C,sBAAAJ,GA1EH1C,EAAA8B,iBAAAa,GA4EDtB,EAAAuB,MAAAD,EAAAhB,QAESxB,EAAAA,MAAawB,EAAAE,QArGzBF,EAAAE,QAAAmB,EA8Fc3B,EAAK0B,KAAKpB,WArEhBN,EAAKuB,MAAM,IAAIK,MAAM,4BAA6BtB","file":"../bacnet-read.js","sourcesContent":["/*\n The MIT License\n\n Copyright (c) 2017 - Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-bacnet\n */\n'use strict'\n\nmodule.exports = function (RED) {\n  let bacnetCore = require('./core/bacnet-core')\n\n  function BACnetRead (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.objectType = parseInt(config.objectType)\n    this.propertyId = parseInt(config.propertyId)\n    this.multipleRead = config.multipleRead\n\n    this.instance = RED.nodes.getNode(config.instance)\n    this.objectInstance = this.instance.instanceAddress || 0\n\n    this.device = RED.nodes.getNode(config.device)\n    this.deviceIPAddress = this.device.deviceAddress || '127.0.0.1'\n\n    this.connector = RED.nodes.getNode(config.server)\n\n    let node = this\n\n    node.status({fill: 'green', shape: 'dot', text: 'active'})\n\n    node.on('input', function (msg) {\n      if (!node.connector) {\n        node.error(new Error('Client Not Ready To Read'), msg)\n        return\n      }\n\n      let options = msg.payload.options || {}\n\n      if (node.multipleRead) {\n        bacnetCore.internalDebugLog('Multiple Read')\n\n        let defaultRequestArray = [{\n          objectId: {\n            type: node.objectType,\n            instance: parseInt(node.objectInstance)\n          },\n          properties: [{id: parseInt(node.propertyId)}]\n        }]\n\n        try {\n          bacnetCore.internalDebugLog('readPropertyMultiple default requestArray: ' + JSON.stringify(defaultRequestArray))\n          bacnetCore.internalDebugLog('readPropertyMultiple msg.payload.requestArray: ' + JSON.stringify(msg.payload.requestArray))\n          bacnetCore.internalDebugLog('readProperty node.propertyId: ' + node.propertyId)\n        } catch (e) {\n          bacnetCore.internalDebugLog('writeProperty error: ' + e)\n        }\n\n        node.connector.client.readPropertyMultiple(\n          msg.payload.deviceIPAddress || node.deviceIPAddress,\n          msg.payload.requestArray || defaultRequestArray,\n          options,\n          function (err, result) {\n            if (err) {\n              let translatedError = bacnetCore.translateErrorMessage(err)\n              bacnetCore.internalDebugLog(translatedError)\n              node.error(translatedError, msg)\n            } else {\n              msg.input = msg.payload\n              msg.payload = result\n              node.send(msg)\n            }\n          })\n      } else {\n        bacnetCore.internalDebugLog('Read')\n\n        let objectId = {\n          type: node.objectType,\n          instance: parseInt(node.objectInstance)\n        }\n\n        try {\n          bacnetCore.internalDebugLog('readProperty default objectId: ' + JSON.stringify(objectId))\n          bacnetCore.internalDebugLog('readProperty msg.payload.objectId: ' + JSON.stringify(msg.payload.objectId))\n          bacnetCore.internalDebugLog('readProperty node.propertyId: ' + node.propertyId)\n        } catch (e) {\n          bacnetCore.internalDebugLog('writeProperty error: ' + e)\n        }\n\n        node.connector.client.readProperty(\n          msg.payload.deviceIPAddress || node.deviceIPAddress,\n          msg.payload.objectId || objectId,\n          msg.payload.propertyId || node.propertyId,\n          options,\n          function (err, result) {\n            if (err) {\n              let translatedError = bacnetCore.translateErrorMessage(err)\n              bacnetCore.internalDebugLog(translatedError)\n              node.error(translatedError, msg)\n            } else {\n              msg.input = msg.payload\n              msg.payload = result\n              node.send(msg)\n            }\n          })\n      }\n    })\n  }\n\n  RED.nodes.registerType('BACnet-Read', BACnetRead)\n}\n"]}