{"version":3,"sources":["bacnet-write.js"],"names":["module","exports","RED","bacnetCore","require","BACnet","_","nodes","registerType","config","createNode","this","name","objectType","parseInt","valueTag","valueValue","propertyId","priority","multipleWrite","instance","getNode","objectInstance","instanceAddress","device","deviceIPAddress","deviceAddress","connector","server","node","status","fill","shape","text","on","msg","options","payload","internalDebugLog","values","error","Error","forEach","item","objectId","type","JSON","stringify","e","client","writePropertyMultiple","err","translatedError","input","translateErrorMessage","send","value","defaultValues","httpAdmin","get","typeList","auth","needsPermission","req","res","enum","invertedTypeList","typelistEntry","toArray","invert","resultTypeList","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","push","typeValue","label","return","json","PropertyIdentifier","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","ObjectType","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3"],"mappings":"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","file":"../bacnet-write.js","sourcesContent":["/*\n The MIT License\n\n Copyright (c) 2017 - Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-bacnet\n */\n'use strict'\n\nmodule.exports = function (RED) {\n  let bacnetCore = require('./core/bacnet-core')\n  let BACnet = require('@biancoroyal/bacstack')\n  let _ = require('underscore')\n\n  function BACnetWrite (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.objectType = parseInt(config.objectType)\n    this.valueTag = parseInt(config.valueTag)\n    this.valueValue = config.valueValue\n    this.propertyId = parseInt(config.propertyId)\n    this.priority = parseInt(config.priority) || 15\n\n    this.multipleWrite = config.multipleWrite\n\n    this.instance = RED.nodes.getNode(config.instance)\n    this.objectInstance = this.instance.instanceAddress || 0\n\n    this.device = RED.nodes.getNode(config.device)\n    this.deviceIPAddress = this.device.deviceAddress || '127.0.0.1' // IPv6 it is :: - but configure Node-RED too\n\n    this.connector = RED.nodes.getNode(config.server)\n\n    let node = this\n\n    node.status({fill: 'green', shape: 'dot', text: 'active'})\n\n    node.on('input', function (msg) {\n      if (!node.connector) {\n        node.error(new Error('Client Not Ready To Write'), msg)\n        return\n      }\n\n      let options = msg.payload.options || {}\n\n      if (node.multipleWrite) {\n        bacnetCore.internalDebugLog('Multiple Write')\n\n        if (!msg.payload.values || !msg.payload.values[0].values) {\n          node.error(new Error('msg.payload.values missing or invalid array for multiple write'), msg)\n          return\n        }\n\n        msg.payload.values.forEach(function (item) {\n          if (!item.objectId) {\n            item.objectId = {\n              type: node.objectType,\n              instance: parseInt(node.objectInstance)\n            }\n          }\n        })\n\n        try {\n          bacnetCore.internalDebugLog('writePropertyMultiple msg.payload.values: ' + JSON.stringify(msg.payload.values))\n        } catch (e) {\n          bacnetCore.internalDebugLog('writePropertyMultiple error: ' + e)\n        }\n\n        node.connector.client.writePropertyMultiple(\n          msg.payload.deviceIPAddress || node.deviceIPAddress,\n          msg.payload.values,\n          options,\n          function (err, value) {\n            if (err) {\n              let translatedError = bacnetCore.translateErrorMessage(err)\n              bacnetCore.internalDebugLog(translatedError)\n              node.error(translatedError, msg)\n            } else {\n              msg.input = msg.payload\n              msg.payload = value\n              node.send(msg)\n            }\n          })\n      } else {\n        bacnetCore.internalDebugLog('Write')\n\n        if (msg.payload.values && !msg.payload.values[0]) {\n          node.error(new Error('invalid msg.payload.values array for write'), msg)\n          return\n        }\n\n        let objectId = {\n          type: node.objectType,\n          instance: parseInt(node.objectInstance)\n        }\n\n        let defaultValues = [{\n          type: node.valueTag,\n          value: node.valueValue\n        }]\n\n        try {\n          bacnetCore.internalDebugLog('readProperty default objectId: ' + JSON.stringify(objectId))\n          bacnetCore.internalDebugLog('writeProperty default values: ' + JSON.stringify(defaultValues))\n          bacnetCore.internalDebugLog('writeProperty msg.payload.values: ' + JSON.stringify(msg.payload.values))\n          bacnetCore.internalDebugLog('writeProperty node.propertyId: ' + node.propertyId)\n        } catch (e) {\n          bacnetCore.internalDebugLog('writeProperty error: ' + e)\n        }\n\n        node.connector.client.writeProperty(\n          msg.payload.deviceIPAddress || node.deviceIPAddress,\n          msg.payload.objectId || objectId,\n          msg.payload.propertyId || node.propertyId,\n          msg.payload.values || defaultValues,\n          options,\n          function (err, value) {\n            if (err) {\n              let translatedError = bacnetCore.translateErrorMessage(err)\n              bacnetCore.internalDebugLog(translatedError)\n              node.error(translatedError, msg)\n            } else {\n              msg.input = msg.payload\n              msg.payload = value\n              node.send(msg)\n            }\n          })\n      }\n    })\n  }\n\n  RED.nodes.registerType('BACnet-Write', BACnetWrite)\n\n  RED.httpAdmin.get('/bacnet/ApplicationTags', RED.auth.needsPermission('bacnet.CMD.read'), function (req, res) {\n    let typeList = BACnet.enum.ApplicationTags\n    let invertedTypeList = _.toArray(_.invert(typeList))\n    let resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ typeValue: typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/bacnet/PropertyIds', RED.auth.needsPermission('bacnet.CMD.read'), function (req, res) {\n    let typeList = BACnet.enum.PropertyIdentifier\n    let invertedTypeList = _.toArray(_.invert(typeList))\n    let resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ typeValue: typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/bacnet/ObjectTypes', RED.auth.needsPermission('bacnet.CMD.read'), function (req, res) {\n    let typeList = BACnet.enum.ObjectType\n    let invertedTypeList = _.toArray(_.invert(typeList))\n    let resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ typeValue: typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n}\n"]}