{"version":3,"sources":["core/bacnet-core.js"],"names":["de","biancoroyal","bacnet","core","require","detailDebugLog","specialDebugLog","errorCodeList","errorClassList","initCodeLists","BACnet","_","enum","ErrorCode","invertedErrorCodeList","toArray","invert","listCodeEntry","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","push","typeValue","label","err","return","sortBy","listClassEntry","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","invertedErrorClassList","internalDebugLog","length","translateErrorMessage","message","messageParts","split","errorClassMessage","errorClassToString","errorCodeMessage","errorCodeToString","join","errorCodeId","listEntry","entry","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","parseInt","errorClassId","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","module","exports"],"mappings":"AAOA,aAEA,IAAIA,GAAKA,IAAM,CAAAC,YAACA,CAAaC,OAACA,CAAAA,KAASC,MAAxBH,GACfA,YAAGC,OAAYC,KAAOC,iBAAtBH,GAA8CA,YAAGC,OAAYC,KAAOC,kBAAtBC,QAA+CA,QAA/CA,CAA+C,eAC7FJ,GAAGC,YAAYC,OAAOC,KAAKE,eAAiBL,GAAGC,YAAYC,OAAOC,KAAKE,gBAAkBD,QAAQ,QAARA,CAAiB,uBAC1GJ,GAAGC,YAAYC,OAAOC,KAAKG,gBAAkBN,GAAGC,YAAYC,OAAOC,KAAKG,iBAAmBF,QAAQ,QAARA,CAAiB,uBAC5GJ,GAAGC,YAAYC,OAAOC,KAAKI,cAAgBP,GAAGC,YAAYC,OAAOC,KAAKI,eAAiB,GACvFP,GAAGC,YAAYC,OAAOC,KAAKK,eAAiBR,GAAGC,YAAYC,OAAOC,KAAKK,gBAAkB,GAEzFR,GAAGC,YAAYC,OAAOC,KAAKM,cAAgB,WACzC,IAAIC,EAASN,QAAQ,yBACjBO,EAAIP,QAAQ,cAEZG,EAAgBG,EAAOE,KAAKC,UAC5BC,EAAwBH,EAAEI,QAAQJ,EAAEK,OAAOT,IAG3CU,OAAAA,EARiDC,GAAA,EAAAC,IAMrDnB,GAAGC,YAAYC,OAAOC,KAAKI,cAAgB,IANUa,OAAAC,EAAA,IAAA,IAAA,IAAAC,EAAAC,EAAAT,EAAAU,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAAD,EAAAK,EAAAM,MAAA5B,GAAAC,YAAAC,OAAAC,KAAAI,cAAAsB,KAAA,CAAAC,UAAAvB,EAAAU,GAAAc,MAAAd,IAAA,MAAAe,GAAAb,GAAA,EAAAC,EAAAY,EAAA,QAAA,KAAAd,GAAAK,EAAAU,QAAAV,EAAAU,SAAA,QAAA,GAAAd,EAAA,MAAAC,GAYrDT,EAAEuB,OAAOlC,GAAGC,YAAYC,OAAOC,KAAKI,cAAe,aAHnD,IAAAC,EAAAE,EAAsBI,KAAAA,WAAjBG,EAAwCN,EAAAI,QAAAJ,EAAAK,OAAAR,IAE5C2B,OAAAA,EAXoDC,GAAA,EAAAC,IAgBrDrC,GAAGC,YAAYC,OAAOC,KAAKK,eAAiB,IAhBS8B,OAAAjB,EAAA,IAAA,IAAA,IAAAkB,EAAAC,EAAAC,EAAAjB,OAAAC,cAAAW,GAAAG,EAAAC,EAAAd,QAAAC,MAAAS,GAAA,EAAAD,EAAAI,EAAAX,MAAA5B,GAAAC,YAAAC,OAAAC,KAAAK,eAAAqB,KAAA,CAAAC,UAAAtB,EAAA2B,GAAAJ,MAAAI,IAAA,MAAAH,GAAAK,GAAA,EAAAC,EAAAN,EAAA,QAAA,KAAAI,GAAAI,EAAAP,QAAAO,EAAAP,SAAA,QAAA,GAAAI,EAAA,MAAAC,GAAA3B,EAAAuB,OAAAlC,GAAAC,YAAAC,OAAAC,KAAAK,eAAA,aAAAR,GAAAC,YAAAC,OAAAC,KAAAuC,iBAAA,uBAAA1C,GAAAC,YAAAC,OAAAC,KAAAK,eAAAmC,OAAA,qBAAA3C,GAAAC,YAAAC,OAAAC,KAAAI,cAAAoC,OAAA,iBAAA3C,GAAAC,YAAAC,OAAAC,KAAAyC,sBAAA,SAAAZ,GAAA,IAAAa,EAAAb,EAAAa,QAAAC,EAAAD,EAAAE,MAAA,KAAA,GAAA,IAAAD,EAAAH,OAAA,CAiCnD,IAAIK,EAAoBF,EAAa,GAAGC,MAAM,KArB9Cb,EAAsBhC,EAAYK,GAAAA,MAAAA,KAEpCP,GAAIQ,YAAAA,OAAiBE,KAAOE,iBAA5BoC,GACAhD,GAAIyC,YAAAA,OAAAA,KAAyB9B,iBAAYK,GAwBvCgC,EAAkB,GAAKhD,GAAGC,YAAYC,OAAOC,KAAK8C,mBAAmBD,EAAkB,IArBzFE,EAAIf,GAAAA,GAAJlC,YAAAC,OAAAC,KAAAgD,kBAAAD,EAAA,IAlBqDlB,EAAAa,QAAAA,EAAA,IAAAG,EAAAI,KAAA,KAAA,IAAAF,EAAAE,KAAA,KA4CrD,OAAOpB,GAzBFG,GAAAA,YAAAA,OAA0ChC,KAAAgD,kBAAA,SAAAE,GA6B3CrD,GAAGC,YAAYC,OAAOC,KAAKI,cAAcoC,OAAS,GA5BpD3C,GAAAA,YAAGC,OAAYC,KAAOC,gBApB6B,IAAAmD,OAAAA,EAAAC,OAAAA,EAmBNC,GAAA,EAAAC,GAAA,EAAAC,OAAArC,EAAA,IAnBM,IAAA,IAAAsC,EAAAC,EAAA5D,GAAAC,YAAAC,OAAAC,KAAAI,cAAAiB,OAAAC,cAAA+B,GAAAG,EAAAC,EAAAlC,QAAAC,MAAA6B,GAAA,EAAAF,EAAAK,EAAA/B,MAAAiC,SAAAP,EAAAxB,aAAA+B,SAAAR,KAAArD,GAAAC,YAAAC,OAAAC,KAAAE,eAAAiD,EAAAxB,UAAA,WAAAwB,EAAAvB,OAAAwB,EAAAD,GAmBN,MAAAtB,GAAAyB,GAAA,EAAAC,EAAA1B,EAAA,QAAA,KAAAwB,GAAAI,EAAA3B,QAAA2B,EAAA3B,SAAA,QAAA,GAAAwB,EAAA,MAAAC,GAnBM,OAAAH,EAAAA,EAAAxB,MAAAsB,GAAArD,GAAAC,YAAAC,OAAAC,KAAA8C,mBAAA,SAAAa,GAAA9D,GAAAC,YAAAC,OAAAC,KAAAK,eAAAmC,OAAA,GAAA3C,GAAAC,YAAAC,OAAAC,KAAAM,gBAiErD,IAAI6C,OAAAA,EAAWC,OAAAA,EAjEsCQ,GAAA,EAAAC,GAAA,EAAAC,OAAA5C,EAAA,IAsBrDV,IAAAA,IAAAA,EAAAA,EAAYV,GAAAA,YAAmBE,OAAKK,KAAAA,eAApCG,OAAAA,cAAAA,GAAAA,EAAAA,EAAAA,QAAAA,MAAAA,GAAAA,EAAEuB,EAAkDgC,EAAAtC,MA6C9CiC,SAASP,EAAUxB,aAAe+B,SAASC,KA3C9C7D,GAAAA,YAAYC,OAAfC,KAA2BuC,eAAiBY,EAAAxB,UAAA,WACvC7B,EAAYC,OAzBnBqD,EAAAD,GAAuD,MAAAtB,GAAAgC,GAAA,EAAAC,EAAAjC,EAAA,QAAA,KAAA+B,GAAAI,EAAAlC,QAAAkC,EAAAlC,SAAA,QAAA,GAAA+B,EAAA,MAAAC,GA8BrD,OAAIpB,EAAUb,EAAIa,MAAlBiB,GAGEM,OAAAC,QAAIrB,GAAAA,YAAoBF,OAAAA","file":"../../core/bacnet-core.js","sourcesContent":["/*\n The MIT License\n\n Copyright (c) 2017 - Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-bacnet\n */\n'use strict'\n\nvar de = de || {biancoroyal: {bacnet: {core: {}}}} // eslint-disable-line no-use-before-define\nde.biancoroyal.bacnet.core.internalDebugLog = de.biancoroyal.bacnet.core.internalDebugLog || require('debug')('bacnet:core') // eslint-disable-line no-use-before-define\nde.biancoroyal.bacnet.core.detailDebugLog = de.biancoroyal.bacnet.core.detailDebugLog || require('debug')('bacnet:core:details') // eslint-disable-line no-use-before-define\nde.biancoroyal.bacnet.core.specialDebugLog = de.biancoroyal.bacnet.core.specialDebugLog || require('debug')('bacnet:core:special') // eslint-disable-line no-use-before-define\nde.biancoroyal.bacnet.core.errorCodeList = de.biancoroyal.bacnet.core.errorCodeList || [] // eslint-disable-line no-use-before-define\nde.biancoroyal.bacnet.core.errorClassList = de.biancoroyal.bacnet.core.errorClassList || [] // eslint-disable-line no-use-before-define\n\nde.biancoroyal.bacnet.core.initCodeLists = function () {\n  let BACnet = require('@biancoroyal/bacstack')\n  let _ = require('underscore')\n\n  let errorCodeList = BACnet.enum.ErrorCode\n  let invertedErrorCodeList = _.toArray(_.invert(errorCodeList))\n  de.biancoroyal.bacnet.core.errorCodeList = []\n\n  let listCodeEntry\n  for (listCodeEntry of invertedErrorCodeList) {\n    de.biancoroyal.bacnet.core.errorCodeList.push({ typeValue: errorCodeList[listCodeEntry], label: listCodeEntry })\n  }\n  _.sortBy(de.biancoroyal.bacnet.core.errorCodeList, 'typeValue')\n\n  let errorClassList = BACnet.enum.ErrorClass\n  let invertedErrorClassList = _.toArray(_.invert(errorClassList))\n  de.biancoroyal.bacnet.core.errorClassList = []\n\n  let listClassEntry\n  for (listClassEntry of invertedErrorClassList) {\n    de.biancoroyal.bacnet.core.errorClassList.push({ typeValue: errorClassList[listClassEntry], label: listClassEntry })\n  }\n  _.sortBy(de.biancoroyal.bacnet.core.errorClassList, 'typeValue')\n\n  de.biancoroyal.bacnet.core.internalDebugLog('List init done with ' +\n    de.biancoroyal.bacnet.core.errorClassList.length + ' class errors and ' +\n    de.biancoroyal.bacnet.core.errorCodeList.length + ' code errors')\n}\n\nde.biancoroyal.bacnet.core.translateErrorMessage = function (err) {\n  let message = err.message\n  let messageParts = message.split('-')\n  if (messageParts.length === 3) {\n    let errorClassMessage = messageParts[1].split(':')\n    let errorCodeMessage = messageParts[2].split(':')\n\n    de.biancoroyal.bacnet.core.internalDebugLog(errorClassMessage)\n    de.biancoroyal.bacnet.core.internalDebugLog(errorCodeMessage)\n\n    errorClassMessage[1] = de.biancoroyal.bacnet.core.errorClassToString(errorClassMessage[1])\n    errorCodeMessage[1] = de.biancoroyal.bacnet.core.errorCodeToString(errorCodeMessage[1])\n\n    err.message = message + ' ' + errorClassMessage.join(':') + ' ' + errorCodeMessage.join(':')\n  }\n  return err\n}\n\nde.biancoroyal.bacnet.core.errorCodeToString = function (errorCodeId) {\n  if (de.biancoroyal.bacnet.core.errorCodeList.length < 1) {\n    de.biancoroyal.bacnet.core.initCodeLists()\n  }\n  let listEntry, entry\n  for (listEntry of de.biancoroyal.bacnet.core.errorCodeList) {\n    if (parseInt(listEntry.typeValue) === parseInt(errorCodeId)) {\n      de.biancoroyal.bacnet.core.detailDebugLog(listEntry.typeValue + ' --> ' + listEntry.label)\n      entry = listEntry\n    }\n  }\n  return (entry) ? entry.label : errorCodeId\n}\n\nde.biancoroyal.bacnet.core.errorClassToString = function (errorClassId) {\n  if (de.biancoroyal.bacnet.core.errorClassList.length < 1) {\n    de.biancoroyal.bacnet.core.initCodeLists()\n  }\n  let listEntry, entry\n  for (listEntry of de.biancoroyal.bacnet.core.errorClassList) {\n    if (parseInt(listEntry.typeValue) === parseInt(errorClassId)) {\n      de.biancoroyal.bacnet.core.detailDebugLog(listEntry.typeValue + ' --> ' + listEntry.label)\n      entry = listEntry\n    }\n  }\n  return (entry) ? entry.label : errorClassId\n}\n\nmodule.exports = de.biancoroyal.bacnet.core\n"]}