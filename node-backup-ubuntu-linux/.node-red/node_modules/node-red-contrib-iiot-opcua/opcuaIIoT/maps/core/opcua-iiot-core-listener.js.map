{"version":3,"sources":["core/opcua-iiot-core-listener.js"],"names":["require","install","de","biancoroyal","opcua","iiot","core","listener","client","internalDebugLog","detailDebugLog","subscribeDebugLog","subscribeDetailDebugLog","eventDebugLog","eventDetailDebugLog","SUBSCRIBE_DEFAULT_INTERVAL","MIN_LISTENER_INTERVAL","MAX_LISTENER_INTERVAL","SUBSCRIBE_DEFAULT_QUEUE_SIZE","EVENT_DEFAULT_INTERVAL","METHOD_TYPE","Stately","createStatelyMachine","IDLE","endsub","REQUESTED","startsub","errorsub","STARTED","TERMINATED","idlesub","END","getEventSubscribtionParameters","timeMilliseconds","requestedPublishingInterval","requestedLifetimeCount","requestedMaxKeepAliveCount","maxNotificationsPerPublish","publishingEnabled","priority","getSubscriptionParameters","collectAlarmFields","field","dataType","value","getBasicEventFields","getAllEventFields","getStateFields","coreListener","addressSpaceItem","datatypeName","getConditionFields","topic","msg","_step","_iterator","addressSpaceItems","Symbol","iterator","_iteratorNormalCompletion","next","done","catch","nodeIdToMonitor","nodeId","toString","this","buildNewMonitoredItem","uaSubscription","then","result","monitoredItem","monitoredItemId","node","monitoredASO","set","err","showErrors","error","subscription","queueSize","options","payload","interval","listenerParameters","parseInt","monitor","samplingInterval","reject","nodeOPCUA","resolveNodeId","resolve","AttributeIds","Value","discardOldest","read_service","TimestampsToReturn","Both","monitoredItemResult","Promise","Error","buildNewMonitoredItemGroup","filteredAddressSpaceItems","filter","subcriptionItems","forEach","monitorItems","monitoredItemGroup","item","attributeId","EVENT_DEFAULT_QUEUE_SIZE","getAllEventTypes","EventNotifier","entries","eventFilter","ObjectTypeIds","browseEventTypes","makeNodeId","referenceTypeId","browseDirection","nodeClassMask","NodeClassMask","session","results","reference","nodesToBrowse","references","BaseEventType","push","displayName","Forward","resultMask","browse","diagnostics","length","analyzeEvent","browseForBrowseName","dataValue","text","index","eventInformation","NodeId","eventData","eventResults","variant","monitoringParameters","selectClauses","key","DataType","browseName","toJSON","connector","checkState","callerType","stateMachine","getMachineState","RUNNING_STATE","module","exports"],"mappings":"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","file":"../../core/opcua-iiot-core-listener.js","sourcesContent":["/**\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\nrequire('source-map-support').install()\n\n/**\n * Nested namespace settings.\n *\n * @type {{biancoroyal: {opcua: {iiot: {core: {client: {listener: {}}}}}}}}\n *\n * @Namesapce de.biancoroyal.opcua.iiot.core.client.listener\n */\nvar de = de || {biancoroyal: {opcua: {iiot: {core: {listener: {}}}}}} // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.core = de.biancoroyal.opcua.iiot.core.listener.core || require('./opcua-iiot-core') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.client = de.biancoroyal.opcua.iiot.core.listener.client || require('./opcua-iiot-core-client') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.internalDebugLog = de.biancoroyal.opcua.iiot.core.listener.internalDebugLog || require('debug')('opcuaIIoT:listener') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.detailDebugLog = de.biancoroyal.opcua.iiot.core.listener.detailDebugLog || require('debug')('opcuaIIoT:listener:details') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.subscribeDebugLog = de.biancoroyal.opcua.iiot.core.listener.subscribeDebugLog || require('debug')('opcuaIIoT:listener:subscribe') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.subscribeDetailDebugLog = de.biancoroyal.opcua.iiot.core.listener.subscribeDetailDebugLog || require('debug')('opcuaIIoT:listener:subscribe:details') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.eventDebugLog = de.biancoroyal.opcua.iiot.core.listener.eventDebugLog || require('debug')('opcuaIIoT:listener:event') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.eventDetailDebugLog = de.biancoroyal.opcua.iiot.core.listener.eventDetailDebugLog || require('debug')('opcuaIIoT:listener:event:details') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.SUBSCRIBE_DEFAULT_INTERVAL = 1000 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.MIN_LISTENER_INTERVAL = 100 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.MAX_LISTENER_INTERVAL = 3600000 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.SUBSCRIBE_DEFAULT_QUEUE_SIZE = 1 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.EVENT_DEFAULT_INTERVAL = 250 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.EVENT_DEFAULT_QUEUE_SIZE = 10000 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.METHOD_TYPE = 'ns=0;i=0' // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.RUNNING_STATE = 'STARTED' // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.listener.Stately = de.biancoroyal.opcua.iiot.core.listener.Stately || require('stately.js') // eslint-disable-line no-use-before-define\n\nde.biancoroyal.opcua.iiot.core.listener.createStatelyMachine = function () {\n  return de.biancoroyal.opcua.iiot.core.listener.Stately.machine({\n    'IDLE': {\n      'requestinitsub': 'REQUESTED',\n      'endsub': 'END'\n    },\n    'REQUESTED': {\n      'initsub': 'INIT'\n    },\n    'INIT': {\n      'startsub': 'STARTED',\n      'terminatesub': 'TERMINATED',\n      'errorsub': 'ERROR'\n    },\n    'STARTED': {\n      'terminatesub': 'TERMINATED',\n      'errorsub': 'ERROR'\n    },\n    'TERMINATED': {\n      'idlesub': 'IDLE',\n      'errorsub': 'ERROR',\n      'endsub': 'END'\n    },\n    'ERROR': {\n      'idlesub': 'IDLE',\n      'initsub': 'INIT',\n      'endsub': 'END'\n    },\n    'END': {}\n  }, 'IDLE')\n}\n\nde.biancoroyal.opcua.iiot.core.listener.getEventSubscribtionParameters = function (timeMilliseconds) {\n  return {\n    requestedPublishingInterval: timeMilliseconds || 100,\n    requestedLifetimeCount: 1000 * 60 * 20,\n    requestedMaxKeepAliveCount: 120,\n    maxNotificationsPerPublish: 200,\n    publishingEnabled: true,\n    priority: 2\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.listener.getSubscriptionParameters = function (timeMilliseconds) {\n  return {\n    requestedPublishingInterval: timeMilliseconds || 200,\n    requestedLifetimeCount: 1000 * 60 * 10,\n    requestedMaxKeepAliveCount: 60,\n    maxNotificationsPerPublish: 100,\n    publishingEnabled: true,\n    priority: 10\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.listener.collectAlarmFields = function (field, dataType, value) {\n  return {\n    field,\n    dataType,\n    value\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.listener.getBasicEventFields = function () {\n  return ['EventId', 'SourceName', 'Message', 'ReceiveTime']\n}\n\nde.biancoroyal.opcua.iiot.core.listener.getAllEventFields = function () {\n  return [\n    'ConditionName',\n    'ConditionType',\n    'ConditionClassId',\n    'ConditionClassName',\n    'ConditionVariableType',\n    'SourceNode',\n    'BranchId',\n    'EventType',\n    'Severity',\n    'Retain',\n    'Comment',\n    'Comment.SourceTimestamp',\n    'EnabledState',\n    'EnabledState.Id',\n    'EnabledState.EffectiveDisplayName',\n    'EnabledState.TransitionTime',\n    'LastSeverity',\n    'LastSeverity.SourceTimestamp',\n    'Quality',\n    'Quality.SourceTimestamp',\n    'Time',\n    'ClientUserId',\n    'AckedState',\n    'AckedState.Id',\n    'ConfirmedState',\n    'ConfirmedState.Id',\n    'LimitState',\n    'LimitState.Id',\n    'ActiveState',\n    'ActiveState.Id'\n  ]\n}\n\nde.biancoroyal.opcua.iiot.core.listener.getStateFields = function () {\n  return [\n    'ConditionName',\n    'SourceNode',\n    'Quality',\n    'Time',\n    'EnabledState',\n    'EnabledState.Id',\n    'EnabledState.EffectiveDisplayName',\n    'EnabledState.TransitionTime',\n    'AckedState',\n    'AckedState.Id',\n    'ConfirmedState',\n    'ConfirmedState.Id',\n    'LimitState',\n    'LimitState.Id',\n    'ActiveState',\n    'ActiveState.Id'\n  ]\n}\n\nde.biancoroyal.opcua.iiot.core.listener.getConditionFields = function () {\n  return [\n    'Time',\n    'Quality',\n    'BranchId',\n    'SourceNode',\n    'ConditionName',\n    'ConditionType',\n    'ConditionClassId',\n    'ConditionClassName',\n    'ConditionVariableType'\n  ]\n}\n\nde.biancoroyal.opcua.iiot.core.listener.monitorItems = function (node, msg, uaSubscription) {\n  let coreListener = de.biancoroyal.opcua.iiot.core.listener\n\n  for (let addressSpaceItem of msg.addressSpaceItems) {\n    if (!addressSpaceItem.nodeId) {\n      coreListener.subscribeDebugLog('Address Space Item Not Valid to Monitor ' + addressSpaceItem)\n      return\n    }\n\n    if (addressSpaceItem.datatypeName === de.biancoroyal.opcua.iiot.core.listener.METHOD_TYPE) {\n      coreListener.subscribeDebugLog('Address Space Item Not Allowed to Monitor ' + addressSpaceItem)\n      return\n    }\n\n    const nodeIdToMonitor = (typeof addressSpaceItem.nodeId === 'string') ? addressSpaceItem.nodeId : addressSpaceItem.nodeId.toString()\n\n    if (nodeIdToMonitor) {\n      coreListener.subscribeDebugLog('Monitored Item Subscribing ' + nodeIdToMonitor)\n      this.buildNewMonitoredItem(nodeIdToMonitor, msg, uaSubscription)\n        .then(function (result) {\n          if (result.monitoredItem.monitoredItemId) {\n            coreListener.subscribeDebugLog('Monitored Item Subscribed Id:' + result.monitoredItem.monitoredItemId + ' to ' + result.nodeId)\n            node.monitoredASO.set(result.nodeId.toString(), { monitoredItem: result.monitoredItem, topic: msg.topic || node.topic })\n          }\n        }).catch(function (err) {\n          coreListener.subscribeDebugLog(err)\n          if (node.showErrors) {\n            node.error(err, msg)\n          }\n        })\n    }\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.listener.buildNewMonitoredItem = function (nodeId, msg, subscription) {\n  let coreListener = de.biancoroyal.opcua.iiot.core.listener\n\n  return new Promise(\n    function (resolve, reject) {\n      if (!nodeId) {\n        reject(new Error('NodeId Is Not Valid'))\n        return\n      }\n\n      let interval\n      let queueSize\n      let options = (msg.payload.listenerParameters) ? msg.payload.listenerParameters : msg.payload\n      if (typeof options.interval === 'number' &&\n        options.interval <= coreListener.MAX_LISTENER_INTERVAL &&\n        options.interval >= coreListener.MIN_LISTENER_INTERVAL) {\n        interval = parseInt(options.interval)\n      } else {\n        interval = coreListener.SUBSCRIBE_DEFAULT_INTERVAL\n      }\n\n      if (options.queueSize && typeof options.queueSize === 'number') {\n        queueSize = parseInt(options.queueSize)\n      } else {\n        queueSize = coreListener.SUBSCRIBE_DEFAULT_QUEUE_SIZE\n      }\n\n      subscription.monitor(\n        {\n          nodeId: coreListener.core.nodeOPCUA.resolveNodeId(nodeId),\n          attributeId: coreListener.core.nodeOPCUA.AttributeIds.Value\n        },\n        {\n          samplingInterval: interval,\n          discardOldest: true,\n          queueSize: queueSize\n        },\n        coreListener.core.nodeOPCUA.read_service.TimestampsToReturn.Both,\n        function (err, monitoredItemResult) {\n          if (err) {\n            coreListener.internalDebugLog('subscribing monitored item ' + err)\n            reject(err)\n          } else {\n            resolve({nodeId: nodeId, monitoredItem: monitoredItemResult})\n          }\n        }\n      )\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.listener.buildNewMonitoredItemGroup = function (node, msg, addressSpaceItems, subscription) {\n  let coreListener = de.biancoroyal.opcua.iiot.core.listener\n\n  return new Promise(\n    function (resolve, reject) {\n      if (!addressSpaceItems) {\n        reject(new Error('NodeId Is Not Valid'))\n        return\n      }\n\n      let interval\n      let queueSize\n\n      let options = (msg.payload.listenerParameters) ? msg.payload.listenerParameters : msg.payload\n      if (typeof options.interval === 'number' &&\n        options.interval <= coreListener.MAX_LISTENER_INTERVAL &&\n        options.interval >= coreListener.MIN_LISTENER_INTERVAL) {\n        interval = parseInt(options.interval)\n      } else {\n        interval = coreListener.SUBSCRIBE_DEFAULT_INTERVAL\n      }\n\n      if (options.queueSize && typeof options.queueSize === 'number') {\n        queueSize = parseInt(options.queueSize)\n      } else {\n        queueSize = coreListener.SUBSCRIBE_DEFAULT_QUEUE_SIZE\n      }\n\n      let filteredAddressSpaceItems = addressSpaceItems.filter((addressSpaceItem) => {\n        return addressSpaceItem.datatypeName !== de.biancoroyal.opcua.iiot.core.listener.METHOD_TYPE\n      })\n\n      let subcriptionItems = []\n      filteredAddressSpaceItems.forEach((item) => {\n        subcriptionItems.push({\n          nodeId: coreListener.core.nodeOPCUA.resolveNodeId(item.nodeId),\n          attributeId: coreListener.core.nodeOPCUA.AttributeIds.Value})\n      })\n\n      subscription.monitorItems(\n        subcriptionItems,\n        {\n          samplingInterval: interval,\n          discardOldest: true,\n          queueSize: queueSize\n        },\n        coreListener.core.nodeOPCUA.read_service.TimestampsToReturn.Both,\n        function (err, monitoredItemGroup) {\n          if (err) {\n            coreListener.internalDebugLog('subscribing monitored item group ' + err)\n            reject(err)\n          } else {\n            resolve({addressSpaceItems: addressSpaceItems, monitoredItemGroup: monitoredItemGroup})\n          }\n        }\n      )\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.listener.buildNewEventItem = function (nodeId, msg, subscription) {\n  let coreListener = de.biancoroyal.opcua.iiot.core.listener\n\n  return new Promise(\n    function (resolve, reject) {\n      if (!nodeId) {\n        reject(new Error('NodeId Is Not Valid'))\n        return\n      }\n\n      let interval\n      let queueSize\n\n      if (typeof msg.payload.interval === 'number' && msg.payload.interval < coreListener.MAX_LISTENER_INTERVAL) {\n        interval = parseInt(msg.payload.interval)\n      } else {\n        interval = coreListener.EVENT_DEFAULT_INTERVAL\n      }\n\n      if (typeof msg.payload.queueSize === 'number') {\n        queueSize = parseInt(msg.payload.queueSize)\n      } else {\n        queueSize = coreListener.EVENT_DEFAULT_QUEUE_SIZE\n      }\n\n      subscription.monitor(\n        {\n          nodeId: coreListener.core.nodeOPCUA.resolveNodeId(nodeId),\n          attributeId: coreListener.core.nodeOPCUA.AttributeIds.EventNotifier\n        },\n        {\n          samplingInterval: interval,\n          discardOldest: true,\n          queueSize: queueSize,\n          filter: msg.payload.eventFilter\n        },\n        coreListener.core.nodeOPCUA.read_service.TimestampsToReturn.Both,\n        function (err, monitoredItemResult) {\n          if (err) {\n            coreListener.internalDebugLog('subscribing event item ' + err)\n            reject(err)\n          } else {\n            resolve({ nodeId: nodeId, monitoredItem: monitoredItemResult })\n          }\n        }\n      )\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.listener.getAllEventTypes = function (session) {\n  return new Promise(\n    function (resolve, reject) {\n      if (!session) {\n        reject(new Error('Session Is Not Valid To Browse For Event Types'))\n        return\n      }\n\n      let entries = []\n      let makeNodeId = this.core.nodeOPCUA.makeNodeId\n      let ObjectTypeIds = this.core.nodeOPCUA.ObjectTypeIds\n\n      let browseEventTypes = {\n        nodeId: makeNodeId(ObjectTypeIds.BaseEventType),\n        referenceTypeId: this.core.nodeOPCUA.resolveNodeId('HasSubtype'),\n        browseDirection: this.core.nodeOPCUA.BrowseDirection.Forward,\n        includeSubtypes: true,\n        nodeClassMask: this.core.nodeOPCUA.NodeClassMask.ObjectType,\n        resultMask: 63 // All ResultMask_Schema\n      }\n\n      let nodesToBrowse = [browseEventTypes]\n\n      session.browse(nodesToBrowse, function (err, results, diagnostics) {\n        if (err) {\n          reject(err)\n        } else {\n          if (results) {\n            if (results.length > 0) {\n              results[0].references.forEach(function (reference) {\n                entries.push({displayName: reference.displayName.text, nodeId: reference.nodeId, reference: reference})\n              })\n            } else {\n              if (results.references) {\n                results.references.forEach(function (reference) {\n                  entries.push({displayName: reference.displayName.text, nodeId: reference.nodeId, reference: reference})\n                })\n              }\n            }\n          }\n          resolve(entries)\n        }\n      })\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.listener.analyzeEvent = function (session, browseForBrowseName, dataValue) {\n  let core = de.biancoroyal.opcua.iiot.core.listener.core\n  let coreListener = de.biancoroyal.opcua.iiot.core.listener\n\n  return new Promise(\n    function (resolve, reject) {\n      if (!session) {\n        reject(new Error('Session Is Not Valid To Analyze Event'))\n        return\n      }\n\n      if (!browseForBrowseName || typeof browseForBrowseName !== 'function') {\n        reject(new Error('BrowseForBrowseName Is Not Valid Function'))\n        return\n      }\n\n      if (!dataValue) {\n        reject(new Error('Event Response Not Valid'))\n      } else {\n        let index = 0\n        let eventInformation = {}\n        let eventResults = []\n\n        dataValue.forEach(function (variant) {\n          coreListener.eventDebugLog('variant entry: ' + variant.toString())\n\n          try {\n            if (variant.dataType && variant.value) {\n              eventInformation = coreListener.collectAlarmFields(dataValue.monitoringParameters.filter.selectClauses[index], variant.dataType.key.toString(), variant.value)\n\n              if (variant.dataType === core.nodeOPCUA.DataType.NodeId) {\n                browseForBrowseName(session, variant.value, function (err, browseName) {\n                  if (err) {\n                    reject(err)\n                  } else {\n                    eventInformation.browseName = browseName\n                    eventResults.push({ eventInformation: eventInformation, eventData: variant.toJSON() })\n                  }\n                })\n              } else {\n                eventResults.push({ eventInformation: eventInformation, eventData: variant.toJSON() })\n              }\n            }\n            index++\n          } catch (err) {\n            eventInformation = {error: err}\n            eventResults.push({ eventInformation: eventInformation, eventData: variant.toJSON() })\n          }\n        })\n\n        resolve(eventResults)\n      }\n    }\n  )\n}\n\nde.biancoroyal.opcua.iiot.core.listener.checkState = function (node, msg, callerType) {\n  this.internalDebugLog('Check Listener State ' + node.stateMachine.getMachineState() + ' By ' + callerType)\n\n  if (node.connector && node.stateMachine && node.stateMachine.getMachineState() !== this.RUNNING_STATE) {\n    this.internalDebugLog('Wrong Listener State ' + node.stateMachine.getMachineState() + ' By ' + callerType)\n    if (node.showErrors) {\n      node.error(new Error('Listener Not ' + this.RUNNING_STATE + ' On ' + callerType), msg)\n    }\n    return false\n  } else {\n    return true\n  }\n}\n\nmodule.exports = de.biancoroyal.opcua.iiot.core.listener\n"]}