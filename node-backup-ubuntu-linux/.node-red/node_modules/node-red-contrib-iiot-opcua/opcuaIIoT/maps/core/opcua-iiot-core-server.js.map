{"version":3,"sources":["core/opcua-iiot-core-server.js"],"names":["require","install","de","biancoroyal","opcua","iiot","core","server","internalDebugLog","detailDebugLog","isa95DebugLog","isa95DetailDebugLog","flex","simulatorInterval","maxTimeInterval","timeInterval","UNLIMITED_LISTENERS","intervalList","value","Math","sin","data","tankLevel","setValueFromSource","dataType","tankLevel2","constructAddressSpaceFromScript","constructAddressSpaceScript","eventObjects","Promise","resolve","engine","addressSpace","err","reject","Error","constructAddressSpace","asoDemo","LocalizedText","namespace","getOwnNamespace","view","addView","browseName","text","locale","constructAlarmAddressSpaceDemo","setInterval","simulateVariation","coreServer","push","vendorName","addObject","rootFolder","objects","displayName","variable1","addVariable","nodeId","description","variable2","set","variant","parseFloat","nodeOPCUA","StatusCodes","Good","Variant","componentOf","variable3","availableMemory","installHistoricalDataNode","memoryVariable","counterValue","counterVariable","fullcounterValue","get","fullcounterVariable","DataValue","sourceTimestamp","random","Date","timestamped_get","externalValueWithSourceTimestamp","sourcePicoseconds","valueRank","organizedBy","VariantArrayType","Matrix","dimensions","arrayDimensions","arrayType","Array","DataType","DateTime","UTC","fanSpeed","addMethod","Scalar","name","inputArguments","soundVolume","volume","join","barks","i","nbBarks","String","analogItemNode","addAnalogDataItem","outputArguments","low","high","engineeringUnits","standardUnits","degree_celsius","bindMethod","context","callback","addReference","referenceType","callMethodResult","done","forEach","index","list","clearInterval","definition","start","node","this","instrumentRange","endpoints","endpoint","endpointDescriptions","endpointDescription","endpointUrl","securityMode","toString","securityPolicyUri","on","channel","remoteAddress","remotePort","session","clientDescription","applicationUri","productUri","applicationName","applicationType","sessionName","sessionTimeout","reason","serverInfo","JSON","stringify","readConfigOfServerNode","config","alternateHostname","maxAllowedSessionNumber","maxConnectionsPerEndpoint","maxAllowedSubscriptionNumber","parseInt","maxNodesPerBrowse","showStatusActivities","showErrors","publicCertificateFile","privateCertificateFile","users","xmlsets","isAuditing","maxNodesPerRead","delayToClose","capabilitiesForMDNS","split","initServerNode","assert","allowAnonymous","initialized","loadNodeSets","dirname","_this","xmlFiles","registerServerMethod","serverDiscovery","xmlsetFileName","path","includes","standardNodeSetFile","nodeOPCUAServerPath","getNodeOPCUAServerPath","checkUser","userName","password","user","isValidUser","initRegisterServerMethod","RegisterServerMethod","MDNS","LDS","HIDDEN","opcuaServer","setDiscoveryOptions","serverOptions","disableDiscovery","discoveryServerEndpointUrl","length","getAddressSpace","error","msg","addVariableToAddressSpace","humanReadableType","findNode","payload","referenceNodeId","variableData","getVariantValue","datatype","displayname","browsename","deleteNOdeFromAddressSpace","addObjectToAddressSpace","searchedNode","deleteNode","restartServer","emit","send","setNodeStatusTo","createServerNameWithPrefix","prefix","buildServerOptions","get_fully_qualified_domain_name","makeApplicationUrn","port","initNewServer","productName","buildNumber","today","timestamp","buildDate","serverCapabilities","operationLimits","geFullyQualifiedDomainName","gatewayServerUri","serverPrefix","certificateFile","privateKeyFile","userManager","createServerObject","MAX_SUBSCRIPTION","setOPCUAServerListener","bgYellow","bgCyan","module","exports"],"mappings":"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","file":"../../core/opcua-iiot-core-server.js","sourcesContent":["/**\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\nrequire('source-map-support').install()\n\n/**\n * Nested namespace settings.\n *\n * @type {{biancoroyal: {opcua: {iiot: {core: {server: {}}}}}}}\n *\n * @Namesapce de.biancoroyal.opcua.iiot.core.server\n */\nvar de = de || {biancoroyal: {opcua: {iiot: {core: {server: {}}}}}} // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.core = de.biancoroyal.opcua.iiot.core.server.core || require('./opcua-iiot-core') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.internalDebugLog = de.biancoroyal.opcua.iiot.core.server.internalDebugLog || require('debug')('opcuaIIoT:server') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.detailDebugLog = de.biancoroyal.opcua.iiot.core.server.detailDebugLog || require('debug')('opcuaIIoT:server:details') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.isa95DebugLog = de.biancoroyal.opcua.iiot.core.server.isa95DebugLog || require('debug')('opcuaIIoT:server:ISA95') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.isa95DetailDebugLog = de.biancoroyal.opcua.iiot.core.server.isa95DetailDebugLog || require('debug')('opcuaIIoT:server:ISA95:details') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.flex = de.biancoroyal.opcua.iiot.core.server.flex || {} // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.flex.internalDebugLog = de.biancoroyal.opcua.iiot.core.server.flex.internalDebugLog || require('debug')('opcuaIIoT:server:flex') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.flex.detailDebugLog = de.biancoroyal.opcua.iiot.core.server.flex.detailDebugLog || require('debug')('opcuaIIoT:server:flex:details') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.simulatorInterval = de.biancoroyal.opcua.iiot.core.server.simulatorInterval || null // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.maxTimeInterval = de.biancoroyal.opcua.iiot.core.server.maxTimeInterval || 500000 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.timeInterval = de.biancoroyal.opcua.iiot.core.server.timeInterval || 1 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.UNLIMITED_LISTENERS = de.biancoroyal.opcua.iiot.core.server.UNLIMITED_LISTENERS || 0 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.intervalList = de.biancoroyal.opcua.iiot.core.server.intervalList || [] // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.server.path = de.biancoroyal.opcua.iiot.core.server.path || require('path') // eslint-disable-line no-use-before-define\n\nde.biancoroyal.opcua.iiot.core.server.simulateVariation = function (data) {\n  let server = de.biancoroyal.opcua.iiot.core.server\n\n  let value = (1.0 + Math.sin(server.timeInterval / 360 * 3)) / 2.0\n\n  server.timeInterval++\n  if (server.timeInterval > server.maxTimeInterval) {\n    server.timeInterval = 1\n  }\n\n  if (data.tankLevel) {\n    data.tankLevel.setValueFromSource({dataType: 'Double', value})\n  }\n\n  if (data.tankLevel2) {\n    data.tankLevel2.setValueFromSource({dataType: 'Double', value})\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.server.constructAddressSpaceFromScript = function (server, constructAddressSpaceScript, eventObjects) {\n  de.biancoroyal.opcua.iiot.core.server.flex.internalDebugLog('Construct Address Space From Script')\n  return new Promise(\n    function (resolve, reject) {\n      if (server.engine && constructAddressSpaceScript && constructAddressSpaceScript !== '') {\n        try {\n          constructAddressSpaceScript(server, server.engine.addressSpace, eventObjects, resolve)\n        } catch (err) {\n          reject(err)\n        }\n      } else {\n        reject(new Error('Wrong Parameters Construct AddressSpace From Script'))\n      }\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.server.constructAddressSpace = function (server, asoDemo) {\n  const LocalizedText = this.core.nodeOPCUA.LocalizedText\n\n  return new Promise(\n    function (resolve, reject) {\n      if (!server) {\n        reject(new Error('Server Not Valid To Construct Address Space'))\n        return\n      }\n\n      let coreServer = de.biancoroyal.opcua.iiot.core.server\n      let addressSpace = server.engine.addressSpace\n      const namespace = addressSpace.getOwnNamespace()\n\n      if (!addressSpace) {\n        reject(new Error('No AddressSpace From OPC UA Server Engine'))\n        return\n      }\n\n      let view = namespace.addView({\n        organizedBy: addressSpace.rootFolder.views,\n        browseName: 'BiancoRoyalView',\n        displayName: [\n          new LocalizedText({text: 'Bianco Royal View', locale: 'en-US'}),\n          new LocalizedText({text: 'Bianco Royal Sicht', locale: 'de-DE'})\n        ]\n      })\n\n      if (!asoDemo) {\n        resolve()\n      } else {\n        let constructAlarmAddressSpaceDemo = require('../helpers/alarms-and-conditions-demo').constructAlarmAddressSpaceDemo\n        let data = {}\n        constructAlarmAddressSpaceDemo(data, addressSpace)\n\n        de.biancoroyal.opcua.iiot.core.server.timeInterval = 1\n        de.biancoroyal.opcua.iiot.core.server.simulatorInterval = setInterval(function () {\n          de.biancoroyal.opcua.iiot.core.server.simulateVariation(data)\n        }, 500)\n\n        de.biancoroyal.opcua.iiot.core.server.intervalList.push(de.biancoroyal.opcua.iiot.core.server.simulatorInterval)\n        let vendorName = namespace.addObject({\n          organizedBy: addressSpace.rootFolder.objects,\n          nodeId: 'i=1234',\n          browseName: 'BiancoRoyal',\n          displayName: [\n            new LocalizedText({text: 'Bianco Royal', locale: 'en-US'}),\n            new LocalizedText({text: 'Bianco Royal', locale: 'de-DE'})\n          ],\n          description: 'Bianco Royal - Software Innovations®'\n        })\n\n        let variable1 = 1\n        de.biancoroyal.opcua.iiot.core.server.intervalList.push(setInterval(function () {\n          if (variable1 < 1000000) {\n            variable1 += 1\n          } else {\n            variable1 = 0\n          }\n        }, 100))\n\n        namespace.addVariable({\n          componentOf: vendorName,\n          nodeId: 'i=16479',\n          browseName: 'MyVariable1',\n          dataType: 'Double',\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Double',\n                value: variable1\n              })\n            }\n          }\n        })\n\n        let variable2 = 10.0\n\n        namespace.addVariable({\n          componentOf: vendorName,\n          nodeId: 'b=1020FFAA',\n          browseName: 'MyVariable2',\n          dataType: 'Double',\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Double',\n                value: variable2\n              })\n            },\n            set: function (variant) {\n              variable2 = parseFloat(variant.value)\n              return coreServer.core.nodeOPCUA.StatusCodes.Good\n            }\n          }\n        })\n\n        let variable3 = 1000.0\n\n        namespace.addVariable({\n          componentOf: vendorName,\n          nodeId: 's=TestReadWrite',\n          browseName: 'TestReadWrite',\n          displayName: 'Test Read and Write',\n          dataType: 'Double',\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Double',\n                value: variable3\n              })\n            },\n            set: function (variant) {\n              variable3 = parseFloat(variant.value)\n              return coreServer.core.nodeOPCUA.StatusCodes.Good\n            }\n          }\n        })\n\n        let memoryVariable = namespace.addVariable({\n          componentOf: vendorName,\n          nodeId: 's=free_memory',\n          browseName: 'FreeMemory',\n          displayName: [\n            new LocalizedText({text: 'Free Memory', locale: 'en-US'}),\n            new LocalizedText({text: 'ungenutzer RAM', locale: 'de-DE'})\n          ],\n          dataType: 'Double',\n\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Double',\n                value: coreServer.core.availableMemory()\n              })\n            }\n          }\n        })\n        addressSpace.installHistoricalDataNode(memoryVariable)\n\n        let counterValue = 0\n        de.biancoroyal.opcua.iiot.core.server.intervalList.push(setInterval(function () {\n          if (counterValue < 65000) {\n            counterValue += 1\n          } else {\n            counterValue = 0\n          }\n        }, 1000))\n\n        let counterVariable = namespace.addVariable({\n          componentOf: vendorName,\n          nodeId: 's=Counter',\n          browseName: 'Counter',\n          dataType: 'UInt16',\n\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'UInt16',\n                value: counterValue\n              })\n            }\n          }\n        })\n        addressSpace.installHistoricalDataNode(counterVariable)\n\n        let fullcounterValue = 0\n        de.biancoroyal.opcua.iiot.core.server.intervalList.push(setInterval(function () {\n          if (fullcounterValue < 100000) {\n            fullcounterValue += 1\n          } else {\n            fullcounterValue = -100000\n          }\n        }, 500))\n\n        let fullcounterVariable = namespace.addVariable({\n          componentOf: vendorName,\n          nodeId: 's=FullCounter',\n          browseName: 'FullCounter',\n          dataType: 'Int32',\n\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Int32',\n                value: fullcounterValue\n              })\n            }\n          }\n        })\n        addressSpace.installHistoricalDataNode(fullcounterVariable)\n\n        let externalValueWithSourceTimestamp = new coreServer.core.nodeOPCUA.DataValue({\n          value: new coreServer.core.nodeOPCUA.Variant({dataType: 'Double', value: 10.0}),\n          sourceTimestamp: null,\n          sourcePicoseconds: 0\n        })\n\n        de.biancoroyal.opcua.iiot.core.server.intervalList.push(setInterval(function () {\n          externalValueWithSourceTimestamp.value.value = Math.random()\n          externalValueWithSourceTimestamp.sourceTimestamp = new Date()\n        }, 1000))\n\n        namespace.addVariable({\n          organizedBy: vendorName,\n          nodeId: 's=Pressure',\n          browseName: 'Pressure',\n          dataType: 'Double',\n          value: {\n            timestamped_get: function () {\n              return externalValueWithSourceTimestamp\n            }\n          }\n        })\n\n        namespace.addVariable({\n          organizedBy: vendorName,\n          nodeId: 's=Matrix',\n          browseName: 'Matrix',\n          dataType: 'Double',\n          valueRank: 2,\n          arrayDimensions: [3, 3],\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Double',\n                arrayType: coreServer.core.nodeOPCUA.VariantArrayType.Matrix,\n                dimensions: [3, 3],\n                value: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n              })\n            }\n          }\n        })\n\n        namespace.addVariable({\n          organizedBy: vendorName,\n          nodeId: 's=Position',\n          browseName: 'Position',\n          dataType: 'Double',\n          valueRank: 1,\n          arrayDimensions: null,\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Double',\n                arrayType: coreServer.core.nodeOPCUA.VariantArrayType.Array,\n                value: [1, 2, 3, 4]\n              })\n            }\n          }\n        })\n\n        namespace.addVariable({\n          organizedBy: vendorName,\n          nodeId: 's=PumpSpeed',\n          browseName: 'PumpSpeed',\n          displayName: [\n            new LocalizedText({text: 'Pump Speed', locale: 'en-US'}),\n            new LocalizedText({text: 'Geschwindigkeit Pumpe', locale: 'de-DE'})\n          ],\n          dataType: 'Double',\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Double',\n                value: 200 + 100 * Math.sin(Date.now() / 10000)\n              })\n            }\n          }\n        })\n\n        namespace.addVariable({\n          organizedBy: vendorName,\n          nodeId: 's=SomeDate',\n          browseName: 'SomeDate',\n          displayName: [\n            new LocalizedText({text: 'Some Date', locale: 'en-US'}),\n            new LocalizedText({text: 'Einfaches Datum', locale: 'de-DE'})\n          ],\n          dataType: 'DateTime',\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: coreServer.core.nodeOPCUA.DataType.DateTime,\n                value: new Date(Date.UTC(2016, 9, 13, 8, 40, 0))\n              })\n            }\n          }\n        })\n\n        namespace.addVariable({\n          organizedBy: vendorName,\n          nodeId: 's=MultiLanguageText',\n          browseName: 'MultiLanguageText',\n          displayName: [\n            new LocalizedText({text: 'Multi Language Text', locale: 'en-US'}),\n            new LocalizedText({text: 'Mehrsprachiger Text', locale: 'de-DE'})\n          ],\n          dataType: 'LocalizedText',\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: coreServer.core.nodeOPCUA.DataType.LocalizedText,\n                value: [{text: 'multilingual text', locale: 'en'},\n                  {text: 'mehrsprachiger Text', locale: 'de'},\n                  {text: 'texte multilingue', locale: 'fr'}]\n              })\n            }\n          }\n        })\n\n        let fanSpeed = namespace.addVariable({\n          organizedBy: vendorName,\n          nodeId: 's=FanSpeed',\n          browseName: 'FanSpeed',\n          dataType: 'Double',\n          value: new coreServer.core.nodeOPCUA.Variant({dataType: 'Double', value: 1000.0})\n        })\n\n        de.biancoroyal.opcua.iiot.core.server.intervalList.push(setInterval(function () {\n          fanSpeed.setValueFromSource(new coreServer.core.nodeOPCUA.Variant({\n            dataType: 'Double',\n            value: 1000.0 + (Math.random() * 100 - 50)\n          }))\n        }, 10))\n\n        let method = namespace.addMethod(\n          vendorName, {\n            nodeId: 'i=12345',\n            browseName: 'Bark',\n\n            inputArguments: [\n              {\n                name: 'barks',\n                dataType: 'UInt32',\n                arrayType: coreServer.core.nodeOPCUA.VariantArrayType.Scalar,\n                description: {text: 'specifies the number of time I should bark'}\n              }, {\n                name: 'volume',\n                dataType: 'UInt32',\n                arrayType: coreServer.core.nodeOPCUA.VariantArrayType.Scalar,\n                description: {text: 'specifies the sound volume [0 = quiet ,100 = loud]'}\n              }\n            ],\n\n            outputArguments: [{\n              name: 'Barks',\n              dataType: 'String',\n              arrayType: coreServer.core.nodeOPCUA.VariantArrayType.Array,\n              description: {text: 'the generated barks'},\n              valueRank: 1\n            }]\n          })\n\n        method.bindMethod(function (inputArguments, context, callback) {\n          let nbBarks = inputArguments[0].value\n          let volume = inputArguments[1].value\n          let soundVolume = new Array(volume).join('!')\n          let barks = []\n\n          for (let i = 0; i < nbBarks; i++) {\n            barks.push('Whaff' + soundVolume)\n          }\n\n          let callMethodResult = {\n            statusCode: coreServer.core.nodeOPCUA.StatusCodes.Good,\n            outputArguments: [{\n              dataType: coreServer.core.nodeOPCUA.DataType.String,\n              arrayType: coreServer.core.nodeOPCUA.VariantArrayType.Array,\n              value: barks\n            }]\n          }\n          callback(null, callMethodResult)\n        })\n\n        let analogItemNode = namespace.addAnalogDataItem({\n          organizedBy: vendorName,\n          nodeId: 's=TemperatureAnalogItem',\n          browseName: 'TemperatureAnalogItem',\n          definition: '(tempA -25) + tempB',\n          valuePrecision: 0.5,\n          engineeringUnitsRange: {low: 100, high: 200},\n          instrumentRange: {low: -100, high: +200},\n          engineeringUnits: coreServer.core.nodeOPCUA.standardUnits.degree_celsius,\n          dataType: 'Double',\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: 'Double',\n                value: Math.random() + 19.0\n              })\n            }\n          }\n        })\n\n        view.addReference({\n          referenceType: 'Organizes',\n          nodeId: analogItemNode.nodeId\n        })\n\n        resolve()\n      }\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.server.destructAddressSpace = function (done) {\n  de.biancoroyal.opcua.iiot.core.server.intervalList.forEach(function (value, index, list) {\n    clearInterval(value)\n    list[index] = null\n  })\n  de.biancoroyal.opcua.iiot.core.server.intervalList = []\n  done()\n}\n\nde.biancoroyal.opcua.iiot.core.server.start = function (server, node) {\n  let coreServer = this\n  return new Promise(\n    function (resolve, reject) {\n      if (!server) {\n        reject(new Error('Server Not Valid To Start'))\n        return\n      }\n\n      if (!node) {\n        reject(new Error('Node Not Valid To Start'))\n        return\n      }\n\n      server.start(function (err) {\n        if (err) {\n          reject(err)\n        } else {\n          node.initialized = true\n\n          if (server.endpoints && server.endpoints.length) {\n            server.endpoints.forEach(function (endpoint) {\n              endpoint.endpointDescriptions().forEach(function (endpointDescription) {\n                coreServer.internalDebugLog('Server endpointUrl: ' +\n              endpointDescription.endpointUrl + ' securityMode: ' +\n              endpointDescription.securityMode.toString() +\n              ' securityPolicyUri: ' + endpointDescription.securityPolicyUri ? endpointDescription.securityPolicyUri.toString() : 'None Security Policy Uri')\n              })\n            })\n\n            let endpointUrl = server.endpoints[0].endpointDescriptions()[0].endpointUrl\n            coreServer.internalDebugLog('Primary Server Endpoint URL ' + endpointUrl)\n          }\n\n          server.on('newChannel', function (channel) {\n            coreServer.internalDebugLog('Client connected with address = ' +\n            channel.remoteAddress + ' port = ' + channel.remotePort\n            )\n          })\n\n          server.on('closeChannel', function (channel) {\n            coreServer.internalDebugLog('Client disconnected with address = ' +\n            channel.remoteAddress + ' port = ' + channel.remotePort\n            )\n          })\n\n          server.on('create_session', function (session) {\n            coreServer.internalDebugLog('############## SESSION CREATED ##############')\n            if (session.clientDescription) {\n              coreServer.detailDebugLog('Client application URI:' + session.clientDescription.applicationUri)\n              coreServer.detailDebugLog('Client product URI:' + session.clientDescription.productUri)\n              coreServer.detailDebugLog('Client application name:' + session.clientDescription.applicationName ? session.clientDescription.applicationName.toString() : 'none application name')\n              coreServer.detailDebugLog('Client application type:' + session.clientDescription.applicationType ? session.clientDescription.applicationType.toString() : 'none application type')\n            }\n\n            coreServer.internalDebugLog('Session name:' + session.sessionName ? session.sessionName.toString() : 'none session name')\n            coreServer.internalDebugLog('Session timeout:' + session.sessionTimeout)\n            coreServer.internalDebugLog('Session id:' + session.sessionId)\n          })\n\n          server.on('session_closed', function (session, reason) {\n            coreServer.internalDebugLog('############## SESSION CLOSED ##############')\n            coreServer.internalDebugLog('reason:' + reason)\n            coreServer.internalDebugLog('Session name:' + session.sessionName ? session.sessionName.toString() : 'none session name')\n          })\n\n          coreServer.internalDebugLog('Server Initialized')\n\n          if (server.serverInfo) {\n            coreServer.detailDebugLog('Server Info:' + JSON.stringify(server.serverInfo))\n          }\n\n          resolve()\n        }\n      })\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.server.readConfigOfServerNode = function (node, config) {\n  node.name = config.name\n\n  // network\n  node.port = config.port\n  node.endpoint = config.endpoint\n  node.alternateHostname = config.alternateHostname\n\n  // limits\n  node.maxAllowedSessionNumber = parseInt(config.maxAllowedSessionNumber) || 10\n  node.maxConnectionsPerEndpoint = parseInt(config.maxConnectionsPerEndpoint) || 10\n  node.maxAllowedSubscriptionNumber = parseInt(config.maxAllowedSubscriptionNumber) || 50\n  node.maxNodesPerRead = config.maxNodesPerRead || 1000\n  node.maxNodesPerBrowse = config.maxNodesPerBrowse || 2000\n\n  node.delayToClose = config.delayToClose || 1000\n  node.showStatusActivities = config.showStatusActivities\n  node.showErrors = config.showErrors\n\n  // certificates\n  node.publicCertificateFile = config.publicCertificateFile\n  node.privateCertificateFile = config.privateCertificateFile\n\n  // Security\n  node.allowAnonymous = config.allowAnonymous\n  // User Management\n  node.users = config.users\n  // XML-Set Management\n  node.xmlsets = config.xmlsets\n  // Audit\n  node.isAuditing = config.isAuditing\n\n  // discovery\n  node.disableDiscovery = !config.serverDiscovery\n  node.registerServerMethod = config.registerServerMethod || 1\n  node.discoveryServerEndpointUrl = config.discoveryServerEndpointUrl\n  node.capabilitiesForMDNS = (config.capabilitiesForMDNS) ? config.capabilitiesForMDNS.split(',') : [config.capabilitiesForMDNS]\n\n  return node\n}\n\nde.biancoroyal.opcua.iiot.core.server.initServerNode = function (node) {\n  node.assert = require('better-assert')\n  node.setMaxListeners(this.UNLIMITED_LISTENERS)\n  node.initialized = false\n  node.opcuaServer = null\n  return node\n}\n\nde.biancoroyal.opcua.iiot.core.server.loadNodeSets = function (node, dirname) {\n  let coreServer = this\n  let standardNodeSetFile = this.core.nodeOPCUA.standard_nodeset_file\n  let xmlFiles = [standardNodeSetFile]\n\n  if (node.xmlsets) {\n    node.xmlsets.forEach((xmlsetFileName) => {\n      coreServer.detailDebugLog('Load XML Set for ' + xmlsetFileName.name)\n      if (xmlsetFileName.path) {\n        if (xmlsetFileName.path.startsWith('public/vendor/')) {\n          xmlFiles.push(this.path.join(dirname, xmlsetFileName.path))\n        } else {\n          xmlFiles.push(xmlsetFileName.path)\n        }\n\n        if (xmlsetFileName.path.includes('ISA95')) {\n          // add server ISA95 extension to node-opcua\n          coreServer.isa95DebugLog('installing ISA95 extend')\n          // require('node-opcua-isa95')(this.core.nodeOPCUA)\n        }\n      }\n    })\n    this.detailDebugLog('appending xmlFiles: ' + xmlFiles.toString())\n  }\n\n  this.detailDebugLog('node set:' + xmlFiles.toString())\n  node.xmlFiles = xmlFiles\n  return node\n}\n\nde.biancoroyal.opcua.iiot.core.server.loadCertificates = function (node) {\n  const nodeOPCUAServerPath = this.core.getNodeOPCUAServerPath()\n\n  this.detailDebugLog('config: ' + node.publicCertificateFile)\n  if (node.publicCertificateFile === null || node.publicCertificateFile === '') {\n    node.publicCertificateFile = this.path.join(nodeOPCUAServerPath, '/certificates/server_selfsigned_cert_2048.pem')\n    this.detailDebugLog('default key: ' + node.publicCertificateFile)\n  }\n\n  this.detailDebugLog('config: ' + node.privateCertificateFile)\n  if (node.privateCertificateFile === null || node.privateCertificateFile === '') {\n    node.privateCertificateFile = this.path.join(nodeOPCUAServerPath, '/certificates/PKI/own/private/private_key.pem')\n    this.detailDebugLog('default key: ' + node.privateCertificateFile)\n  }\n\n  return node\n}\n\nde.biancoroyal.opcua.iiot.core.server.checkUser = function (node, userName, password) {\n  let isValidUser = false\n  this.detailDebugLog('Server User Request For ' + userName)\n\n  node.users.forEach(function (user) {\n    if (userName === user.name && password === user.password) {\n      isValidUser = true\n    }\n  })\n\n  if (isValidUser) {\n    this.detailDebugLog('Valid Server User Found')\n  } else {\n    this.detailDebugLog('Server User ' + userName + ' Not Found')\n  }\n\n  return isValidUser\n}\n\nde.biancoroyal.opcua.iiot.core.server.initRegisterServerMethod = function (node) {\n  node.initialized = false\n  node.opcuaServer = null\n\n  if (!node.registerServerMethod) {\n    node.registerServerMethod = this.core.nodeOPCUA.RegisterServerMethod.HIDDEN\n  } else {\n    switch (parseInt(node.registerServerMethod)) {\n      case 2:\n        node.registerServerMethod = this.core.nodeOPCUA.RegisterServerMethod.MDNS\n        break\n      case 3:\n        node.registerServerMethod = this.core.nodeOPCUA.RegisterServerMethod.LDS\n        break\n      default:\n        node.registerServerMethod = this.core.nodeOPCUA.RegisterServerMethod.HIDDEN\n    }\n  }\n  return node\n}\n\nde.biancoroyal.opcua.iiot.core.server.setDiscoveryOptions = function (node, serverOptions) {\n  if (!node.disableDiscovery) {\n    serverOptions.registerServerMethod = node.registerServerMethod\n\n    if (node.discoveryServerEndpointUrl && node.discoveryServerEndpointUrl !== '') {\n      serverOptions.discoveryServerEndpointUrl = node.discoveryServerEndpointUrl\n    }\n\n    if (node.capabilitiesForMDNS && node.capabilitiesForMDNS.length) {\n      serverOptions.capabilitiesForMDNS = node.capabilitiesForMDNS\n    }\n  }\n  return serverOptions\n}\n\nde.biancoroyal.opcua.iiot.core.server.getAddressSpace = function (node, msg) {\n  if (!node.opcuaServer.engine.addressSpace) {\n    node.error(new Error('Server AddressSpace Not Valid'), msg)\n    return null\n  }\n\n  return node.opcuaServer.engine.addressSpace\n}\n\nde.biancoroyal.opcua.iiot.core.server.addVariableToAddressSpace = function (node, msg, humanReadableType) {\n  let coreServer = this\n  let addressSpace = this.getAddressSpace(node)\n\n  if (!addressSpace) {\n    return\n  }\n\n  let rootFolder = addressSpace.findNode(msg.payload.referenceNodeId)\n  let variableData = this.core.getVariantValue(msg.payload.datatype, msg.payload.value)\n  const LocalizedText = this.core.nodeOPCUA.LocalizedText\n\n  addressSpace.getOwnNamespace().addVariable({\n    componentOf: rootFolder,\n    nodeId: msg.payload.nodeId,\n    browseName: msg.payload.browsename,\n    displayName: new LocalizedText({locale: null, text: msg.payload.displayname}),\n    dataType: msg.payload.datatype,\n    value: {\n      get () {\n        return new coreServer.core.nodeOPCUA.Variant({\n          dataType: coreServer.core.nodeOPCUA.DataType[msg.payload.datatype],\n          value: variableData\n        })\n      },\n      set (variant) {\n        variableData = variant.value\n        return coreServer.core.nodeOPCUA.StatusCodes.Good\n      }\n    }\n  })\n  coreServer.internalDebugLog(msg.payload.nodeId + ' ' + humanReadableType + ' Added To Address Space')\n}\n\nde.biancoroyal.opcua.iiot.core.server.addObjectToAddressSpace = function (node, msg, humanReadableType) {\n  let coreServer = this\n  let addressSpace = this.getAddressSpace(node)\n\n  if (!addressSpace) {\n    return\n  }\n\n  let rootFolder = addressSpace.findNode(msg.payload.referenceNodeId)\n  const LocalizedText = this.core.nodeOPCUA.LocalizedText\n\n  if (rootFolder) {\n    addressSpace.getOwnNamespace().addObject({\n      organizedBy: rootFolder,\n      nodeId: msg.payload.nodeId,\n      browseName: msg.payload.browsename,\n      displayName: new LocalizedText({locale: null, text: msg.payload.displayname})\n    })\n    coreServer.internalDebugLog(msg.payload.nodeId + ' ' + humanReadableType + ' Added To Address Space')\n  } else {\n    node.error(new Error('Root Reference Not Found'), msg)\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.server.deleteNOdeFromAddressSpace = function (node, msg) {\n  let addressSpace = this.getAddressSpace(node)\n\n  if (!addressSpace) {\n    return\n  }\n\n  if (msg.payload.nodeId) {\n    let searchedNode = addressSpace.findNode(msg.payload.nodeId)\n    if (searchedNode) {\n      this.internalDebugLog('Delete NodeId ' + msg.payload.nodeId)\n      addressSpace.deleteNode(searchedNode)\n    } else {\n      this.internalDebugLog('Delete NodeId Not Found ' + msg.payload.nodeId)\n    }\n  } else {\n    node.error(new Error('OPC UA Command NodeId Not Valid'), msg)\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.server.restartServer = function (node) {\n  if (node.opcuaServer) {\n    node.opcuaServer.shutdown(function () {\n      node.emit('shutdown')\n      node.initNewServer()\n    })\n  } else {\n    node.opcuaServer = null\n    node.emit('shutdown')\n    node.initNewServer()\n  }\n\n  node.send({payload: 'server shutdown'})\n  this.core.setNodeStatusTo(node, 'shutdown')\n}\n\nde.biancoroyal.opcua.iiot.core.server.handleServerError = function (node, err, msg) {\n  this.internalDebugLog(err)\n  if (node.showErrors) {\n    node.error(err, msg)\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.server.createServerNameWithPrefix = function (prefix) {\n  let serverPrefix = (prefix !== '') ? prefix + '-' : prefix\n  return 'NodeRED-IIoT-' + serverPrefix + 'Server'\n}\n\nde.biancoroyal.opcua.iiot.core.server.buildServerOptions = function (node, prefix) {\n  let coreServer = this\n  let geFullyQualifiedDomainName = coreServer.core.nodeOPCUA.get_fully_qualified_domain_name\n  let makeApplicationUrn = coreServer.core.nodeOPCUA.makeApplicationUrn\n  let today = new Date()\n\n  return {\n    port: node.port,\n    nodeset_filename: node.xmlFiles,\n    resourcePath: node.endpoint || 'UA/NodeRED' + prefix + 'IIoTServer',\n    buildInfo: {\n      productName: node.name || 'NodeOPCUA IIoT Server',\n      buildNumber: today.timestamp,\n      buildDate: today\n    },\n    serverCapabilities: {\n      operationLimits: {\n        maxNodesPerRead: node.maxNodesPerRead,\n        maxNodesPerBrowse: node.maxNodesPerBrowse\n      }\n    },\n    serverInfo: {\n      // applicationType: ApplicationType.CLIENTANDSERVER,\n      applicationUri: makeApplicationUrn(geFullyQualifiedDomainName(), coreServer.createServerNameWithPrefix(prefix)),\n      productUri: coreServer.createServerNameWithPrefix(prefix),\n      applicationName: {text: 'Node-RED', locale: 'en'},\n      gatewayServerUri: null,\n      discoveryProfileUri: null,\n      discoveryUrls: []\n    },\n    maxAllowedSessionNumber: node.maxAllowedSessionNumber,\n    maxConnectionsPerEndpoint: node.maxConnectionsPerEndpoint,\n    allowAnonymous: node.allowAnonymous,\n    certificateFile: node.publicCertificateFile,\n    privateKeyFile: node.privateCertificateFile,\n    alternateHostname: node.alternateHostname || '',\n    userManager: null,\n    isAuditing: node.isAuditing,\n    disableDiscovery: node.disableDiscovery\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.server.createServerObject = function (node, serverOptions) {\n  this.core.nodeOPCUA.OPCUAServer.MAX_SUBSCRIPTION = node.maxAllowedSubscriptionNumber\n  return new this.core.nodeOPCUA.OPCUAServer(serverOptions)\n}\n\nde.biancoroyal.opcua.iiot.core.server.setOPCUAServerListener = function (node) {\n  let coreServer = this\n\n  node.opcuaServer.on('newChannel', function (channel) {\n    coreServer.internalDebugLog('Client connected new channel with address = '.bgYellow, channel.remoteAddress, ' port = ', channel.remotePort)\n  })\n\n  node.opcuaServer.on('closeChannel', function (channel) {\n    coreServer.internalDebugLog('Client disconnected close channel with address = '.bgCyan, channel.remoteAddress, ' port = ', channel.remotePort)\n  })\n\n  node.opcuaServer.on('post_initialize', function () {\n    coreServer.internalDebugLog('initialized')\n  })\n}\n\nmodule.exports = de.biancoroyal.opcua.iiot.core.server\n"]}