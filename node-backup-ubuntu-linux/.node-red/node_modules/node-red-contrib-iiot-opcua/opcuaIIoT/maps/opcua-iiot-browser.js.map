{"version":3,"sources":["opcua-iiot-browser.js"],"names":["module","exports","RED","require","install","coreBrowser","nodes","registerType","config","OPCUAIIoTBrowser","createNode","nodeId","this","name","justValue","sendNodesToRead","sendNodesToBrowser","sendNodesToListener","singleBrowseResult","showStatusActivities","showErrors","recursiveBrowse","recursiveDepth","delayPerMessage","node","initClientNode","items","browseTopic","core","OBJECTS_ROOT","messageList","extractDataFromBrowserResults","browserResultToFilter","forEach","result","references","reference","detailDebugLog","lists","browserResults","push","transformToEntry","nodesToRead","toString","browseName","displayName","nodeClass","datatypeName","typeDefinition","browse","rootNodeId","msg","depth","callback","checkSessionNotValid","opcuaSession","internalDebugLog","length","newDepth","browseNodeList","addressItemList","catch","err","browseErrorHandling","createListsObject","nodesToBrowse","addressSpaceItems","rootNode","browseAddressSpaceItems","subLists","sendMessage","originMessage","assign","Object","nodetype","error","Error","listenerParameters","getListenParameters","recursiveDepthMax","enhanceMessage","setMessageLists","setNodeStatusTo","text","send","FAKTOR_SEC_TO_MSEC","injectType","payload","browserResultsCount","connector","endpoint","session","addressItemsToRead","addressItemsToBrowse","addressItemsToBrowseCount","browseSendResult","reset","browseToRoot","startBrowser","extractNodeIdFromTopic","on","checkConnectorState","registerToConnector","done","req","res","httpAdmin","getNode","params","id","entries","decodeURIComponent","nodeRootId","then","browserResult","json"],"mappings":"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","file":"../opcua-iiot-browser.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Browser Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreBrowser = require('./core/opcua-iiot-core-browser')\n\n  function OPCUAIIoTBrowser (config) {\n    RED.nodes.createNode(this, config)\n    this.nodeId = config.nodeId\n    this.name = config.name\n    this.justValue = config.justValue\n    this.sendNodesToRead = config.sendNodesToRead\n    this.sendNodesToBrowser = config.sendNodesToBrowser\n    this.sendNodesToListener = config.sendNodesToListener\n    this.singleBrowseResult = config.singleBrowseResult\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.recursiveBrowse = config.recursiveBrowse\n    this.recursiveDepth = config.recursiveDepth || 1\n    this.delayPerMessage = config.delayPerMessage || 0.2\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let node = coreBrowser.initClientNode(this)\n    node.items = []\n    node.browseTopic = coreBrowser.core.OBJECTS_ROOT\n    node.messageList = []\n\n    node.extractDataFromBrowserResults = (browserResultToFilter, lists) => {\n      browserResultToFilter.forEach(function (result) {\n        result.references.forEach(function (reference) {\n          coreBrowser.detailDebugLog('Add Reference To List :' + reference)\n          lists.browserResults.push(coreBrowser.transformToEntry(reference))\n\n          if (reference.nodeId) {\n            lists.nodesToRead.push(reference.nodeId.toString())\n\n            lists.addressItemList.push({\n              nodeId: reference.nodeId.toString(),\n              browseName: reference.browseName.toString(),\n              displayName: reference.displayName.toString(),\n              nodeClass: reference.nodeClass.toString(),\n              datatypeName: reference.typeDefinition.toString() })\n          }\n        })\n      })\n    }\n\n    node.browse = function (rootNodeId, msg, depth, lists, callback) {\n      if (coreBrowser.core.checkSessionNotValid(node.opcuaSession, 'Browse')) {\n        return\n      }\n\n      coreBrowser.internalDebugLog('Browse Topic To Call Browse ' + rootNodeId)\n\n      coreBrowser.browse(node.opcuaSession, rootNodeId)\n        .then(function (browserResults) {\n          if (browserResults.length) {\n            coreBrowser.detailDebugLog('Browser Result To String: ' + browserResults.toString())\n            node.extractDataFromBrowserResults(browserResults, lists)\n            if (node.recursiveBrowse) {\n              if (depth > 0) {\n                let newDepth = depth - 1\n                node.browseNodeList(lists.addressItemList, msg, newDepth, lists, callback)\n                if (!node.singleBrowseResult) {\n                  callback(rootNodeId, depth, msg, lists)\n                }\n              } else {\n                coreBrowser.internalDebugLog('Minimum Depth Reached On Browse At ' + rootNodeId)\n                callback(rootNodeId, depth, msg, lists)\n              }\n            } else {\n              callback(rootNodeId, depth, msg, lists)\n            }\n          } else {\n            coreBrowser.internalDebugLog('No Browse Results On ' + rootNodeId)\n          }\n        }).catch(function (err) {\n          coreBrowser.browseErrorHandling(node, err, msg, lists)\n        })\n    }\n\n    node.createListsObject = () => {\n      return {\n        nodesToBrowse: [],\n        nodesToRead: [],\n        addressItemList: [],\n        browserResults: []\n      }\n    }\n\n    node.browseNodeList = function (addressSpaceItems, msg, depth, lists, callback) {\n      if (coreBrowser.core.checkSessionNotValid(node.opcuaSession, 'BrowseList')) {\n        return\n      }\n\n      coreBrowser.internalDebugLog('Browse For NodeId List')\n      let rootNode = 'list'\n\n      if (node.opcuaSession) {\n        coreBrowser.browseAddressSpaceItems(node.opcuaSession, addressSpaceItems)\n          .then(function (browserResults) {\n            coreBrowser.detailDebugLog('List Browser Result To String: ' + browserResults.toString())\n            node.extractDataFromBrowserResults(browserResults, lists)\n            if (node.recursiveBrowse) {\n              if (depth > 0) {\n                let newDepth = depth - 1\n                let subLists = node.createListsObject()\n                node.browseNodeList(lists.addressItemList, msg, newDepth, subLists, callback)\n                if (!node.singleBrowseResult) {\n                  callback(rootNode, depth, msg, lists)\n                }\n              } else {\n                coreBrowser.internalDebugLog('Minimum Depth Reached On Browse List')\n                callback(rootNode, depth, msg, lists)\n              }\n            } else {\n              callback(rootNode, depth, msg, lists)\n            }\n          }).catch(function (err) {\n            coreBrowser.browseErrorHandling(node, err, msg, lists)\n          })\n      }\n    }\n\n    node.sendMessage = function (rootNodeId, depth, originMessage, lists) {\n      let msg = Object.assign({}, originMessage)\n      msg.nodetype = 'browse'\n      msg.justValue = node.justValue\n\n      if (!lists) {\n        coreBrowser.internalDebugLog('Lists Not Valid!')\n        if (node.showErrors) {\n          node.error(new Error('Lists Not Valid On Browse Send Message'), msg)\n        }\n      }\n\n      let listenerParameters = node.getListenParameters(msg)\n\n      msg.payload = {\n        rootNodeId,\n        browserResults: lists.browserResults,\n        recursiveBrowse: node.recursiveBrowse,\n        recursiveDepth: depth,\n        recursiveDepthMax: node.recursiveDepth,\n        listenerParameters\n      }\n\n      msg = node.enhanceMessage(msg, lists)\n      msg = node.setMessageLists(msg, lists)\n\n      node.messageList.push(msg)\n\n      if (node.showStatusActivities && node.status.text !== 'active') {\n        coreBrowser.core.setNodeStatusTo(node, 'active')\n      }\n\n      setTimeout(() => {\n        node.send(node.messageList.shift())\n      }, node.delayPerMessage * coreBrowser.core.FAKTOR_SEC_TO_MSEC)\n    }\n\n    node.getListenParameters = function (msg) {\n      if (msg.injectType === 'listen') {\n        return msg.payload\n      } else {\n        return null\n      }\n    }\n\n    node.enhanceMessage = function (msg, lists) {\n      if (!node.justValue) {\n        msg.payload.browseTopic = node.browseTopic\n        msg.payload.addressSpaceItems = msg.addressSpaceItems\n        msg.payload.browserResultsCount = lists.browserResults.length\n        if (node.connector) {\n          msg.payload.endpoint = node.connector.endpoint\n        }\n        msg.payload.session = (node.opcuaSession) ? node.opcuaSession.name : 'none'\n      } else {\n        msg.payload.browserResults = lists.addressItemList\n      }\n      return msg\n    }\n\n    node.setMessageLists = function (msg, lists) {\n      if (node.sendNodesToRead && lists.nodesToRead) {\n        msg.nodesToRead = lists.nodesToRead\n        msg.nodesToReadCount = lists.nodesToRead.length\n      }\n\n      if (node.sendNodesToListener && lists.addressItemList) {\n        msg.addressItemsToRead = lists.addressItemList\n        msg.addressItemsToReadCount = lists.addressItemList.length\n      }\n\n      if (node.sendNodesToBrowser && lists.addressItemList) {\n        msg.addressItemsToBrowse = lists.addressItemList\n        msg.addressItemsToBrowseCount = lists.addressItemList.length\n      }\n      return msg\n    }\n\n    node.browseSendResult = function (rootNodeId, depth, msg, lists) {\n      coreBrowser.internalDebugLog(rootNodeId + ' called by depth ' + depth)\n\n      if (node.singleBrowseResult) {\n        if (depth <= 0) {\n          node.sendMessage(rootNodeId, depth, msg, lists)\n          node.reset(lists)\n        }\n      } else {\n        node.sendMessage(rootNodeId, depth, msg, lists)\n        node.reset(lists)\n      }\n    }\n\n    node.reset = function (lists) {\n      lists = node.createListsObject()\n    }\n\n    node.browseWithAddressSpaceItems = function (msg, depth, lists) {\n      if (msg.addressItemsToBrowse && msg.addressItemsToBrowse.length > 0) {\n        msg.addressSpaceItems = msg.addressItemsToBrowse\n      }\n\n      if (msg.addressSpaceItems && msg.addressSpaceItems.length > 0) {\n        node.browseNodeList(msg.addressSpaceItems, msg, depth, lists, (rootNodeId, depth, msg, subLists) => {\n          node.browseSendResult(rootNodeId, depth, msg, subLists)\n        })\n      } else {\n        coreBrowser.detailDebugLog('Fallback NodeId On Browse Without AddressSpace Items')\n        node.browseTopic = node.nodeId || coreBrowser.browseToRoot()\n        node.browse(node.browseTopic, msg, depth, lists, (rootNodeId, depth, msg, subLists) => {\n          node.browseSendResult(rootNodeId, depth, msg, subLists)\n        })\n      }\n    }\n\n    node.startBrowser = function (msg) {\n      if (coreBrowser.core.checkSessionNotValid(node.opcuaSession, 'Browser')) {\n        return\n      }\n\n      let lists = node.createListsObject()\n      let depth = (node.recursiveBrowse) ? node.recursiveDepth : 0\n      node.browseTopic = coreBrowser.extractNodeIdFromTopic(msg, node) // set topic to the node object for HTTP requests at node\n\n      if (node.browseTopic && node.browseTopic !== '') {\n        node.browse(node.browseTopic, msg, depth, lists, (rootNodeId, depth, msg, subLists) => {\n          node.browseSendResult(rootNodeId, depth, msg, subLists)\n        })\n      } else {\n        node.browseWithAddressSpaceItems(msg, depth, lists)\n      }\n    }\n\n    node.on('input', function (msg) {\n      if (!coreBrowser.core.checkConnectorState(node, msg, 'Browser')) {\n        return\n      }\n\n      if (node.showStatusActivities) {\n        coreBrowser.core.setNodeStatusTo(node, 'browsing')\n      }\n      node.startBrowser(msg)\n    })\n\n    coreBrowser.core.registerToConnector(node)\n\n    node.on('close', (done) => {\n      coreBrowser.core.deregisterToConnector(node, done)\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Browser', OPCUAIIoTBrowser)\n\n  RED.httpAdmin.get('/opcuaIIoT/browse/:id/:nodeId', RED.auth.needsPermission('opcuaIIoT.browse'), function (req, res) {\n    let node = RED.nodes.getNode(req.params.id)\n    let entries = []\n    let nodeRootId = decodeURIComponent(req.params.nodeId) || coreBrowser.core.OBJECTS_ROOT\n    coreBrowser.detailDebugLog('request for ' + req.params.nodeId)\n\n    if (node.opcuaSession) {\n      coreBrowser.browse(node.opcuaSession, nodeRootId).then(function (browserResult) {\n        browserResult.forEach(function (result) {\n          if (result.references && result.references.length) {\n            result.references.forEach(function (reference) {\n              entries.push(coreBrowser.transformToEntry(reference))\n            })\n          }\n        })\n        res.json(entries)\n      }).catch(function (err) {\n        coreBrowser.internalDebugLog('Browser Error ' + err)\n        if (node.showErrors) {\n          node.error(err, {payload: 'Browse Internal Error'})\n        }\n\n        entries.push({\n          displayName: {text: 'Objects'},\n          nodeId: coreBrowser.core.OBJECTS_ROOT,\n          browseName: 'Objects'\n        })\n        res.json(entries)\n      })\n    } else {\n      res.json(entries)\n    }\n  })\n}\n"]}