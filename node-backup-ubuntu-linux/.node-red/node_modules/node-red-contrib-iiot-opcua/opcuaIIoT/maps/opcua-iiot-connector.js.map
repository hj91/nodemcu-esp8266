{"version":3,"sources":["opcua-iiot-connector.js"],"names":["module","exports","RED","require","install","coreConnector","_","path","nodes","registerType","config","createNode","this","RECONNECT_DELAY","discoveryUrl","endpoint","UNLIMITED_LISTENERS","endpointMustExist","loginEnabled","name","keepSessionAlive","privateKeyFile","showErrors","defaultSecureTokenLifetime","securityPolicy","messageSecurityMode","publicCertificateFile","strategyInitialDelay","autoSelectRightEndpoint","strategyMaxRetry","strategyMaxDelay","strategyRandomisationFactor","node","connectionStartDelay","maxBadSessionRequests","OPCUAIIoTConnectorConfiguration","sessionNodeRequests","setMaxListeners","client","endpoints","userIdentity","opcuaClient","opcuaSession","discoveryServer","serverCertificate","createConnectionTimeout","internalDebugLog","createStatelyMachine","stateMachine","getMachineState","sessionStartTimeout","clientStartTimeout","disconnectTimeout","nodeOPCUAClientPath","core","getNodeOPCUAClientPath","detailDebugLog","initCertificatesAndKeys","securedCommunication","toString","join","userName","password","credentials","user","error","Error","payload","updateServerOptions","opcuaClientOptions","securityMode","certificateFile","endpoint_must_exist","requestedSessionTimeout","connectionStrategy","maxRetry","initialDelay","maxDelay","randomisationFactor","connectOPCUAEndpoint","checkEndpoint","nodeOPCUA","OPCUAClient","autoSelectEndpointFromConnection","connectToClient","connect","err","handleError","stopopcua","open","opcuaDirectDisconnect","done","renewFiniteStateMachine","idle","initopcua","securityPolicyUri","includes","split","selectEndpointFromSettings","discoverClient","getEndpoints","forEach","endpointMatchForConnecting","endpointUrl","disconnect","then","catch","message","startSession","callerInfo","isInactiveOnOPCUA","createSession","session","sessionactive","logSessionInformation","on","statusCode","handleSessionClose","resetBadSession","emit","bgWhite","red","state","resetOPCUAConnection","lock","renew","closeSession","hasOpcUaSubscriptions","sessionclose","disconnectNodeOPCUA","closeConnector","opcuaDisconnect","registeredNodeList","length","connectionStopDelay","close","fsmState","console","clearTimeout","restartWithNewSettings","parameters","reconfigure","setNewParameters","renewConnection","reconnectDelay","onIDLE","onINITOPCUA","setTimeout","fsm","resetOPCUAObjects","event","oldState","newState","JSON","stringify","onSESSIONACTIVE","onSESSIONCLOSED","onOPEN","onSTOPPED","onSESSIONRESTART","onCLOSED","onLOCKED","resetAllTimer","onRENEW","onRECONFIGURED","registerForOPCUA","opcuaNode","id","deregisterForOPCUA","type","e","get","auth","needsPermission","req","res","getNode","params","discoverUrlRequest","decodeURIComponent","json","performFindServersRequest","perform_findServersRequest","servers","server","discoveryUrls","push","endpointUrlRequest","discoveryClient","httpAdmin","toArray","invert","DataTypeIds","AttributeIds","StatusCodes","ObjectTypeIds","ReferenceTypeIds","xmlset","di_nodeset_filename","typeList","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","resultTypeList","nodeId","typelistEntry","label","_iterator","return","objectTypeIds","eventTypes","filter","invertedObjectTypeIds","objectTypeId","indexOf","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","value","_iterator2","invertedVariableTypeList","variabletypeList","invertedTypeList","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","Symbol","iterator","next","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","VariableTypeIds","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","eventTypesResults"],"mappings":"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","file":"../opcua-iiot-connector.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * OPC UA connector Node-RED config node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreConnector = require('./core/opcua-iiot-core-connector')\n  let path = require('path')\n  const _ = require('underscore')\n  const assert = require('better-assert')\n\n  function OPCUAIIoTConnectorConfiguration (config) {\n    const CONNECTION_START_DELAY = 2000 // msec.\n    const CONNECTION_STOP_DELAY = 2000 // msec.\n    const RECONNECT_DELAY = 1000 // msec.\n    const UNLIMITED_LISTENERS = 0\n\n    RED.nodes.createNode(this, config)\n\n    // HTML settings\n    this.discoveryUrl = config.discoveryUrl || null\n    this.endpoint = config.endpoint\n    this.endpointMustExist = config.endpointMustExist || false\n    this.keepSessionAlive = config.keepSessionAlive\n    this.loginEnabled = config.loginEnabled\n    this.name = config.name\n    this.showErrors = config.showErrors\n    this.securityPolicy = config.securityPolicy\n    this.messageSecurityMode = config.securityMode\n    this.publicCertificateFile = config.publicCertificateFile\n    this.privateKeyFile = config.privateKeyFile\n    this.defaultSecureTokenLifetime = config.defaultSecureTokenLifetime || 120000\n    this.autoSelectRightEndpoint = config.autoSelectRightEndpoint\n    this.strategyMaxRetry = config.strategyMaxRetry || 10000\n    this.strategyInitialDelay = config.strategyInitialDelay || 500\n    this.strategyMaxDelay = config.strategyMaxDelay || 30000\n    this.strategyRandomisationFactor = config.strategyRandomisationFactor || 0.2\n    this.requestedSessionTimeout = config.requestedSessionTimeout || 60000\n    this.connectionStartDelay = config.connectionStartDelay || CONNECTION_START_DELAY\n    this.reconnectDelay = config.reconnectDelay || RECONNECT_DELAY\n    this.connectionStopDelay = config.connectionStopDelay || CONNECTION_STOP_DELAY\n    this.maxBadSessionRequests = config.maxBadSessionRequests || 10\n\n    let node = this\n\n    // internal settings\n    node.setMaxListeners(UNLIMITED_LISTENERS)\n    node.client = null\n    node.sessionNodeRequests = 0\n    node.endpoints = []\n    node.userIdentity = null\n    node.opcuaClient = null\n    node.opcuaSession = null\n    node.discoveryServer = null\n    node.serverCertificate = null\n    node.discoveryServerEndpointUrl = null\n    node.createConnectionTimeout = null\n    node.hasOpcUaSubscriptions = false\n\n    coreConnector.internalDebugLog('Open Connector Node')\n\n    node.stateMachine = coreConnector.createStatelyMachine()\n    coreConnector.internalDebugLog('Start FSM: ' + node.stateMachine.getMachineState())\n    coreConnector.detailDebugLog('FSM events:' + node.stateMachine.getMachineEvents())\n\n    let sessionStartTimeout = null\n    let clientStartTimeout = null\n    let disconnectTimeout = null\n    let nodeOPCUAClientPath = coreConnector.core.getNodeOPCUAClientPath()\n\n    node.securedCommunication = (node.securityPolicy && node.securityPolicy !== 'None' && node.messageSecurityMode && node.messageSecurityMode !== 'NONE')\n\n    coreConnector.detailDebugLog('config: ' + node.publicCertificateFile)\n    coreConnector.detailDebugLog('config: ' + node.privateKeyFile)\n    coreConnector.detailDebugLog('securedCommunication: ' + node.securedCommunication.toString())\n\n    node.initCertificatesAndKeys = function () {\n      if (node.securedCommunication) {\n        if (node.publicCertificateFile === null || node.publicCertificateFile === '') {\n          node.publicCertificateFile = path.join(nodeOPCUAClientPath, '/certificates/client_selfsigned_cert_1024.pem')\n          coreConnector.detailDebugLog('default key: ' + node.publicCertificateFile)\n        }\n\n        if (node.privateKeyFile === null || node.privateKeyFile === '') {\n          node.privateKeyFile = path.join(nodeOPCUAClientPath, '/certificates/PKI/own/private/private_key.pem')\n          coreConnector.detailDebugLog('default key: ' + node.privateKeyFile)\n        }\n      } else {\n        node.publicCertificateFile = null\n        node.privateKeyFile = null\n      }\n    }\n\n    if (node.loginEnabled) {\n      if (node.credentials) {\n        node.userIdentity = {\n          userName: node.credentials.user,\n          password: node.credentials.password\n        }\n        coreConnector.internalDebugLog('Connecting With Login Data On ' + node.endpoint)\n      } else {\n        node.error(new Error('Login Enabled But No Credentials'), {payload: ''})\n      }\n    }\n\n    /*  #########   CONNECTION  #########     */\n\n    node.updateServerOptions = function () {\n      node.initCertificatesAndKeys()\n      node.opcuaClientOptions = {\n        securityPolicy: node.securityPolicy || 'None',\n        securityMode: node.messageSecurityMode || 'NONE',\n        defaultSecureTokenLifetime: node.defaultSecureTokenLifetime || 120000,\n        keepSessionAlive: node.keepSessionAlive,\n        certificateFile: node.publicCertificateFile,\n        privateKeyFile: node.privateKeyFile,\n        endpoint_must_exist: node.endpointMustExist,\n        requestedSessionTimeout: node.requestedSessionTimeout || 60000,\n        connectionStrategy: {\n          maxRetry: node.strategyMaxRetry || 2000,\n          initialDelay: node.strategyInitialDelay || 1000,\n          maxDelay: node.strategyMaxDelay || 30000,\n          randomisationFactor: node.strategyRandomisationFactor || 0.2\n        }\n      }\n    }\n\n    node.connectOPCUAEndpoint = function () {\n      if (!coreConnector.checkEndpoint(node)) {\n        return\n      }\n\n      coreConnector.internalDebugLog('Connecting To Endpoint ' + node.endpoint)\n\n      node.updateServerOptions()\n      coreConnector.detailDebugLog('Options ' + JSON.stringify(node.opcuaClientOptions))\n      node.opcuaClient = new coreConnector.core.nodeOPCUA.OPCUAClient(node.opcuaClientOptions)\n\n      if (node.autoSelectRightEndpoint) {\n        node.autoSelectEndpointFromConnection()\n      }\n\n      coreConnector.setListenerToClient(node.opcuaClient, node)\n      node.connectToClient()\n    }\n\n    node.connectToClient = function () {\n      if (!coreConnector.checkEndpoint(node)) {\n        return\n      }\n\n      node.stateMachine.unlock()\n      node.opcuaClient.connect(node.endpoint, function (err) {\n        if (err) {\n          node.stateMachine.lock().stopopcua()\n          node.handleError(err)\n        } else {\n          coreConnector.internalDebugLog('Client Is Connected To ' + node.endpoint)\n          node.stateMachine.open()\n        }\n      })\n    }\n\n    node.renewConnection = function (done) {\n      node.opcuaDirectDisconnect(() => {\n        node.renewFiniteStateMachine()\n        node.stateMachine.idle().initopcua()\n        done()\n      })\n    }\n\n    node.endpointMatchForConnecting = function (endpoint) {\n      coreConnector.internalDebugLog('Auto Endpoint ' + endpoint.endpointUrl.toString() + ' ' + endpoint.securityPolicyUri.toString())\n      let securityMode = endpoint.securityMode.key || endpoint.securityMode\n      let securityPolicy = (endpoint.securityPolicyUri.includes('SecurityPolicy#')) ? endpoint.securityPolicyUri.split('#')[1] : endpoint.securityPolicyUri\n\n      coreConnector.internalDebugLog('node-mode:' + node.messageSecurityMode + ' securityMode: ' + securityMode)\n      coreConnector.internalDebugLog('node-policy:' + node.securityPolicy + ' securityPolicy: ' + securityPolicy)\n\n      return (securityMode === node.messageSecurityMode && securityPolicy === node.securityPolicy)\n    }\n\n    node.selectEndpointFromSettings = function (discoverClient) {\n      discoverClient.getEndpoints(function (err, endpoints) {\n        if (err) {\n          coreConnector.internalDebugLog('Auto Switch To Endpoint Error ' + err)\n          if (node.showErrors) {\n            node.error(err, {payload: 'Get Endpoints Request Error'})\n          }\n        } else {\n          endpoints.forEach(function (endpoint) {\n            if (node.endpointMatchForConnecting(endpoint)) {\n              node.endpoint = endpoint.endpointUrl\n              coreConnector.internalDebugLog('Auto Switch To Endpoint ' + node.endpoint)\n            }\n          })\n        }\n\n        discoverClient.disconnect(function (err) {\n          if (err) {\n            coreConnector.internalDebugLog('Endpoints Auto Request Error ' + err)\n            if (node.showErrors) {\n              node.error(err, {payload: 'Discover Client Disconnect Error'})\n            }\n          } else {\n            coreConnector.internalDebugLog('Endpoints Auto Request Done With Endpoint ' + node.endpoint)\n          }\n        })\n      })\n    }\n\n    node.autoSelectEndpointFromConnection = function () {\n      coreConnector.internalDebugLog('Auto Searching For Endpoint On ' + node.endpoint)\n\n      let endpointMustExist = node.opcuaClientOptions.endpoint_must_exist\n      node.opcuaClientOptions.endpoint_must_exist = false\n\n      let discoverClient = new coreConnector.core.nodeOPCUA.OPCUAClient(node.opcuaClientOptions)\n\n      discoverClient.connect(node.endpoint).then(function () {\n        coreConnector.internalDebugLog('Auto Searching Endpoint Connected To ' + node.endpoint)\n        node.selectEndpointFromSettings(discoverClient)\n        node.opcuaClientOptions.endpoint_must_exist = endpointMustExist\n      }).catch(function (err) {\n        coreConnector.internalDebugLog('Get Auto Endpoint Request Error ' + err.message)\n        node.opcuaClientOptions.endpoint_must_exist = endpointMustExist\n      })\n    }\n\n    /*  #########    SESSION    #########     */\n\n    node.startSession = function (callerInfo) {\n      coreConnector.internalDebugLog('Request For New Session From ' + callerInfo)\n\n      if (node.isInactiveOnOPCUA()) {\n        coreConnector.internalDebugLog('State Is Not Active While Start Session-> ' + node.stateMachine.getMachineState())\n        if (node.showErrors) {\n          node.error(new Error('OPC UA Connector Is Not Active'), {payload: 'Create Session Error'})\n        }\n        return\n      }\n\n      if (node.stateMachine.getMachineState() !== 'OPEN') {\n        coreConnector.internalDebugLog('Session Request Not Allowed On State ' + node.stateMachine.getMachineState())\n        if (node.showErrors) {\n          node.error(new Error('OPC UA Connector Is Not Open'), {payload: 'Create Session Error'})\n        }\n        return\n      }\n\n      if (!node.opcuaClient) {\n        coreConnector.internalDebugLog('OPC UA Client Connection Is Not Valid On State ' + node.stateMachine.getMachineState())\n        if (node.showErrors) {\n          node.error(new Error('OPC UA Client Connection Is Not Valid'), {payload: 'Create Session Error'})\n        }\n        return\n      }\n\n      node.stateMachine.sessionrequest()\n\n      node.opcuaClient.createSession(node.userIdentity || {})\n        .then(function (session) {\n          node.opcuaSession = session\n          node.stateMachine.sessionactive()\n\n          coreConnector.detailDebugLog('Session Created On ' + node.endpoint + ' For ' + callerInfo)\n          coreConnector.logSessionInformation(node)\n\n          node.opcuaSession.on('session_closed', function (statusCode) {\n            node.handleSessionClose(statusCode)\n          })\n        }).catch(function (err) {\n          node.stateMachine.lock().stopopcua()\n          node.emit('session_error', err)\n          node.handleError(err)\n        })\n    }\n\n    node.resetBadSession = function () {\n      node.sessionNodeRequests += 1\n      coreConnector.detailDebugLog('Session Node Requests At Connector No.: ' + node.sessionNodeRequests)\n      if (node.showErrors) {\n        coreConnector.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!   BAD SESSION ON CONNECTOR   !!!!!!!!!!!!!!!!!!'.bgWhite.red)\n      }\n\n      if (node.sessionNodeRequests > node.maxBadSessionRequests) {\n        coreConnector.internalDebugLog('Reset Bad Session Request On State ' + node.stateMachine.getMachineState())\n        node.resetOPCUAConnection('ToManyBadSessionRequests')\n      }\n    }\n\n    node.isInactiveOnOPCUA = function () {\n      let state = node.stateMachine.getMachineState()\n      return (state === 'STOPPED' || state === 'END' || state === 'RENEW' || state === 'RECONFIGURED')\n    }\n\n    node.resetOPCUAConnection = function (callerInfo) {\n      coreConnector.detailDebugLog(callerInfo + ' Request For New OPC UA Connection')\n      if (node.isInactiveOnOPCUA()) {\n        return\n      }\n\n      node.stateMachine.lock().renew()\n      node.emit('reset_opcua_connection')\n      node.closeSession(() => {\n        node.renewConnection(() => {\n          coreConnector.detailDebugLog('OPC UA Connection Reset Done')\n        })\n      })\n    }\n\n    node.closeSession = function (done) {\n      if (node.opcuaClient && node.opcuaSession) {\n        coreConnector.detailDebugLog('Close Session And Remove Subscriptions From Session On State ' + node.stateMachine.getMachineState())\n\n        try {\n          node.opcuaClient.closeSession(node.opcuaSession, node.hasOpcUaSubscriptions, function (err) {\n            if (err) {\n              node.handleError(err)\n            }\n            done()\n          })\n        } catch (err) {\n          node.handleError(err)\n          done()\n        } finally {\n          node.opcuaSession = null\n        }\n      } else {\n        coreConnector.internalDebugLog('Close Session Without Session On State ' + node.stateMachine.getMachineState())\n        done()\n      }\n    }\n\n    node.handleError = function (err) {\n      coreConnector.internalDebugLog('Handle Error On ' + node.endpoint + ' err:' + err)\n      if (node.showErrors) {\n        node.error(err, {payload: 'Handle Connector Error'})\n      }\n    }\n\n    node.handleSessionClose = function (statusCode) {\n      coreConnector.internalDebugLog('Session Closed With StatusCode ' + statusCode)\n\n      if (node.isInactiveOnOPCUA()) {\n        coreConnector.detailDebugLog('Connector Is Not Active On OPC UA While Session Close Event')\n        return\n      }\n\n      coreConnector.logSessionInformation(node)\n      if (node.stateMachine.getMachineState() !== 'SESSIONRESTART') {\n        node.stateMachine.lock().sessionclose()\n      }\n    }\n\n    node.disconnectNodeOPCUA = function (done) {\n      coreConnector.internalDebugLog('OPC UA Disconnect Connector On State ' + node.stateMachine.getMachineState())\n\n      if (node.opcuaClient) {\n        coreConnector.internalDebugLog('Close Node Disconnect Connector From ' + node.endpoint)\n        try {\n          node.opcuaClient.disconnect(function (err) {\n            if (err) {\n              node.handleError(err)\n            }\n            coreConnector.internalDebugLog('Close Node Done For Connector On ' + node.endpoint)\n            done()\n          })\n        } catch (err) {\n          node.handleError(err)\n          done()\n        } finally {\n          node.opcuaClient = null\n        }\n      } else {\n        coreConnector.internalDebugLog('Close Node Done For Connector Without Client On ' + node.endpoint)\n        done()\n      }\n    }\n\n    node.on('close', function (done) {\n      if (node.isInactiveOnOPCUA()) {\n        coreConnector.detailDebugLog('OPC UA Client Is Not Active On Close Node')\n        done()\n      } else {\n        coreConnector.detailDebugLog('OPC UA Client Is Active On Close Node With State ' + node.stateMachine.getMachineState())\n        if (node.stateMachine.getMachineState() === 'SESSIONACTIVE') {\n          node.closeConnector(done)\n        } else {\n          coreConnector.internalDebugLog(node.stateMachine.getMachineState() + ' -> !!!  CHECK CONNECTOR STATE ON CLOSE  !!!'.bgWhite.red)\n          done()\n        }\n      }\n    })\n\n    node.opcuaDisconnect = function (done) {\n      if (node.registeredNodeList.length > 0) {\n        coreConnector.internalDebugLog('Connector Has Registered Nodes And Can Not Close The Node -> Count: ' + node.registeredNodeList.length)\n        if (disconnectTimeout) {\n          clearTimeout(disconnectTimeout)\n          disconnectTimeout = null\n        }\n        disconnectTimeout = setTimeout(() => {\n          node.closeConnector(done)\n        }, node.connectionStopDelay)\n      } else {\n        node.opcuaDirectDisconnect(done)\n      }\n    }\n\n    node.opcuaDirectDisconnect = function (done) {\n      coreConnector.detailDebugLog('OPC UA Disconnect From Connector ' + node.stateMachine.getMachineState())\n      node.disconnectNodeOPCUA(() => {\n        node.stateMachine.lock().close()\n        let fsmState = node.stateMachine.getMachineState()\n        coreConnector.detailDebugLog('Disconnected On State ' + fsmState)\n        if (!node.isInactiveOnOPCUA() && fsmState !== 'CLOSED') {\n          console.log(fsmState)\n          done()\n          assert(false)\n        }\n        done()\n      })\n    }\n\n    node.closeConnector = (done) => {\n      coreConnector.detailDebugLog('Close Connector ' + node.stateMachine.getMachineState())\n\n      if (node.isInactiveOnOPCUA()) {\n        coreConnector.detailDebugLog('OPC UA Client Is Not Active On Close Connector')\n        done()\n        return\n      }\n\n      if (node.opcuaClient) {\n        node.opcuaDisconnect(done)\n      } else {\n        coreConnector.detailDebugLog('OPC UA Client Is Not Valid On Close Connector')\n        done()\n      }\n    }\n\n    node.restartWithNewSettings = function (parameters, done) {\n      coreConnector.internalDebugLog('Renew With Flex Connector Request On State ' + node.stateMachine.getMachineState())\n      node.stateMachine.lock().reconfigure()\n      node.setNewParameters(parameters)\n      node.initCertificatesAndKeys()\n      node.renewConnection(done)\n    }\n\n    node.setNewParameters = function (parameters) {\n      node.discoveryUrl = parameters.discoveryUrl || node.discoveryUrl\n      node.endpoint = parameters.endpoint || node.endpoint\n      node.keepSessionAlive = parameters.keepSessionAlive || node.keepSessionAlive\n      node.securityPolicy = parameters.securityPolicy || node.securityPolicy\n      node.messageSecurityMode = parameters.securityMode || node.messageSecurityMode\n      node.name = parameters.name || node.name\n      node.showErrors = parameters.showErrors || node.showErrors\n      node.publicCertificateFile = parameters.publicCertificateFile || node.publicCertificateFile\n      node.privateKeyFile = parameters.privateKeyFile || node.privateKeyFile\n      node.defaultSecureTokenLifetime = parameters.defaultSecureTokenLifetime || node.defaultSecureTokenLifetime\n      node.endpointMustExist = parameters.endpointMustExist || node.endpointMustExist\n      node.autoSelectRightEndpoint = parameters.autoSelectRightEndpoint || node.autoSelectRightEndpoint\n      node.strategyMaxRetry = parameters.strategyMaxRetry || node.strategyMaxRetry\n      node.strategyInitialDelay = parameters.strategyInitialDelay || node.strategyInitialDelay\n      node.strategyMaxDelay = parameters.strategyMaxDelay || node.strategyMaxDelay\n      node.strategyRandomisationFactor = parameters.strategyRandomisationFactor || node.strategyRandomisationFactor\n      node.requestedSessionTimeout = parameters.requestedSessionTimeout || node.requestedSessionTimeout\n      node.connectionStartDelay = parameters.connectionStartDelay || node.connectionStartDelay\n      node.reconnectDelay = parameters.reconnectDelay || node.reconnectDelay\n    }\n\n    node.resetOPCUAObjects = function () {\n      coreConnector.detailDebugLog('Reset All OPC UA Objects')\n      node.sessionNodeRequests = 0\n      node.opcuaClient = null\n      node.opcuaSession = null\n    }\n\n    node.subscribeFSMEvents = function (fsm) {\n      /* #########   FSM EVENTS  #########     */\n\n      fsm.onIDLE = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector IDLE Event FSM')\n        node.resetOPCUAObjects()\n      }\n\n      fsm.onINITOPCUA = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Init OPC UA Event FSM')\n\n        node.resetOPCUAObjects()\n        node.resetAllTimer()\n        node.emit('connector_init')\n        node.initCertificatesAndKeys()\n\n        if (clientStartTimeout) {\n          clearTimeout(clientStartTimeout)\n          clientStartTimeout = null\n        }\n\n        coreConnector.detailDebugLog('connecting OPC UA with delay of msec: ' + node.connectionStartDelay)\n        clientStartTimeout = setTimeout(() => {\n          try {\n            node.connectOPCUAEndpoint()\n          } catch (err) {\n            node.handleError(err)\n            node.resetOPCUAObjects()\n            node.stateMachine.lock().stopopcua()\n          }\n        }, node.connectionStartDelay)\n      }\n\n      fsm.onOPEN = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Open Event FSM')\n        node.emit('connection_started', node.opcuaClient)\n        coreConnector.internalDebugLog('Client Connected To ' + node.endpoint)\n        coreConnector.detailDebugLog('Client Options ' + JSON.stringify(node.opcuaClientOptions))\n        node.startSession('Open Event')\n      }\n\n      fsm.onSESSIONREQUESTED = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Session Request Event FSM')\n      }\n\n      fsm.onSESSIONACTIVE = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Session Active Event FSM')\n        node.sessionNodeRequests = 0\n        node.emit('session_started', node.opcuaSession)\n      }\n\n      fsm.onSESSIONCLOSED = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Session Close Event FSM')\n        node.emit('session_closed')\n        node.opcuaSession = null\n      }\n\n      fsm.onSESSIONRESTART = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Session Restart Event FSM')\n        node.emit('session_restart')\n      }\n\n      fsm.onCLOSED = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Client Close Event FSM')\n        node.emit('connection_closed')\n        node.opcuaClient = null\n      }\n\n      fsm.onLOCKED = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Lock Event FSM')\n      }\n\n      fsm.onUNLOCKED = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Unlock Event FSM')\n      }\n\n      fsm.onSTOPPED = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Stopped Event FSM')\n        node.resetAllTimer()\n        node.emit('connection_stopped')\n      }\n\n      fsm.onEND = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector End Event FSM')\n        node.resetAllTimer()\n        node.emit('connection_end')\n      }\n\n      fsm.onRECONFIGURED = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Reconfigure Event FSM')\n        node.resetAllTimer()\n        node.emit('connection_reconfigure')\n      }\n\n      fsm.onRENEW = function (event, oldState, newState) {\n        coreConnector.detailDebugLog('Connector Renew Event FSM')\n        node.resetAllTimer()\n        node.emit('connection_renew')\n      }\n    }\n\n    node.resetAllTimer = function () {\n      coreConnector.detailDebugLog('Reset All Timer')\n      if (clientStartTimeout) {\n        clearTimeout(clientStartTimeout)\n        clientStartTimeout = null\n      }\n\n      if (sessionStartTimeout) {\n        clearTimeout(sessionStartTimeout)\n        sessionStartTimeout = null\n      }\n\n      if (disconnectTimeout) {\n        clearTimeout(disconnectTimeout)\n        disconnectTimeout = null//\n      }\n    }\n\n    /*  ---------------------  handle config node behaviour --------------------- */\n    node.registeredNodeList = {}\n\n    node.renewFiniteStateMachine = function () {\n      node.stateMachine = null\n      node.stateMachine = coreConnector.createStatelyMachine()\n      assert(node.stateMachine.getMachineState() === 'IDLE')\n      node.subscribeFSMEvents(node.stateMachine)\n    }\n\n    node.registerForOPCUA = function (opcuaNode) {\n      if (!opcuaNode) {\n        coreConnector.internalDebugLog('Node Not Valid To Register In Connector')\n        return\n      }\n\n      coreConnector.internalDebugLog('Register In Connector NodeId: ' + opcuaNode.id)\n      node.registeredNodeList[opcuaNode.id] = opcuaNode\n\n      opcuaNode.on('opcua_client_not_ready', () => {\n        node.resetBadSession()\n      })\n\n      if (Object.keys(node.registeredNodeList).length === 1) {\n        coreConnector.internalDebugLog('Start Connector OPC UA Connection')\n        node.renewFiniteStateMachine()\n        node.stateMachine.idle().initopcua()\n      }\n    }\n\n    node.deregisterForOPCUA = function (opcuaNode, done) {\n      if (!opcuaNode) {\n        coreConnector.internalDebugLog('Node Not Valid To Deregister In Connector')\n        done()\n        return\n      }\n\n      coreConnector.internalDebugLog('Deregister In Connector NodeId: ' + opcuaNode.id)\n      delete node.registeredNodeList[opcuaNode.id]\n\n      if (node.stateMachine.getMachineState() === 'STOPPED' || node.stateMachine.getMachineState() === 'END') {\n        done()\n        return\n      }\n\n      if (Object.keys(node.registeredNodeList).length === 0) {\n        node.stateMachine.lock().stopopcua()\n        if (node.opcuaClient) {\n          coreConnector.detailDebugLog('OPC UA Direct Disconnect On Unregister Of All Nodes')\n          try {\n            node.opcuaClient.disconnect(function (err) {\n              if (err) {\n                node.handleError(err)\n              }\n              done()\n            })\n          } catch (err) {\n            node.handleError(err)\n            done()\n          } finally {\n            node.opcuaClient = null\n          }\n        } else {\n          done()\n        }\n      } else {\n        done()\n      }\n    }\n  }\n\n  try {\n    RED.nodes.registerType('OPCUA-IIoT-Connector', OPCUAIIoTConnectorConfiguration, {\n      credentials: {\n        user: {type: 'text'},\n        password: {type: 'password'}\n      }\n    })\n  } catch (e) {\n    coreConnector.internalDebugLog(e.message)\n  }\n\n  /*  ---------------------  HTTP Requests --------------------- */\n\n  RED.httpAdmin.get('/opcuaIIoT/client/discover/:id/:discoveryUrl', RED.auth.needsPermission('opcua.discovery'), function (req, res) {\n    let node = RED.nodes.getNode(req.params.id)\n    let discoverUrlRequest = decodeURIComponent(req.params.discoveryUrl)\n    coreConnector.internalDebugLog('Get Discovery Request ' + JSON.stringify(req.params) + ' for ' + discoverUrlRequest)\n    if (node) {\n      if (discoverUrlRequest && !discoverUrlRequest.includes('opc.tcp://')) {\n        res.json([])\n      } else {\n        let performFindServersRequest = coreConnector.core.nodeOPCUA.perform_findServersRequest\n        performFindServersRequest(discoverUrlRequest, function (err, servers) {\n          if (!err) {\n            let endpoints = []\n            servers.forEach(function (server) {\n              server.discoveryUrls.forEach(function (discoveryUrl) {\n                if (discoveryUrl.toString() !== discoverUrlRequest) {\n                  endpoints.push(discoveryUrl.toString())\n                }\n              })\n            })\n            res.json(endpoints)\n          } else {\n            coreConnector.internalDebugLog('Perform Find Servers Request ' + err)\n            if (node.showErrors) {\n              node.error(err, {payload: ''})\n            }\n            res.json([])\n          }\n        })\n      }\n    } else {\n      coreConnector.internalDebugLog('Get Discovery Request None Node ' + JSON.stringify(req.params))\n      res.json([])\n    }\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/client/endpoints/:id/:endpointUrl', RED.auth.needsPermission('opcua.endpoints'), function (req, res) {\n    let node = RED.nodes.getNode(req.params.id)\n    let endpointUrlRequest = decodeURIComponent(req.params.endpointUrl)\n    coreConnector.internalDebugLog('Get Endpoints Request ' + JSON.stringify(req.params) + ' for ' + endpointUrlRequest)\n    if (node) {\n      if (endpointUrlRequest && !endpointUrlRequest.includes('opc.tcp://')) {\n        res.json([])\n      } else {\n        const endpointMustExist = node.opcuaClientOptions.endpoint_must_exist // to reset later\n        node.opcuaClientOptions.endpoint_must_exist = false\n        let discoveryClient = new coreConnector.core.nodeOPCUA.OPCUAClient(node.opcuaClientOptions)\n        discoveryClient.connect(endpointUrlRequest).then(function () {\n          coreConnector.internalDebugLog('Get Endpoints Connected For Request')\n          discoveryClient.getEndpoints(function (err, endpoints) {\n            if (err) {\n              if (node.showErrors) {\n                node.error(err, {payload: ''})\n              }\n              coreConnector.internalDebugLog('Get Endpoints Request Error ' + err)\n              res.json([])\n            } else {\n              coreConnector.internalDebugLog('Sending Endpoints For Request')\n              res.json(endpoints)\n            }\n            discoveryClient.disconnect(function () {\n              coreConnector.internalDebugLog('Get Endpoints Request Disconnect')\n            })\n            node.opcuaClientOptions.endpoint_must_exist = endpointMustExist\n          })\n        }).catch(function (err) {\n          node.opcuaClientOptions.endpoint_must_exist = endpointMustExist\n          coreConnector.internalDebugLog('Get Endpoints Request Error ' + err.message)\n          res.json([])\n        })\n      }\n    } else {\n      coreConnector.internalDebugLog('Get Endpoints Request None Node ' + JSON.stringify(req.params))\n      res.json([])\n    }\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/DataTypeIds', RED.auth.needsPermission('opcuaIIoT.plain.datatypes'), function (req, res) {\n    res.json(_.toArray(_.invert(coreConnector.core.nodeOPCUA.DataTypeIds)))\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/AttributeIds', RED.auth.needsPermission('opcuaIIoT.plain.attributeids'), function (req, res) {\n    res.json(_.toArray(_.invert(coreConnector.core.nodeOPCUA.AttributeIds)))\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/StatusCodes', RED.auth.needsPermission('opcuaIIoT.plain.statuscodes'), function (req, res) {\n    res.json(_.toArray(_.invert(coreConnector.core.nodeOPCUA.StatusCodes)))\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/ObjectTypeIds', RED.auth.needsPermission('opcuaIIoT.plain.objecttypeids'), function (req, res) {\n    res.json(coreConnector.core.nodeOPCUA.ObjectTypeIds)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/VariableTypeIds', RED.auth.needsPermission('opcuaIIoT.plain.variabletypeids'), function (req, res) {\n    res.json(coreConnector.core.nodeOPCUA.VariableTypeIds)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/ReferenceTypeIds', RED.auth.needsPermission('opcuaIIoT.plain.referencetypeids'), function (req, res) {\n    res.json(coreConnector.core.nodeOPCUA.ReferenceTypeIds)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/xmlsets/public', RED.auth.needsPermission('opcuaIIoT.xmlsets'), function (req, res) {\n    let xmlset = []\n    xmlset.push(coreConnector.core.nodeOPCUA.di_nodeset_filename)\n    xmlset.push(coreConnector.core.nodeOPCUA.adi_nodeset_filename)\n    xmlset.push('public/vendor/opc-foundation/xml/Opc.ISA95.NodeSet2.xml')\n    xmlset.push('public/vendor/opc-foundation/xml/Opc.Ua.Adi.NodeSet2.xml')\n    xmlset.push('public/vendor/opc-foundation/xml/Opc.Ua.Di.NodeSet2.xml')\n    xmlset.push('public/vendor/opc-foundation/xml/Opc.Ua.Gds.NodeSet2.xml')\n    xmlset.push('public/vendor/harting/10_di.xml')\n    xmlset.push('public/vendor/harting/20_autoid.xml')\n    xmlset.push('public/vendor/harting/30_aim.xml')\n    res.json(xmlset)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/DataTypeIds', RED.auth.needsPermission('opcuaIIoT.list.datatypeids'), function (req, res) {\n    let typeList = coreConnector.core.nodeOPCUA.DataTypeIds\n    let invertedTypeList = _.toArray(_.invert(typeList))\n    let resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ nodeId: 'i=' + typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/EventTypeIds', RED.auth.needsPermission('opcuaIIoT.list.eventtypeids'), function (req, res) {\n    let objectTypeIds = coreConnector.core.nodeOPCUA.ObjectTypeIds\n    let invertedObjectTypeIds = _.invert(objectTypeIds)\n    let eventTypes = _.filter(invertedObjectTypeIds, function (objectTypeId) {\n      return objectTypeId.indexOf('Event') > -1\n    })\n\n    let typelistEntry\n    let eventTypesResults = []\n    for (typelistEntry of eventTypes) {\n      eventTypesResults.push({ nodeId: 'i=' + objectTypeIds[typelistEntry], label: typelistEntry })\n    }\n    res.json(eventTypesResults)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/InstanceTypeIds', RED.auth.needsPermission('opcuaIIoT.list.instancetypeids'), function (req, res) {\n    let typeList = coreConnector.core.nodeOPCUA.ObjectTypeIds\n    let variabletypeList = coreConnector.core.nodeOPCUA.VariableTypeIds\n    let invertedTypeList = _.toArray(_.invert(typeList))\n    let invertedVariableTypeList = _.toArray(_.invert(variabletypeList))\n    let resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ nodeId: 'i=' + typeList[typelistEntry], label: typelistEntry })\n    }\n\n    for (typelistEntry of invertedVariableTypeList) {\n      resultTypeList.push({ nodeId: 'i=' + typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/VariableTypeIds', RED.auth.needsPermission('opcuaIIoT.list.variabletypeids'), function (req, res) {\n    let typeList = coreConnector.core.nodeOPCUA.VariableTypeIds\n    let invertedTypeList = _.toArray(_.invert(typeList))\n    let resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ nodeId: 'i=' + typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/ReferenceTypeIds', RED.auth.needsPermission('opcuaIIoT.list.referencetypeids'), function (req, res) {\n    let typeList = coreConnector.core.nodeOPCUA.ReferenceTypeIds\n    let invertedTypeList = _.toArray(_.invert(typeList))\n    let resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ nodeId: 'i=' + typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/FilterTypes', RED.auth.needsPermission('opcuaIIoT.list.filterids'), function (req, res) {\n    let resultTypeList = []\n    resultTypeList.push({ name: 'dataType', label: 'Data Type' })\n    resultTypeList.push({ name: 'dataValue', label: 'Data Value' })\n    resultTypeList.push({ name: 'nodeClass', label: 'Node Class' })\n    resultTypeList.push({ name: 'typeDefinition', label: 'Type Definition' })\n    resultTypeList.push({ name: 'browseName', label: 'Browse Name' })\n    resultTypeList.push({ name: 'nodeId', label: 'Node Id' })\n    res.json(resultTypeList)\n  })\n}\n"]}