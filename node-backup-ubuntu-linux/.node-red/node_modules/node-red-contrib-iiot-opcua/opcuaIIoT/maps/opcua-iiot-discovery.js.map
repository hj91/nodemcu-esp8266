{"version":3,"sources":["opcua-iiot-discovery.js"],"names":["module","exports","RED","require","install","coreDiscovery","done","registerType","config","nodes","OPCUAIIoTDiscovery","createNode","this","name","discoveryPort","DEFAULT_OPCUA_DISCOVERY_PORT","node","discoveryServer","core","nodeOPCUA","OPCUADiscoveryServer","port","status","fill","shape","text","detailDebugLog","_get_endpoints","start","internalDebugLog","msg","getDiscoveryUrls","endpoints","send","discoveryUrls","shutdown"],"mappings":"AAQA,aAOAA,OAAOC,QAAU,SAAUC,GACzBC,QAAQ,sBAAsBC,UAC9B,IAAIC,EAAgBF,QAAQ,oCAkCtBG,EAAAA,MAAIC,aAAA,uBAhCV,SAA6BC,GAA7BN,EAAAO,MAASC,WAAAA,KAAoBF,GAC3BN,KAAIO,KAAME,EAAAA,KACVC,KAAKC,cAAcA,EAAnBC,eAAAT,EAAAU,6BAGA,IAAIC,EAAOJ,KACLK,EAAkB,IAAIZ,EAAca,KAAKC,UAAUC,qBAAqB,CAAAC,KAAAL,EAAAF,gBAAAE,EAA9EM,OAAA,CAAAC,KAAA,SAAAC,MAAA,OAAAC,KAAA,aAEaF,EAAMG,eAAP,uBAAAT,EAAAU,kBAAgCF,EAAMG,MAAA,WAAlDvB,EAAAwB,iBAAA,4BAEAxB,EAAAA,OAAcqB,CAAAA,KAAAA,QAAeF,MAAA,MAAAC,KAAA,aAI3BT,EAAAA,GAAKM,QAAO,SAAAQ,GAACP,EAAAA,QAAM,CAASC,cAAhBP,EAAAc,oBAAA,GAA8BN,UAAMR,EAAAe,WAAA,IAFlDhB,EAAAiB,KAAAH,KAOII,EAAAA,GAAAA,QAAa,SAAEjB,GACfe,EAFFf,EAAAkB,SAAA,WAII9B,EAAJwB,iBAAA,YALFvB,MAUIW","file":"../opcua-iiot-discovery.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * OPC UA node representation for Node-RED OPC UA IIoT nodes.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreDiscovery = require('./core/opcua-iiot-core-discovery')\n\n  function OPCUAIIoTDiscovery (config) {\n    RED.nodes.createNode(this, config)\n    this.name = config.name\n    this.discoveryPort = config.discoveryPort || coreDiscovery.DEFAULT_OPCUA_DISCOVERY_PORT\n\n    let node = this\n    const discoveryServer = new coreDiscovery.core.nodeOPCUA.OPCUADiscoveryServer({port: node.discoveryPort})\n\n    node.status({fill: 'yellow', shape: 'ring', text: 'starting'})\n\n    coreDiscovery.detailDebugLog('discovery endpoints:' + discoveryServer._get_endpoints())\n\n    discoveryServer.start(function () {\n      coreDiscovery.internalDebugLog('discovery server started')\n      node.status({fill: 'green', shape: 'dot', text: 'active'})\n    })\n\n    node.on('input', function (msg) {\n      msg.payload = {\n        discoveryUrls: discoveryServer.getDiscoveryUrls() || [],\n        endpoints: discoveryServer.endpoints || []\n      }\n      node.send(msg)\n    })\n\n    node.on('close', function (done) {\n      if (discoveryServer) {\n        discoveryServer.shutdown(function () {\n          coreDiscovery.internalDebugLog('shutdown')\n          done()\n        })\n      } else {\n        done()\n      }\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Discovery', OPCUAIIoTDiscovery)\n}\n"]}