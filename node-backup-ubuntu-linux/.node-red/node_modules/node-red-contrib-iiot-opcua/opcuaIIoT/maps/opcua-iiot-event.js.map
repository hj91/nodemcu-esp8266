{"version":3,"sources":["opcua-iiot-event.js"],"names":["module","exports","RED","require","install","coreListener","msg","nodetype","config","nodes","OPCUAIIoTEvent","this","createNode","eventType","eventTypeLabel","resultType","queueSize","usingListener","name","showStatusActivities","showErrors","node","subscribed","fill","shape","text","status","getBasicEventFields","uaEventFields","push","getConditionFields","getStateFields","getAllEventFields","uaEventFilter","core","nodeOPCUA","constructEventFilter","interval","payload","eventSubscriptionPayload","eventFilter","eventFields","send"],"mappings":"AAQA,aAOAA,OAAOC,QAAU,SAAUC,GACzBC,QAAQ,sBAAsBC,UAC9B,IAAIC,EAAeF,QAAQ,mCAsDvBG,EAAAA,MAAIC,aAAW,mBApDnB,SAAyBC,GAAzBN,EAAAO,MAASC,WAATC,KAAyBH,GACvBN,KAAIO,UAAMG,EAAWC,UACrBF,KAAKE,eAAYL,EAAOK,eACxBF,KAAKG,WAAAA,EAAiBN,YAAOM,QAC7BH,KAAKI,UAALP,EAAwBQ,UACxBL,KAAKK,cAAYR,EAAOQ,cACxBL,KAAKM,KAAAA,EAALC,KACAP,KAAKO,qBAALV,EAAAW,qBACAR,KAAKQ,WAAAA,EAALC,WAGA,IAAIC,EAAOV,KACXU,EAAKC,YAAa,EAELC,EAAAA,OAAM,CAAAA,KAAP,OAAAC,MAAA,OAAAC,KAAA,QAA8BA,EAAAA,GAAM,QAAA,SAAAnB,GAAhDe,EAAAC,YAAAD,EAAAC,WAGMD,EAACC,cAGCD,EAAKC,WADPD,EAAKJ,OAAAA,CAAAA,KAAT,OAAwBO,MAAA,MAAAC,KAAA,eAEpBJ,EAAKK,OAAO,CAAAH,KAAA,OAAAC,MAAA,OAAAC,KAAA,mBAA6BA,EAAAA,OAAM,CAAAF,KAAA,OAAAC,MAAA,MAAAC,KAAA,aAE/CJ,IAAAA,EAAYhB,EAAAsB,sBAAeH,OAAAA,EAAOT,YAAQU,IAAAA,YAA9BG,EAAZC,KAAAxB,EAAAyB,sBACD,MALH,IAMO,QACLT,EAAYQ,KAAAxB,EAAA0B,kBAACR,MAAcC,IAAAA,MAAcC,EAAMI,KAAAxB,EAAA2B,qBAKjD,IAAAC,EAAalB,EAAbmB,KAAAC,UAAAC,qBAAAR,GACES,EAAK,IAEH,iBAAA/B,EAAAgC,UAeFD,EAAW/B,EAAIgC,SAZbhC,EAAAC,SAAA,SACF,IAAAgC,EAAA,CACEX,UAAAA,EAAaU,QAAMjC,WAAa2B,EAAAA,UAChCQ,YAAAlC,EAAAgC,QAAAL,eAAAA,EAiBFQ,YAAanC,EAAIgC,QAAQV,eAAiBA,EAhB1CZ,UAAAV,EAAAgC,QAAAtB,WAAAK,EAAAL,UACEqB,SAAA/B,EAAAgC,QAAAD,UAAAA,GAIJ/B,EAAI+B,QAAQE,EAEZlB,EAAIqB,KAAApC","file":"../opcua-iiot-event.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Event Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreListener = require('./core/opcua-iiot-core-listener')\n\n  function OPCUAIIoTEvent (config) {\n    RED.nodes.createNode(this, config)\n    this.eventType = config.eventType\n    this.eventTypeLabel = config.eventTypeLabel\n    this.resultType = config.resultType || 'basic'\n    this.queueSize = config.queueSize\n    this.usingListener = config.usingListener\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n\n    let node = this\n    node.subscribed = false\n\n    node.status({fill: 'blue', shape: 'ring', text: 'new'})\n\n    node.on('input', function (msg) {\n      node.subscribed = !node.subscribed\n\n      if (node.usingListener) {\n        if (node.subscribed) {\n          node.status({fill: 'blue', shape: 'dot', text: 'subscribed'})\n        } else {\n          node.status({fill: 'blue', shape: 'ring', text: 'not subscribed'})\n        }\n      } else {\n        node.status({fill: 'blue', shape: 'dot', text: 'injected'})\n      }\n\n      let uaEventFields = coreListener.getBasicEventFields()\n\n      switch (node.resultType) {\n        case 'condition':\n          uaEventFields.push(coreListener.getConditionFields())\n          break\n        case 'state':\n          uaEventFields.push(coreListener.getStateFields())\n          break\n        case 'all':\n          uaEventFields.push(coreListener.getAllEventFields())\n          break\n        default:\n          break\n      }\n\n      let uaEventFilter = coreListener.core.nodeOPCUA.constructEventFilter(uaEventFields)\n      let interval = 1000\n\n      if (typeof msg.payload === 'number') {\n        interval = msg.payload // msec.\n      }\n\n      msg.nodetype = 'events'\n\n      let eventSubscriptionPayload = {\n        eventType: msg.payload.eventType || node.eventType,\n        eventFilter: msg.payload.uaEventFilter || uaEventFilter,\n        eventFields: msg.payload.uaEventFields || uaEventFields,\n        queueSize: msg.payload.queueSize || node.queueSize,\n        interval: msg.payload.interval || interval\n      }\n\n      // TODO: send works but it has a problem with debug node and ByteString\n      msg.payload = eventSubscriptionPayload\n\n      node.send(msg)\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Event', OPCUAIIoTEvent)\n}\n"]}