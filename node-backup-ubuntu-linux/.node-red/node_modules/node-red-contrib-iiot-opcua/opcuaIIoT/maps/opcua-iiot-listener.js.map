{"version":3,"sources":["opcua-iiot-listener.js"],"names":["module","exports","RED","require","install","coreListener","_","nodes","uaSubscription","config","Map","this","action","queueSize","name","topic","OPCUAIIoTListener","createNode","justValue","useGroupItems","showStatusActivities","showErrors","getNode","connector","node","StatusCodes","core","nodeOPCUA","AttributeIds","monitoredASO","createStatelyMachine","messageQueue","stateMachine","getMachineState","getMachineEvents","detailDebugLog","msg","internalDebugLog","requestinitsub","payload","listenerParameters","options","dynamicOptions","monitoringOptions","getSubscriptionParameters","timeMilliseconds","makeSubscription","eventOptions","getEventSubscribtionParameters","createSubscription","setSubscriptionEvents","subscription","on","setNodeStatusTo","idlesub","err","message","errorsub","resetSubscription","monitoredItem","updateSubscriptionStatus","parameters","checkSessionNotValid","opcuaSession","JSON","stringify","ClientSubscription","hasOpcUaSubscriptions","initsub","sendAllMonitoredItems","addressSpaceItems","value","nodeId","key","datatypeName","clear","subscribeActionInput","RUNNING_STATE","push","subscribeMonitoredItem","subscribeMonitoredEvent","monitoredItems","size","handleMonitoringOfGroupedItems","monitoredItemGroup","groupId","buildNewMonitoredItemGroup","result","uniqueId","catch","subscribeDebugLog","handleMonitoringOfItems","filter","addressSpaceItem","nodeIdToMonitor","toString","get","itemsToTerminate","itemsToMonitor","length","monitorMessage","monitorItems","assign","item","forEach","itemToMonitor","checkState","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","eventDebugLog","v","handleEventSubscriptions","buildNewEventItem","monitoredItemId","set","error","_iterator","Symbol","iterator","next","done","_ret","_typeof","return","updateMonitoredItemLists","has","delete","isNodeId","map","monitoredItemToSet","monitoringParameters","sendDataFromEvent","dataValue","isSessionBad","terminateSubscription","resetBadSession","setMonitoring","sendDataFromMonitoredItem","nodetype","dataValuesString","setMessageProperty","parse","warn","handleEventResults","eventResults","eventDetailDebugLog","util","injectType","analyzeEvent","getBrowseName","errorHandling","session","callback","client","read","BrowseName","readValue","browseName","checkConnectorState","buildNodesToListen","handleListenerInput","registerToConnector","attributeId","terminatesub","terminate","deregisterToConnector","onIDLE","event","oldState","newState","onREQUESTED","onINIT","shift","onEND"],"mappings":"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","file":"../opcua-iiot-listener.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Listener Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreListener = require('./core/opcua-iiot-core-listener')\n  let Map = require('collections/map')\n  const _ = require('underscore')\n\n  function OPCUAIIoTListener (config) {\n    RED.nodes.createNode(this, config)\n    this.action = config.action\n    this.queueSize = config.queueSize || 1\n    this.name = config.name\n    this.topic = config.topic\n    this.justValue = config.justValue\n    this.useGroupItems = config.useGroupItems\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let node = this\n    node.opcuaClient = null\n    node.opcuaSession = null\n\n    let uaSubscription = null\n    let StatusCodes = coreListener.core.nodeOPCUA.StatusCodes\n    let AttributeIds = coreListener.core.nodeOPCUA.AttributeIds\n    node.monitoredItems = new Map()\n    node.monitoredASO = new Map()\n    node.messageQueue = []\n\n    node.stateMachine = coreListener.createStatelyMachine()\n    coreListener.internalDebugLog('Start FSM: ' + node.stateMachine.getMachineState())\n    coreListener.detailDebugLog('FSM events:' + node.stateMachine.getMachineEvents())\n\n    node.createSubscription = function (msg) {\n      if (node.stateMachine.getMachineState() !== 'IDLE') {\n        coreListener.internalDebugLog('New Subscription Request On State ' + node.stateMachine.getMachineState())\n        return\n      }\n      coreListener.internalDebugLog('Create Subscription On State ' + node.stateMachine.getMachineState())\n      uaSubscription = null\n      node.stateMachine.requestinitsub()\n\n      const timeMilliseconds = (typeof msg.payload === 'number') ? msg.payload : null\n      const dynamicOptions = (msg.payload.listenerParameters) ? msg.payload.listenerParameters.options : msg.payload.options\n\n      if (node.action !== 'events') {\n        coreListener.internalDebugLog('create monitoring subscription')\n        const monitoringOptions = dynamicOptions || coreListener.getSubscriptionParameters(timeMilliseconds)\n        node.makeSubscription(monitoringOptions)\n      } else {\n        coreListener.internalDebugLog('create event subscription')\n        const eventOptions = dynamicOptions || coreListener.getEventSubscribtionParameters(timeMilliseconds)\n        node.makeSubscription(eventOptions)\n      }\n    }\n\n    node.setSubscriptionEvents = function (subscription) {\n      subscription.on('started', function () {\n        coreListener.internalDebugLog('Subscription started')\n        coreListener.core.setNodeStatusTo(node, 'started')\n        node.monitoredItems.clear()\n        node.stateMachine.startsub()\n      })\n\n      subscription.on('terminated', function () {\n        coreListener.internalDebugLog('Subscription terminated')\n        coreListener.core.setNodeStatusTo(node, 'terminated')\n        node.stateMachine.terminatesub().idlesub()\n        node.resetSubscription()\n      })\n\n      subscription.on('internal_error', function (err) {\n        coreListener.internalDebugLog('internal_error: ' + err.message)\n        if (node.showErrors) {\n          node.error(err, {payload: 'Internal Error'})\n        }\n        coreListener.core.setNodeStatusTo(node, 'error')\n        node.stateMachine.errorsub()\n        node.resetSubscription()\n      })\n\n      subscription.on('item_added', function (monitoredItem) {\n        node.setMonitoring(monitoredItem)\n        node.updateSubscriptionStatus()\n      })\n    }\n\n    node.makeSubscription = function (parameters) {\n      if (coreListener.core.checkSessionNotValid(node.opcuaSession, 'ListenerSubscription')) {\n        return\n      }\n\n      if (!parameters) {\n        coreListener.internalDebugLog('Subscription Parameters Not Valid')\n        return\n      } else {\n        coreListener.internalDebugLog('Subscription Parameters: ' + JSON.stringify(parameters))\n      }\n\n      uaSubscription = new coreListener.core.nodeOPCUA.ClientSubscription(node.opcuaSession, parameters)\n      coreListener.internalDebugLog('New Subscription Created')\n\n      if (node.connector) {\n        node.connector.hasOpcUaSubscriptions = true\n      }\n\n      node.setSubscriptionEvents(uaSubscription)\n      node.stateMachine.initsub()\n    }\n\n    node.resetSubscription = function () {\n      node.sendAllMonitoredItems('SUBSCRIPTION TERMINATED')\n    }\n\n    node.sendAllMonitoredItems = function (payload) {\n      let addressSpaceItems = []\n\n      node.monitoredASO.forEach(function (value, key) {\n        addressSpaceItems.push({name: '', nodeId: key, datatypeName: ''})\n      })\n\n      node.send({payload: payload, addressSpaceItems: addressSpaceItems})\n\n      node.monitoredItems.clear()\n      node.monitoredASO.clear()\n\n      /*\n      if (node.connector) {\n        node.connector.hasOpcUaSubscriptions = false\n      }\n       */\n    }\n\n    node.subscribeActionInput = function (msg) {\n      if (node.stateMachine.getMachineState() !== coreListener.RUNNING_STATE) {\n        node.messageQueue.push(msg)\n      } else {\n        node.subscribeMonitoredItem(msg)\n      }\n    }\n\n    node.subscribeEventsInput = function (msg) {\n      if (node.stateMachine.getMachineState() !== coreListener.RUNNING_STATE) {\n        node.messageQueue.push(msg)\n      } else {\n        node.subscribeMonitoredEvent(msg)\n      }\n    }\n\n    node.updateSubscriptionStatus = function () {\n      coreListener.internalDebugLog('listening' + ' (' + node.monitoredItems.size + ')')\n      coreListener.core.setNodeStatusTo(node, 'listening' + ' (' + node.monitoredItems.size + ')')\n    }\n\n    node.handleMonitoringOfGroupedItems = function (msg) {\n      if (node.monitoredItemGroup && node.monitoredItemGroup.groupId !== null) {\n        node.monitoredItemGroup.terminate(function (err) {\n          if (err) {\n            coreListener.internalDebugLog('Monitoring Terminate Error')\n            coreListener.internalDebugLog(err)\n          }\n          node.monitoredItems.clear()\n          node.monitoredASO.clear()\n          node.monitoredItemGroup.groupId = null\n          node.updateSubscriptionStatus()\n        })\n      } else {\n        coreListener.buildNewMonitoredItemGroup(node, msg, msg.addressSpaceItems, uaSubscription)\n          .then(function (result) {\n            if (!result.monitoredItemGroup) {\n              node.error(new Error('No Monitored Item Group In Result Of NodeOPCUA'))\n            } else {\n              result.monitoredItemGroup.groupId = _.uniqueId('group_')\n              node.monitoredItemGroup = result.monitoredItemGroup\n            }\n          }).catch(function (err) {\n            coreListener.subscribeDebugLog('Monitoring Build Item Group Error')\n            coreListener.subscribeDebugLog(err)\n            if (node.showErrors) {\n              node.error(err, msg)\n            }\n          })\n      }\n    }\n\n    node.handleMonitoringOfItems = function (msg) {\n      const itemsToMonitor = msg.addressSpaceItems.filter(addressSpaceItem => {\n        const nodeIdToMonitor = (typeof addressSpaceItem.nodeId === 'string') ? addressSpaceItem.nodeId : addressSpaceItem.nodeId.toString()\n        return typeof node.monitoredASO.get(nodeIdToMonitor) === 'undefined'\n      })\n\n      const itemsToTerminate = msg.addressSpaceItems.filter(addressSpaceItem => {\n        const nodeIdToMonitor = (typeof addressSpaceItem.nodeId === 'string') ? addressSpaceItem.nodeId : addressSpaceItem.nodeId.toString()\n        return typeof node.monitoredASO.get(nodeIdToMonitor) !== 'undefined'\n      })\n\n      if (itemsToMonitor.length > 0) {\n        const monitorMessage = Object.assign({}, msg)\n        monitorMessage.addressSpaceItems = itemsToMonitor\n        coreListener.subscribeDebugLog('itemsToMonitor ' + itemsToMonitor.length)\n        coreListener.monitorItems(node, monitorMessage, uaSubscription)\n      }\n\n      if (itemsToTerminate.length > 0) {\n        coreListener.subscribeDebugLog('itemsToTerminate ' + itemsToTerminate.length)\n        itemsToTerminate.forEach((addressSpaceItem) => {\n          const nodeIdToMonitor = (typeof addressSpaceItem.nodeId === 'string') ? addressSpaceItem.nodeId : addressSpaceItem.nodeId.toString()\n          const item = node.monitoredASO.get(nodeIdToMonitor)\n          if (item && item.monitoredItem) {\n            coreListener.subscribeDebugLog('Monitored Item Unsubscribe ' + nodeIdToMonitor)\n            item.monitoredItem.terminate(function (err) {\n              coreListener.subscribeDebugLog('Terminated Monitored Item ' + item.monitoredItem.itemToMonitor.nodeId)\n              node.monitoredItemTerminated(msg, item.monitoredItem, nodeIdToMonitor, err)\n            })\n          } else {\n            coreListener.subscribeDebugLog('Monitored Item Was Not Monitoring ' + nodeIdToMonitor)\n          }\n        })\n      }\n    }\n\n    node.subscribeMonitoredItem = function (msg) {\n      if (coreListener.core.checkSessionNotValid(node.opcuaSession, 'MonitorListener')) {\n        return\n      }\n\n      if (!coreListener.checkState(node, msg, 'Monitoring')) {\n        return\n      }\n\n      if (msg.addressSpaceItems.length) {\n        if (node.useGroupItems) {\n          node.handleMonitoringOfGroupedItems(msg)\n        } else {\n          node.handleMonitoringOfItems(msg)\n        }\n      }\n    }\n\n    node.handleEventSubscriptions = function (msg) {\n      for (let addressSpaceItem of msg.addressSpaceItems) {\n        if (!addressSpaceItem.nodeId) {\n          coreListener.eventDebugLog('Address Space Item Not Valid to Monitor Event Of ' + addressSpaceItem)\n          return\n        }\n\n        if (addressSpaceItem.datatypeName === 'ns=0;i=0') {\n          coreListener.subscribeDebugLog('Address Space Item Not Allowed to Monitor ' + addressSpaceItem)\n          return\n        }\n\n        let nodeIdToMonitor\n        if (typeof addressSpaceItem.nodeId === 'string') {\n          nodeIdToMonitor = addressSpaceItem.nodeId\n        } else {\n          nodeIdToMonitor = addressSpaceItem.nodeId.toString()\n        }\n\n        const item = node.monitoredASO.get(nodeIdToMonitor)\n\n        if (!item) {\n          coreListener.eventDebugLog('Regsiter Event Item ' + nodeIdToMonitor)\n          coreListener.buildNewEventItem(nodeIdToMonitor, msg, uaSubscription)\n            .then(function (result) {\n              if (result.monitoredItem.monitoredItemId) {\n                coreListener.eventDebugLog('Event Item Regsitered ' + result.monitoredItem.monitoredItemId + ' to ' + result.nodeId)\n                node.monitoredASO.set(result.nodeId.toString(), {\n                  monitoredItem: result.monitoredItem,\n                  topic: msg.topic || node.topic\n                })\n              }\n            }).catch(function (err) {\n              coreListener.eventDebugLog('Build Event Error')\n              coreListener.eventDebugLog(err)\n              if (node.showErrors) {\n                node.error(err, msg)\n              }\n            })\n        } else {\n          coreListener.eventDebugLog('Terminate Event Item' + nodeIdToMonitor)\n          const eventMessage = Object.assign({}, msg)\n          item.monitoredItem.terminate(function (err) {\n            coreListener.eventDebugLog('Terminated Monitored Item ' + item.monitoredItem.itemToMonitor.nodeId)\n            node.monitoredItemTerminated(eventMessage, item.monitoredItem, nodeIdToMonitor, err)\n          })\n        }\n      }\n    }\n\n    node.subscribeMonitoredEvent = function (msg) {\n      if (coreListener.core.checkSessionNotValid(node.opcuaSession, 'EventListener')) {\n        return\n      }\n\n      if (!coreListener.checkState(node, msg, 'Event')) {\n        return\n      }\n\n      node.handleEventSubscriptions(msg)\n    }\n\n    node.monitoredItemTerminated = function (msg, monitoredItem, nodeId, err) {\n      if (err) {\n        if (monitoredItem && monitoredItem.monitoredItemId) {\n          coreListener.internalDebugLog(err.message + ' on ' + monitoredItem.monitoredItemId)\n        } else {\n          coreListener.internalDebugLog(err.message + ' on monitoredItem')\n        }\n        if (node.showErrors) {\n          node.error(err, msg)\n        }\n      }\n      node.updateMonitoredItemLists(monitoredItem, nodeId)\n    }\n\n    node.updateMonitoredItemLists = function (monitoredItem, nodeId) {\n      coreListener.internalDebugLog('updateMonitoredItemLists = UMIL')\n\n      if (monitoredItem && monitoredItem.itemToMonitor) {\n        if (node.monitoredItems.has(monitoredItem.monitoredItemId)) {\n          node.monitoredItems.delete(monitoredItem.monitoredItemId)\n        }\n\n        if (coreListener.core.isNodeId(monitoredItem.itemToMonitor.nodeId)) {\n          coreListener.internalDebugLog('UMIL Terminate Monitored Item ' + monitoredItem.itemToMonitor.nodeId)\n          if (node.monitoredASO.has(nodeId)) {\n            node.monitoredASO.delete(nodeId)\n          }\n        } else {\n          coreListener.internalDebugLog('UMIL monitoredItem NodeId is not valid Id:' + monitoredItem.monitoredItemId)\n          node.monitoredASO.forEach(function (value, key, map) {\n            coreListener.internalDebugLog('UMIL monitoredItem removing from ASO list key:' + key + ' value ' + value.monitoredItem.monitoredItemId)\n            if (value.monitoredItem.monitoredItemId && value.monitoredItem.monitoredItemId === monitoredItem.monitoredItemId) {\n              coreListener.internalDebugLog('UMIL monitoredItem removed from ASO list' + key)\n              map.delete(key)\n            }\n          })\n        }\n\n        node.updateSubscriptionStatus()\n      }\n    }\n\n    node.setMonitoring = function (monitoredItemToSet) {\n      const monitoredItem = monitoredItemToSet\n      if (!monitoredItem || monitoredItem.monitoredItemId === void 0) {\n        coreListener.internalDebugLog('monitoredItem Id from server is not valid Id: ' + monitoredItem.monitoredItemId)\n        return\n      }\n\n      if (!coreListener.core.isNodeId(monitoredItem.itemToMonitor.nodeId)) {\n        coreListener.internalDebugLog('monitoredItem NodeId is not valid Id:' + monitoredItem.monitoredItemId)\n      }\n\n      coreListener.internalDebugLog('add monitoredItem to list Id:' + monitoredItem.monitoredItemId + ' nodeId: ' + monitoredItem.itemToMonitor.nodeId)\n      node.monitoredItems.set(monitoredItem.monitoredItemId, monitoredItem)\n\n      monitoredItem.on('initialized', function () {\n        coreListener.internalDebugLog('monitoredItem ' + monitoredItem.itemToMonitor.nodeId + ' initialized on ' + monitoredItem.monitoredItemId)\n      })\n\n      monitoredItem.on('changed', function (dataValue) {\n        coreListener.detailDebugLog('data changed for item: ' + monitoredItem.itemToMonitor.nodeId + ' with Id ' + monitoredItem.monitoredItemId)\n        if (!monitoredItem.monitoringParameters.filter) {\n          node.sendDataFromMonitoredItem(monitoredItem, dataValue)\n        } else {\n          node.sendDataFromEvent(monitoredItem, dataValue)\n        }\n      })\n\n      monitoredItem.on('error', function (err) {\n        coreListener.internalDebugLog('monitoredItem Error: ' + err.message + ' on ' + monitoredItem.monitoredItemId)\n        if (node.showErrors) {\n          node.error(err, {payload: 'Monitored Item Error', monitoredItem: monitoredItem})\n        }\n\n        node.updateMonitoredItemLists(monitoredItem, monitoredItem.itemToMonitor.nodeId)\n\n        if (node.connector && coreListener.core.isSessionBad(err)) {\n          node.sendAllMonitoredItems('BAD SESSION')\n          node.terminateSubscription(() => {\n            node.connector.resetBadSession()\n          })\n        }\n      })\n\n      monitoredItem.on('terminated', function () {\n        coreListener.internalDebugLog('Terminated For ' + monitoredItem.monitoredItemId)\n        node.updateMonitoredItemLists(monitoredItem, monitoredItem.itemToMonitor.nodeId)\n      })\n    }\n\n    node.sendDataFromMonitoredItem = function (monitoredItem, dataValue) {\n      if (!monitoredItem) {\n        coreListener.internalDebugLog('Monitored Item Is Not Valid On Change Event While Monitoring')\n        return\n      }\n\n      const nodeId = (coreListener.core.isNodeId(monitoredItem.itemToMonitor.nodeId)) ? monitoredItem.itemToMonitor.nodeId.toString() : 'invalid'\n      const item = node.monitoredASO.get(nodeId)\n      const topic = (item) ? item.topic : node.topic\n\n      let msg = {\n        payload: {},\n        topic: topic,\n        addressSpaceItems: [{name: '', nodeId, datatypeName: ''}],\n        nodetype: 'listen',\n        injectType: 'subscribe'\n      }\n\n      coreListener.internalDebugLog('sendDataFromMonitoredItem: ' + msg.addressSpaceItems[0].nodeId)\n\n      let dataValuesString = {}\n      msg.justValue = node.justValue\n      if (node.justValue) {\n        dataValuesString = JSON.stringify(dataValue, null, 2)\n        try {\n          RED.util.setMessageProperty(msg, 'payload', JSON.parse(dataValuesString))\n        } catch (err) {\n          if (node.showErrors) {\n            node.warn('JSON not to parse from string for monitored item')\n            node.error(err, msg)\n          }\n\n          msg.payload = dataValuesString\n          msg.error = err.message\n        }\n      } else {\n        msg.payload = {dataValue, monitoredItem}\n      }\n\n      node.send(msg)\n    }\n\n    node.handleEventResults = function (msg, dataValue, eventResults, monitoredItem) {\n      coreListener.eventDetailDebugLog('Monitored Event Results ' + eventResults)\n\n      let dataValuesString = {}\n      if (node.justValue) {\n        dataValuesString = JSON.stringify({dataValue: dataValue}, null, 2)\n        try {\n          RED.util.setMessageProperty(msg, 'payload', JSON.parse(dataValuesString))\n        } catch (err) {\n          if (node.showErrors) {\n            node.warn('JSON not to parse from string for monitored item')\n            node.error(err, msg)\n          }\n\n          msg.payload = dataValuesString\n          msg.error = err.message\n        }\n      } else {\n        msg.payload = {dataValue, eventResults, monitoredItem}\n      }\n\n      node.send(msg)\n    }\n\n    node.sendDataFromEvent = function (monitoredItem, dataValue) {\n      if (!monitoredItem) {\n        coreListener.internalDebugLog('Monitored Item Is Not Valid On Change Event While Monitoring')\n        return\n      }\n\n      const nodeId = (coreListener.core.isNodeId(monitoredItem.itemToMonitor.nodeId)) ? monitoredItem.itemToMonitor.nodeId.toString() : 'invalid'\n      const item = node.monitoredASO.get(nodeId)\n      const topic = (item) ? item.topic : node.topic\n\n      let msg = {\n        payload: {},\n        topic: topic || node.topic, // default if item.topic is empty\n        addressSpaceItems: [{name: '', nodeId: nodeId, datatypeName: ''}],\n        nodetype: 'listen',\n        injectType: 'event'\n      }\n\n      coreListener.analyzeEvent(node.opcuaSession, node.getBrowseName, dataValue)\n        .then(function (eventResults) {\n          node.handleEventResults(msg, dataValue, eventResults, monitoredItem)\n        }).catch(function (err) {\n          node.errorHandling(err)\n        })\n    }\n\n    node.errorHandling = function (err) {\n      coreListener.internalDebugLog('Basic Error Handling')\n      coreListener.internalDebugLog(err)\n      if (node.showErrors) {\n        node.error(err, {payload: 'Error Handling'})\n      }\n\n      if (err) {\n        if (coreListener.core.isSessionBad(err)) {\n          node.sendAllMonitoredItems('BAD SESSION')\n          if (node.connector) {\n            node.terminateSubscription(() => {\n              node.connector.resetBadSession()\n            })\n          }\n        }\n      }\n    }\n\n    node.getBrowseName = function (session, nodeId, callback) {\n      coreListener.client.read(session, [{\n        nodeId: nodeId,\n        attributeId: AttributeIds.BrowseName\n      }], function (err, org, readValue) {\n        if (!err) {\n          if (readValue[0].statusCode === StatusCodes.Good) {\n            let browseName = readValue[0].value.value.name\n            return callback(null, browseName)\n          }\n        }\n        callback(err, 'Unknown')\n      })\n    }\n\n    node.handleListenerInput = function (msg) {\n      switch (node.action) {\n        case 'subscribe':\n          node.subscribeMonitoredItem(msg)\n          break\n        case 'events':\n          node.subscribeMonitoredEvent(msg)\n          break\n        default:\n          node.error(new Error('Type Of Action To Listener Is Not Valid'), msg)\n      }\n    }\n\n    node.on('input', function (msg) {\n      if (!coreListener.core.checkConnectorState(node, msg, 'Listener')) {\n        return\n      }\n\n      if (msg.nodetype === 'browse') { /* browse is just to address listening to many nodes */\n        msg.nodetype = 'inject'\n        msg.injectType = 'listen'\n        msg.addressSpaceItems = coreListener.core.buildNodesToListen(msg)\n      }\n\n      if (!msg.addressSpaceItems || !msg.addressSpaceItems.length) {\n        coreListener.subscribeDebugLog('Address-Space-Item Set Not Valid')\n        if (node.showErrors) {\n          node.error(new Error('Address-Space-Item Set Not Valid'), msg)\n        }\n        return\n      }\n\n      if (node.stateMachine.getMachineState() === 'IDLE') {\n        node.messageQueue.push(msg)\n        node.createSubscription(msg)\n      } else {\n        if (!coreListener.checkState(node, msg, 'Input')) {\n          node.messageQueue.push(msg)\n          return\n        }\n        node.handleListenerInput(msg)\n      }\n    })\n\n    coreListener.core.registerToConnector(node)\n\n    if (node.connector) {\n      node.connector.on('connector_init', () => {\n        coreListener.internalDebugLog('Reset Subscription On Connector Init')\n        uaSubscription = null\n        node.monitoredItems = new Map()\n        node.monitoredASO = new Map()\n        node.stateMachine = coreListener.createStatelyMachine()\n        node.monitoredItemGroup = null\n      })\n\n      node.connector.on('connection_stopped', () => {\n        node.terminateSubscription(() => {\n          uaSubscription = null\n          coreListener.internalDebugLog('Subscription Was Terminated On Connector Event -> connection stopped')\n        })\n      })\n\n      node.connector.on('connection_end', () => {\n        node.terminateSubscription(() => {\n          uaSubscription = null\n          coreListener.internalDebugLog('Subscription Was Terminated On Connector Event -> connection ends')\n        })\n      })\n\n      node.connector.on('connection_reconfigure', () => {\n        node.terminateSubscription(() => {\n          uaSubscription = null\n          coreListener.internalDebugLog('Subscription Was Terminated On Connector Event -> connection reconfigure')\n        })\n      })\n\n      node.connector.on('connection_renew', () => {\n        node.terminateSubscription(() => {\n          uaSubscription = null\n          coreListener.internalDebugLog('Subscription Was Terminated On Connector Event -> connection renew')\n        })\n      })\n    }\n\n    node.terminateSubscription = function (done) {\n      if (uaSubscription && node.stateMachine.getMachineState() === coreListener.RUNNING_STATE) {\n        node.stateMachine.terminatesub()\n        uaSubscription.terminate(() => {\n          node.stateMachine.idlesub()\n          done()\n        })\n      } else {\n        node.stateMachine.idlesub()\n        done()\n      }\n    }\n\n    node.on('close', function (done) {\n      node.terminateSubscription(() => {\n        uaSubscription = null\n        coreListener.core.deregisterToConnector(node, done)\n        coreListener.internalDebugLog('Close Listener Node')\n      })\n    })\n\n    /* #########   FSM EVENTS  #########     */\n\n    node.stateMachine.onIDLE = function (event, oldState, newState) {\n      coreListener.detailDebugLog('Listener IDLE Event FSM')\n    }\n\n    node.stateMachine.onREQUESTED = function (event, oldState, newState) {\n      coreListener.detailDebugLog('Listener REQUESTED Event FSM')\n    }\n\n    node.stateMachine.onINIT = function (event, oldState, newState) {\n      coreListener.detailDebugLog('Listener INIT Event FSM')\n    }\n\n    node.stateMachine.onSTARTED = function (event, oldState, newState) {\n      coreListener.detailDebugLog('Listener STARTED Event FSM')\n\n      switch (node.action) {\n        case 'subscribe':\n          while (node.messageQueue.length > 0) {\n            node.subscribeMonitoredItem(node.messageQueue.shift())\n          }\n          break\n        case 'events':\n          while (node.messageQueue.length > 0) {\n            node.subscribeMonitoredEvent(node.messageQueue.shift())\n          }\n          break\n        default:\n          coreListener.internalDebugLog('Unknown Action Type ' + node.action)\n      }\n    }\n\n    node.stateMachine.onTERMINATED = function (event, oldState, newState) {\n      coreListener.detailDebugLog('Listener TERMINATED Event FSM')\n    }\n\n    node.stateMachine.onERROR = function (event, oldState, newState) {\n      coreListener.detailDebugLog('Listener ERROR Event FSM')\n    }\n\n    node.stateMachine.onEND = function (event, oldState, newState) {\n      coreListener.detailDebugLog('Listener END Event FSM')\n    }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Listener', OPCUAIIoTListener)\n}\n"]}