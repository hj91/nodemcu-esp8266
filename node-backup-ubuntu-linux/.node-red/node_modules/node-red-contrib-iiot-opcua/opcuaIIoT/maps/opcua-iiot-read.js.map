{"version":3,"sources":["opcua-iiot-read.js"],"names":["module","exports","RED","require","install","coreClient","nodes","core","config","OPCUAIIoTRead","createNode","attributeId","this","parseInt","maxAge","depth","name","justValue","showStatusActivities","showErrors","parseStrings","historyDays","getNode","node","initClientNode","handleReadError","err","msg","readDebugLog","connector","isSessionBad","readAllFromNodeId","session","itemsToRead","readAllAttributes","send","buildResultMessage","readResult","catch","readValueFromNodeId","readVariableValue","then","message","readHistoryDataFromNodeId","historyStart","Date","setDate","historyEnd","startDate","getDate","readHistoryValue","payload","readFromNodeId","item","endDate","transformedItem","transformedItemsToRead","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","Number","push","_iterator","return","read","readFromSession","originMsg","Object","checkSessionNotValid","READ_TYPE","ALL","assign","HISTORY","readType","nodetype","readtype","dataValuesString","extractDataValueString","setMessageProperties","enhanceMessage","results","stringValue","util","setMessageProperty","JSON","parse","stringify","error","resultsConverted","warn","checkConnectorState","opcuaSession","buildNodesToRead","on","done","deregisterToConnector"],"mappings":"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","file":"../opcua-iiot-read.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Read Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreClient = require('./core/opcua-iiot-core-client')\n\n  function OPCUAIIoTRead (config) {\n    RED.nodes.createNode(this, config)\n    this.attributeId = parseInt(config.attributeId) || 0\n    this.maxAge = parseInt(config.maxAge) || 1\n    this.depth = parseInt(config.depth) || 1\n    this.name = config.name\n    this.justValue = config.justValue\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.parseStrings = config.parseStrings\n    this.historyDays = parseInt(config.historyDays) || 1\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let node = coreClient.core.initClientNode(this)\n\n    node.handleReadError = function (err, msg) {\n      coreClient.readDebugLog(err)\n      if (node.showErrors) {\n        node.error(err, msg)\n      }\n\n      if (node.connector && coreClient.core.isSessionBad(err)) {\n        node.connector.resetBadSession()\n      }\n    }\n\n    node.readAllFromNodeId = function (session, itemsToRead, msg) {\n      coreClient.readAllAttributes(session, itemsToRead, msg)\n        .then(function (readResult) {\n          try {\n            node.send(node.buildResultMessage('AllAttributes', readResult))\n          } catch (err) {\n            node.handleReadError(err, readResult.msg)\n          }\n        }).catch(function (err) {\n          node.handleReadError(err, msg)\n        })\n    }\n\n    node.readValueFromNodeId = function (session, itemsToRead, msg) {\n      coreClient.readVariableValue(session, itemsToRead, msg)\n        .then(function (readResult) {\n          let message = node.buildResultMessage('VariableValue', readResult)\n          node.send(message)\n        }).catch(function (err) {\n          node.handleReadError(err, msg)\n        })\n    }\n\n    node.readHistoryDataFromNodeId = function (session, itemsToRead, msg) {\n      const startDate = new Date()\n      node.historyStart = new Date()\n      node.historyStart.setDate(startDate.getDate() - node.historyDays)\n      node.historyEnd = new Date()\n\n      coreClient.readHistoryValue(\n        session,\n        itemsToRead,\n        msg.payload.historyStart || node.historyStart,\n        msg.payload.historyEnd || node.historyEnd,\n        msg)\n        .then(function (readResult) {\n          let message = node.buildResultMessage('HistoryValue', readResult)\n          message.historyStart = readResult.startDate || node.historyStart\n          message.historyEnd = readResult.endDate || node.historyEnd\n          node.send(message)\n        }).catch(function (err) {\n          node.handleReadError(err, msg)\n        })\n    }\n\n    node.readFromNodeId = function (session, itemsToRead, msg) {\n      let item = null\n      let transformedItem = null\n      let transformedItemsToRead = []\n\n      for (item of itemsToRead) {\n        transformedItem = {\n          nodeId: item,\n          attributeId: Number(node.attributeId) || null\n        }\n        transformedItemsToRead.push(transformedItem)\n      }\n\n      coreClient.read(session, transformedItemsToRead, msg.payload.maxAge || node.maxAge, msg)\n        .then(function (readResult) {\n          let message = node.buildResultMessage('Default', readResult)\n          message.maxAge = node.maxAge\n          node.send(message)\n        }).catch(function (err) {\n          node.handleReadError(err, msg)\n        })\n    }\n\n    node.readFromSession = function (session, itemsToRead, originMsg) {\n      let msg = Object.assign({}, originMsg)\n      if (coreClient.core.checkSessionNotValid(session, 'Reader')) {\n        return\n      }\n\n      coreClient.readDebugLog('Read With AttributeId ' + node.attributeId)\n      switch (parseInt(node.attributeId)) {\n        case coreClient.READ_TYPE.ALL:\n          node.readAllFromNodeId(session, itemsToRead, msg)\n          break\n        case coreClient.READ_TYPE.VALUE:\n          node.readValueFromNodeId(session, itemsToRead, msg)\n          break\n        case coreClient.READ_TYPE.HISTORY:\n          node.readHistoryDataFromNodeId(session, itemsToRead, msg)\n          break\n        default:\n          node.readFromNodeId(session, itemsToRead, msg)\n      }\n    }\n\n    node.buildResultMessage = function (readType, readResult) {\n      let message = Object.assign({}, readResult.msg)\n      message.payload = {}\n      message.nodetype = 'read'\n      message.readtype = readType\n      message.attributeId = node.attributeId\n      message.justValue = node.justValue\n\n      let dataValuesString = node.extractDataValueString(readResult)\n      message = node.setMessageProperties(message, readResult, dataValuesString)\n\n      if (!node.justValue) {\n        message = node.enhanceMessage(message, readResult)\n      }\n\n      return message\n    }\n\n    node.extractDataValueString = function (readResult) {\n      let dataValuesString = {}\n      if (node.justValue) {\n        dataValuesString = JSON.stringify(readResult.results, null, 2)\n      } else {\n        dataValuesString = JSON.stringify(readResult, null, 2)\n      }\n      return dataValuesString\n    }\n\n    node.setMessageProperties = function (message, readResult, stringValue) {\n      try {\n        RED.util.setMessageProperty(message, 'payload', JSON.parse(stringValue))\n      } catch (err) {\n        if (node.showErrors) {\n          node.warn('JSON not to parse from string for dataValues type ' + JSON.stringify(readResult, null, 2))\n          node.error(err, readResult.msg)\n        }\n\n        message.payload = stringValue\n        message.error = err.message\n      }\n      return message\n    }\n\n    node.enhanceMessage = function (message, readResult) {\n      try {\n        message.resultsConverted = {}\n        let dataValuesString = JSON.stringify(readResult.results, null, 2)\n        RED.util.setMessageProperty(message, 'resultsConverted', JSON.parse(dataValuesString))\n      } catch (err) {\n        if (node.showErrors) {\n          node.warn('JSON not to parse from string for dataValues type ' + readResult.results)\n          node.error(err, readResult.msg)\n        }\n\n        message.resultsConverted = null\n        message.error = err.message\n      }\n      return message\n    }\n\n    node.on('input', function (msg) {\n      if (!coreClient.core.checkConnectorState(node, msg, 'Read')) {\n        return\n      }\n\n      try {\n        node.readFromSession(node.opcuaSession, coreClient.core.buildNodesToRead(msg), msg)\n      } catch (err) {\n        node.handleReadError(err, msg)\n      }\n    })\n\n    coreClient.core.registerToConnector(node)\n\n    node.on('close', (done) => {\n      coreClient.core.deregisterToConnector(node, done)\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Read', OPCUAIIoTRead)\n}\n"]}