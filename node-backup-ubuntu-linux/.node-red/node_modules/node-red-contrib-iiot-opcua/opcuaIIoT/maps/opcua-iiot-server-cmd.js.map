{"version":3,"sources":["opcua-iiot-server-cmd.js"],"names":["module","exports","RED","require","install","core","nodes","registerType","config","OPCUAIIoTCMD","createNode","commandtype","this","nodeId","node","internalDebugLog","msg","on","nodetype","injectType","commandType","addressSpaceItem","addressSpaceItems","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","payload","err","return","send"],"mappings":"AAOA,aAOAA,OAAOC,QAAU,SAAUC,GACzBC,QAAQ,sBAAsBC,UAC9B,IAAIC,EAAOF,QAAQ,0BAgBgDD,EAAAI,MAAAC,aAAA,4BAdnE,SAAuBC,GAAvBN,EAAAI,MAASG,WAAcD,KAAvBA,GACEN,KAAII,YAAMI,EAAVC,YACAC,KAAKD,OAAAA,EAAcH,OACnBI,KAAKC,KAALL,EAAcA,KAGd,IAAIM,EAAOF,KACXP,EAAKU,iBAAiB,iBAGpBC,EAAGC,GAACC,QAAW,SAAfF,GAKE,GAJFA,EAAIG,SAAJ,SACAH,EAAII,WAAJ,MAAAJ,EAAII,YAAcN,EAAKH,YAGrBK,EAAIK,mBAAJ,EAAAL,EAAAM,kBAAAC,OAAA,CAD6D,IAAAF,EAC7DG,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAD6D,IAAA,IAAAC,EAAAC,EAAAb,EAAAM,kBAAAQ,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAAH,EAAAO,EAAAM,MAAAlB,EAAAmB,QAAA,CAIzDtB,OAAQQ,EAAiBR,QAF7BG,EAAAmB,QAAAtB,QAAKQ,EAAAA,KAAAA,GADL,MAAAe,GAAAX,GAAA,EAAAC,EAAAU,EAAA,QAAA,IAAAZ,GAAA,MAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,QAAA,GAAAZ,EAAA,MAAAC,SAUIZ,EAAKD,SALPG,EAAAmB,QAAQA,CACNrB,OAAKwB,EAAKtB,SAP+CF,EAAAwB,KAAAtB,KAAAF,EAAAG,GAAA,QAAA,SAAAgB,GAAA5B,EAAAU,iBAAA,kBAAAkB","file":"../opcua-iiot-server-cmd.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Address space object Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let core = require('./core/opcua-iiot-core')\n\n  function OPCUAIIoTCMD (config) {\n    RED.nodes.createNode(this, config)\n    this.commandtype = config.commandtype\n    this.nodeId = config.nodeId\n    this.name = config.name\n\n    let node = this\n    core.internalDebugLog('Open CMD Node')\n\n    node.on('input', function (msg) {\n      msg.nodetype = 'inject'\n      msg.injectType = 'CMD'\n      msg.commandType = node.commandtype\n\n      if (msg.addressSpaceItems && msg.addressSpaceItems.length > 0) {\n        let addressSpaceItem\n        for (addressSpaceItem of msg.addressSpaceItems) {\n          msg.payload = {\n            nodeId: addressSpaceItem.nodeId\n          }\n          if (msg.payload.nodeId) {\n            node.send(msg)\n          }\n        }\n      } else {\n        if (node.nodeId) {\n          msg.payload = {\n            nodeId: node.nodeId\n          }\n        }\n        node.send(msg)\n      }\n    })\n\n    node.on('close', (done) => {\n      core.internalDebugLog('Close CMD Node')\n      done()\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Server-Command', OPCUAIIoTCMD)\n}\n"]}