{"version":3,"sources":["opcua-iiot-server.js"],"names":["module","exports","RED","require","install","coreServer","internalDebugLog","config","nodes","OPCUAIIoTServer","createNode","this","asoDemo","node","readConfigOfServerNode","initServerNode","__dirname","loadNodeSets","buildServerOptions","serverOptions","userManager","userName","password","isValidUser","checkUser","setDiscoveryOptions","createServer","verbose","settings","JSON","stringify","opcuaServer","createServerObject","core","setNodeStatusTo","initialize","initNewServer","initRegisterServerMethod","err","handleServerError","payload","postInitialize","constructAddressSpace","then","start","emit","catch","initialized","changeAddressSpace","executeOpcuaCommand","msg","Error","injectType","send","objecttype","indexOf","addVariableToAddressSpace","addObjectToAddressSpace","restartServer","on","done","closeServer","shutdown","delayToClose"],"mappings":"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","file":"../opcua-iiot-server.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Server Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreServer = require('./core/opcua-iiot-core-server')\n\n  function OPCUAIIoTServer (config) {\n    RED.nodes.createNode(this, config)\n    coreServer.internalDebugLog('Open Server Node')\n\n    this.asoDemo = config.asoDemo // ASO (address space objects) Demo\n    let node = coreServer.readConfigOfServerNode(this, config)\n    node = coreServer.initServerNode(this)\n    node = coreServer.loadNodeSets(node, __dirname)\n    node = coreServer.loadCertificates(node)\n\n    node.buildServerOptions = function () {\n      let serverOptions = coreServer.buildServerOptions(node, 'Fix')\n      serverOptions.userManager = {\n        isValidUser: function (userName, password) {\n          return coreServer.checkUser(node, userName, password)\n        }\n      }\n      return coreServer.setDiscoveryOptions(node, serverOptions)\n    }\n\n    node.createServer = function (serverOptions) {\n      if (RED.settings.verbose) {\n        coreServer.detailDebugLog('serverOptions:' + JSON.stringify(serverOptions))\n      }\n      node.opcuaServer = coreServer.createServerObject(node, serverOptions)\n      coreServer.core.setNodeStatusTo(node, 'waiting')\n      node.opcuaServer.initialize(node.postInitialize)\n      coreServer.setOPCUAServerListener(node)\n    }\n\n    node.initNewServer = function () {\n      node = coreServer.initRegisterServerMethod(node)\n      let serverOptions = node.buildServerOptions()\n      serverOptions = coreServer.setDiscoveryOptions(node, serverOptions)\n\n      try {\n        node.createServer(serverOptions)\n      } catch (err) {\n        node.emit('server_create_error')\n        coreServer.handleServerError(node, err, {payload: 'Server Failure! Please, check the server settings!'})\n      }\n    }\n\n    node.postInitialize = function () {\n      coreServer.constructAddressSpace(node.opcuaServer, node.asoDemo)\n        .then(function (err) {\n          if (err) {\n            coreServer.handleServerError(node, err, {payload: 'Server Address Space Problem'})\n          } else {\n            coreServer.start(node.opcuaServer, node)\n              .then(function () {\n                coreServer.core.setNodeStatusTo(node, 'active')\n                node.emit('server_running')\n              }).catch(function (err) {\n                node.opcuaServer = null\n                node.emit('server_start_error')\n                coreServer.core.setNodeStatusTo(node, 'errors')\n                coreServer.handleServerError(node, err, {payload: 'Server Start Failure'})\n              })\n          }\n        }).catch(function (err) {\n          coreServer.handleServerError(node, err, {payload: 'Server Address Space Failure'})\n        })\n    }\n\n    node.initNewServer()\n\n    node.on('input', function (msg) {\n      if (!node.opcuaServer || !node.initialized) {\n        coreServer.handleServerError(node, new Error('Server Not Ready For Inputs'), msg)\n        return\n      }\n\n      switch (msg.injectType) {\n        case 'ASO':\n          node.changeAddressSpace(msg)\n          break\n        case 'CMD':\n          node.executeOpcuaCommand(msg)\n          break\n        default:\n          coreServer.handleServerError(node, new Error('Unknown Inject Type ' + msg.injectType), msg)\n      }\n\n      node.send(msg)\n    })\n\n    node.changeAddressSpace = function (msg) { // TODO: refactor to work with the new OPC UA type list\n      if (msg.payload.objecttype && msg.payload.objecttype.indexOf('Variable') > -1) {\n        coreServer.addVariableToAddressSpace(node, msg, msg.payload.objecttype)\n      } else {\n        coreServer.addObjectToAddressSpace(node, msg, msg.payload.objecttype)\n      }\n    }\n\n    node.executeOpcuaCommand = function (msg) {\n      switch (msg.commandType) {\n        case 'restart':\n          node.restartServer()\n          break\n        case 'deleteNode':\n          coreServer.deleteNOdeFromAddressSpace(node, msg)\n          break\n        default:\n          coreServer.handleServerError(node, new Error('Unknown OPC UA Command'), msg)\n      }\n    }\n\n    node.restartServer = function () {\n      coreServer.internalDebugLog('Restart OPC UA Server')\n      coreServer.restartServer(node)\n\n      if (node.opcuaServer) {\n        coreServer.internalDebugLog('OPC UA Server restarted')\n      } else {\n        coreServer.internalDebugLog('Can not restart OPC UA Server')\n      }\n    }\n\n    node.on('close', (done) => {\n      node.closeServer(() => {\n        coreServer.internalDebugLog('Close Server Node')\n        done()\n      })\n    })\n\n    node.closeServer = function (done) {\n      coreServer.destructAddressSpace(() => {\n        node.opcuaServer.shutdown(node.delayToClose, done)\n      })\n    }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Server', OPCUAIIoTServer)\n}\n"]}