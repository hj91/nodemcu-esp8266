{"version":3,"sources":["opcua-iiot-write.js"],"names":["module","exports","RED","require","install","coreClient","registerToConnector","config","this","name","justValue","OPCUAIIoTWrite","nodes","showStatusActivities","showErrors","connector","node","core","initClientNode","writeDebugLog","err","handleWriteError","error","isSessionBad","resetBadSession","writeToSession","session","originMsg","checkSessionNotValid","msg","Object","assign","nodesToWrite","buildNodesToWrite","write","then","writeResult","message","buildResultMessage","catch","result","nodetype","extractDataValueString","dataValuesString","JSON","stringify","statusCodes","setMessageProperties","stringValue","util","setMessageProperty","parse","resultsConverted","checkConnectorState","injectType","opcuaSession","warn","on","deregisterToConnector"],"mappings":"AAQA,8PAOAA,OAAOC,QAAU,SAAUC,GACzBC,QAAQ,sBAAsBC,UADhCJ,IAAMK,EAAWF,QAAUD,iCAoGvBG,EAAAA,MAAAA,aAAgBC,mBAhGlB,SAAyBC,GAFzBL,EAAIG,MAAAA,WAAaF,KAAQI,GAIvBC,KAAKC,KAAOF,EAAOE,KAFrBD,KAAAE,UAASC,EAAgBJ,UACvBL,KAAIU,qBAAuBL,EAA3BM,qBACAL,KAAKC,WAAaF,EAAlBO,WACAN,KAAKE,UAAYH,EAAAA,MAAOG,QAAxBH,EAAAQ,WAEA,IAAAC,EAAKF,EAAaP,KAAOO,eAAzBN,MAGAQ,EAAIA,iBAAkBC,SAAKC,EAAAA,GAGzBb,EAAWc,cAAcC,GADtBC,EAAAA,YACHhB,EAAAA,MAAWc,EAAAA,GAETH,EAAKM,WAALjB,EAAAY,KAAAM,aAAAH,IACDJ,EAAAD,UAAAS,mBAIAR,EAAAS,eAAA,SAAAC,EAAAC,GARH,IAAAtB,EAAAY,KAAAW,qBAAAF,EAAA,UAAA,CAaI,IAAAG,EAAAC,OAAAC,OAAA,GAAAJ,GACDK,EAAA3B,EAAAY,KAAAgB,kBAAAJ,GAIDxB,EAAW6B,MAAMR,EAASM,EAAcH,GAAKM,KAAK,SAAUC,GAF5D,IACIJ,IAAAA,EAAYhB,EAAGX,mBAAgB4B,GACnC5B,EAAAA,KAAW6B,GACT,MAAId,GACFJ,EAAIqB,iBAAeC,EAAAA,MADrBC,MAGE,SAAYnB,GACZJ,EAAAA,iBAAKK,EAALQ,OAIHb,EATDsB,mBAAA,SAAAE,GAPF,IAAAH,EAAAP,OAAAC,OAAA,GAAAS,EAAAX,KAqBEQ,EAAQI,SAAW,QAFrBzB,EAAKsB,UAAAA,EAAqB5B,UAExB2B,IAAAA,EAAmBrB,EAAnB0B,uBAAAL,EAAAG,GAGA,OAFAH,EAAQ3B,EAAAA,qBAAR2B,EAAAG,EAAAG,IAKD3B,EARD0B,uBAAA,SAAAL,EAAAG,GAWE,IAAIG,EAAmB,GAStB,OAVED,EAAAA,WACHC,EAAoBC,KAApBC,UAAA,CAGIC,YAAaN,EAAOM,aAFpB9B,KAAKN,GAELoC,EAAAA,sBACOT,EAFT,eAKEM,EAAeC,KAAAC,UAAfL,EAAA,KAAA,GAEGG,GAMT3B,EAAK+B,qBAAuB,SAAUV,EAASG,EAAQQ,GAHrD,IAbF9C,EAAA+C,KAAAC,mBAAAb,EAAA,UAAAO,KAAAO,MAAAH,IAmBI,MAAO5B,GAHPf,EAAC0C,cAAuB3B,GACtBJ,EAAAF,aACFZ,EAAI+C,KAAKC,4DAAAA,QAATV,EAAAM,cACA9B,EAAOI,MAAKA,EAAAoB,EAAAX,MAMZQ,EAAQe,iBAAmBJ,EAJ3BX,EAAQf,MAACR,EAATuB,QAEErB,OAAAA,GAEFqB,EAAAA,GAAAA,QAAQe,SAAAA,GACRf,EAAApB,KAAmBoC,oBAAnBrC,EAAAa,EAAA,WAVJ,UAAAA,EAAAyB,WAqBItC,EAAKS,eAAeT,EAAKuC,aAAc1B,IALzCxB,EAAKA,cAAgBgD,qBAAhBxB,EAA+CyB,WAAU,+BAC5DtC,EAAAF,YACDE,EAAAwC,KAAA,qBAAA3B,EAAAyB,WAAA,6CAKCjD,EAAAA,KAAWc,oBAAcH,GACzBA,EAAAyC,GAAIzC,QAAKF,SAAAA,GACPE,EAAKwC,KAAKE,sBAAuB7B,EAAIyB","file":"../opcua-iiot-write.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Write Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreClient = require('./core/opcua-iiot-core-client')\n\n  function OPCUAIIoTWrite (config) {\n    RED.nodes.createNode(this, config)\n    this.name = config.name\n    this.justValue = config.justValue\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let node = coreClient.core.initClientNode(this)\n\n    node.handleWriteError = function (err, msg) {\n      coreClient.writeDebugLog(err)\n      if (node.showErrors) {\n        node.error(err, msg)\n      }\n\n      if (node.connector && coreClient.core.isSessionBad(err)) {\n        node.connector.resetBadSession()\n      }\n    }\n\n    node.writeToSession = function (session, originMsg) {\n      if (coreClient.core.checkSessionNotValid(session, 'Writer')) {\n        return\n      }\n\n      let msg = Object.assign({}, originMsg)\n      let nodesToWrite = coreClient.core.buildNodesToWrite(msg)\n      coreClient.write(session, nodesToWrite, msg).then(function (writeResult) {\n        try {\n          let message = node.buildResultMessage(writeResult)\n          node.send(message)\n        } catch (err) {\n          node.handleWriteError(err, msg)\n        }\n      }).catch(function (err) {\n        node.handleWriteError(err, msg)\n      })\n    }\n\n    node.buildResultMessage = function (result) {\n      let message = Object.assign({}, result.msg)\n      message.nodetype = 'write'\n      message.justValue = node.justValue\n\n      let dataValuesString = node.extractDataValueString(message, result)\n      message = node.setMessageProperties(message, result, dataValuesString)\n      return message\n    }\n\n    node.extractDataValueString = function (message, result) {\n      let dataValuesString = {}\n      if (node.justValue) {\n        dataValuesString = JSON.stringify({\n          statusCodes: result.statusCodes\n        }, null, 2)\n\n        if (message.valuesToWrite) {\n          delete message['valuesToWrite']\n        }\n      } else {\n        dataValuesString = JSON.stringify(result, null, 2)\n      }\n      return dataValuesString\n    }\n\n    node.setMessageProperties = function (message, result, stringValue) {\n      try {\n        RED.util.setMessageProperty(message, 'payload', JSON.parse(stringValue))\n      } catch (err) {\n        coreClient.writeDebugLog(err)\n        if (node.showErrors) {\n          node.warn('JSON not to parse from string for write statusCodes type ' + typeof result.statusCodes)\n          node.error(err, result.msg)\n        }\n        message.resultsConverted = stringValue\n        message.error = err.message\n      }\n      return message\n    }\n\n    node.on('input', function (msg) {\n      if (!coreClient.core.checkConnectorState(node, msg, 'Write')) {\n        return\n      }\n\n      if (msg.injectType === 'write') {\n        node.writeToSession(node.opcuaSession, msg)\n      } else {\n        coreClient.writeDebugLog('Wrong Inject Type ' + msg.injectType + '! The Type has to be write.')\n        if (node.showErrors) {\n          node.warn('Wrong Inject Type ' + msg.injectType + '! The msg.injectType has to be write.')\n        }\n      }\n    })\n\n    coreClient.core.registerToConnector(node)\n\n    node.on('close', (done) => {\n      coreClient.core.deregisterToConnector(node, done)\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Write', OPCUAIIoTWrite)\n}\n"]}