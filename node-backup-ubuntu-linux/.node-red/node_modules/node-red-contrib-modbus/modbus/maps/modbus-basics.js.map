{"version":3,"sources":["modbus-basics.js"],"names":["require","install","de","biancoroyal","modbus","basics","internalDebug","statusLog","get_timeUnit_name","unit","unitAbbreviation","calc_rateByUnit","rate","rateUnit","parseInt","setNodeStatusProperties","statusValue","showActivities","fillValue","shapeValue","fill","shape","status","setNodeStatusByResponseTo","response","node","text","this","util","inspect","setNodeStatusResponse","length","setModbusError","modbusClient","err","msg","message","setNodeStatusTo","showStatusActivities","statusOptions","onModbusInit","onModbusConnect","onModbusActive","onModbusError","failureMsg","showErrors","onModbusClose","onModbusBroken","reconnectTimeout","initModbusClientEvents","_this","on","invalidPayloadIn","hasOwnProperty"],"mappings":"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","file":"../modbus-basics.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018 Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n'use strict'\nrequire('source-map-support').install()\n\nvar de = de || {biancoroyal: {modbus: {basics: {}}}} // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.basics.internalDebug = de.biancoroyal.modbus.basics.internalDebug || require('debug')('contribModbus:basics') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.basics.util = de.biancoroyal.modbus.basics.util || require('util') // eslint-disable-line no-use-before-define\n\n/**\n * Modbus core node basics.\n * @module NodeRedModbusBasics\n */\nde.biancoroyal.modbus.basics.statusLog = false\n/**\n *\n * @param unit\n * @returns {string}\n */\nde.biancoroyal.modbus.basics.get_timeUnit_name = function (unit) {\n  let unitAbbreviation = ''\n\n  switch (unit) {\n    case 'ms':\n      unitAbbreviation = 'msec.'\n      break\n    case 's':\n      unitAbbreviation = 'sec.'\n      break\n    case 'm':\n      unitAbbreviation = 'min.'\n      break\n    case 'h':\n      unitAbbreviation = 'h.'\n      break\n    default:\n      break\n  }\n\n  return unitAbbreviation\n}\n\nde.biancoroyal.modbus.basics.calc_rateByUnit = function (rate, rateUnit) {\n  switch (rateUnit) {\n    case 'ms':\n      break\n    case 's':\n      rate = parseInt(rate) * 1000 // seconds\n      break\n    case 'm':\n      rate = parseInt(rate) * 60000 // minutes\n      break\n    case 'h':\n      rate = parseInt(rate) * 3600000 // hours\n      break\n    default:\n      rate = 10000 // 10 sec.\n      break\n  }\n\n  return rate\n}\n/**\n *\n * @param statusValue\n * @param showActivities\n * @returns {{fill: string, shape: string, status: *}}\n */\nde.biancoroyal.modbus.basics.setNodeStatusProperties = function (statusValue, showActivities) {\n  let fillValue = 'yellow'\n  let shapeValue = 'ring'\n\n  switch (statusValue) {\n    case 'connecting':\n      fillValue = 'yellow'\n      shapeValue = 'ring'\n      break\n\n    case 'error':\n      fillValue = 'red'\n      shapeValue = 'ring'\n      break\n\n    case 'initialized':\n      fillValue = 'yellow'\n      shapeValue = 'dot'\n      break\n\n    case 'not ready to read':\n    case 'not ready to write':\n      fillValue = 'yellow'\n      shapeValue = 'ring'\n      break\n\n    case 'connected':\n      fillValue = 'green'\n      shapeValue = 'ring'\n      break\n\n    case 'timeout':\n      fillValue = 'red'\n      shapeValue = 'ring'\n      break\n\n    case 'active':\n    case 'active reading':\n    case 'active writing':\n      if (!showActivities) {\n        statusValue = 'active'\n      }\n      fillValue = 'green'\n      shapeValue = 'dot'\n      break\n\n    case 'disconnected':\n    case 'terminated':\n      fillValue = 'red'\n      shapeValue = 'ring'\n      break\n\n    case 'polling':\n      fillValue = 'green'\n      if (showActivities) {\n        shapeValue = 'ring'\n      } else {\n        statusValue = 'active'\n        shapeValue = 'dot'\n      }\n      break\n\n    default:\n      if (!statusValue || statusValue === 'waiting') {\n        fillValue = 'blue'\n        statusValue = 'waiting ...'\n      }\n      break\n  }\n\n  return {fill: fillValue, shape: shapeValue, status: statusValue}\n}\n\nde.biancoroyal.modbus.basics.setNodeStatusByResponseTo = function (statusValue, response, node) {\n  let fillValue = 'red'\n  let shapeValue = 'dot'\n\n  switch (statusValue) {\n    case 'initialized':\n      fillValue = 'green'\n      shapeValue = 'ring'\n      break\n\n    case 'active':\n      fillValue = 'green'\n      shapeValue = 'dot'\n      break\n\n    default:\n      if (!statusValue || statusValue === 'waiting') {\n        fillValue = 'blue'\n        statusValue = 'waiting ...'\n      }\n      break\n  }\n\n  node.status({fill: fillValue, shape: shapeValue, text: this.util.inspect(response, false, null)})\n}\n\nde.biancoroyal.modbus.basics.setNodeStatusResponse = function (length, node) {\n  node.status({\n    fill: 'green',\n    shape: 'dot',\n    text: 'active got length: ' + length\n  })\n}\n\nde.biancoroyal.modbus.basics.setModbusError = function (node, modbusClient, err, msg) {\n  if (err) {\n    switch (err.message) {\n      case 'Timed out':\n        this.setNodeStatusTo('timeout', node)\n        break\n      case 'FSM Not Ready To Reconnect':\n        this.setNodeStatusTo('not ready to reconnect', node)\n        break\n      case 'Port Not Open':\n        this.setNodeStatusTo('reconnect', node)\n        modbusClient.emit('reconnect')\n        break\n      default:\n        this.internalDebug(err.message)\n        if (node.showErrors) {\n          this.setNodeStatusTo('error ' + err.message, node)\n          node.error(err, msg)\n        }\n    }\n  }\n}\n\nde.biancoroyal.modbus.basics.setNodeStatusTo = function (statusValue, node) {\n  let statusOptions = this.setNodeStatusProperties(statusValue, node.showStatusActivities)\n\n  node.status({\n    fill: statusOptions.fill,\n    shape: statusOptions.shape,\n    text: statusOptions.status\n  })\n}\n\nde.biancoroyal.modbus.basics.onModbusInit = function (node) {\n  this.setNodeStatusTo('initialize', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusConnect = function (node) {\n  this.setNodeStatusTo('connected', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusActive = function (node) {\n  this.setNodeStatusTo('active', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusError = function (node, failureMsg) {\n  this.setNodeStatusTo('failure', node)\n  if (node.showErrors) {\n    node.warn(failureMsg)\n  }\n}\n\nde.biancoroyal.modbus.basics.onModbusClose = function (node) {\n  this.setNodeStatusTo('closed', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusBroken = function (node, modbusClient) {\n  this.setNodeStatusTo('reconnecting after ' + modbusClient.reconnectTimeout + ' msec.', node)\n}\n\nde.biancoroyal.modbus.basics.initModbusClientEvents = function (node, modbusClient) {\n  modbusClient.on('mbinit', () => { this.onModbusInit(node) })\n  modbusClient.on('mbconnected', () => { this.onModbusConnect(node) })\n  modbusClient.on('mbactive', () => { this.onModbusActive(node) })\n  modbusClient.on('mberror', (failureMsg) => { this.onModbusError(node, failureMsg) })\n  modbusClient.on('mbbroken', () => { this.onModbusBroken(node, modbusClient) })\n  modbusClient.on('mbclosed', () => { this.onModbusClose(node) })\n}\n\nde.biancoroyal.modbus.basics.invalidPayloadIn = function (msg) {\n  return !(msg && msg.hasOwnProperty('payload'))\n}\n\nmodule.exports = de.biancoroyal.modbus.basics\n"]}