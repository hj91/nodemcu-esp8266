{"version":3,"sources":["modbus-flex-server.js"],"names":["module","exports","RED","install","ModbusRTU","require","mbBasics","nodes","registerType","config","internalDebugLog","_require","VM","VMScript","createNode","this","logEnabled","serverAddress","serverPort","parseInt","responseDelay","delayUnit","name","funcGetCoil","compile","unitId","funcGetDiscreteInput","minAddress","funcGetInputRegister","splitAddress","funcGetHoldingRegister","funcSetCoil","node","bufferFactor","funcSetRegister","Buffer","alloc","coilsBufferSize","registersBufferSize","setNodeStatusTo","vector","vm","sandbox","run","modbusServer","host","startServer","debug","unitID","err","message","error","_server","on","sock","JSON","stringify","address","remoteAddress","remotePort","showErrors","msg","send","payload","registers","slice","buildMessage","coils","type","console"],"mappings":"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","file":"../modbus-flex-server.js","sourcesContent":["/**\n Copyright (c) 2017,2018 Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n/**\n * Modbus Server node.\n * @module NodeRedModbusServer\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  let ModbusRTU = require('modbus-serial')\n  let mbBasics = require('./modbus-basics')\n  let internalDebugLog = require('debug')('contribModbus:flex:server')\n\n  function ModbusFlexServer (config) {\n    RED.nodes.createNode(this, config)\n    const {VM, VMScript} = require('vm2')\n\n    this.name = config.name\n    this.logEnabled = config.logEnabled\n    this.serverAddress = config.serverAddress || '0.0.0.0'\n    this.serverPort = parseInt(config.serverPort)\n    this.responseDelay = parseInt(config.responseDelay)\n    this.delayUnit = config.delayUnit\n    this.unitId = config.unitId\n    this.minAddress = config.minAddress\n    this.splitAddress = config.splitAddress\n    this.showErrors = config.showErrors\n\n    this.funcGetCoil = new VMScript(config.funcGetCoil).compile()\n    this.funcGetDiscreteInput = new VMScript(config.funcGetDiscreteInput).compile()\n    this.funcGetInputRegister = new VMScript(config.funcGetInputRegister).compile()\n    this.funcGetHoldingRegister = new VMScript(config.funcGetHoldingRegister).compile()\n\n    this.funcSetCoil = new VMScript(config.funcSetCoil).compile()\n    this.funcSetRegister = new VMScript(config.funcSetRegister).compile()\n\n    let node = this\n    node.bufferFactor = 8\n\n    node.coilsBufferSize = parseInt(config.coilsBufferSize * node.bufferFactor)\n    node.registersBufferSize = parseInt(config.registersBufferSize * node.bufferFactor)\n\n    node.coils = Buffer.alloc(node.coilsBufferSize, 0)\n    node.registers = Buffer.alloc(node.registersBufferSize, 0)\n\n    node.modbusServer = null\n\n    mbBasics.setNodeStatusTo('initialized', node)\n\n    //     1...10000*  address - 1      Coils (outputs)    0   Read/Write\n    // 10001...20000*  address - 10001  Discrete Inputs    01  Read\n    // 30001...40000*  address - 30001  Input Registers    04  Read\n    // 40001...50000*  address - 40001  Holding Registers  03  Read/Write\n\n    node.vector = {}\n\n    const vm = new VM({\n      sandbox: {node}\n    })\n\n    vm.run('node.vector.getCoil = ' + config.funcGetCoil)\n    vm.run('node.vector.getDiscreteInput = ' + config.funcGetDiscreteInput)\n    vm.run('node.vector.getInputRegister = ' + config.funcGetInputRegister)\n    vm.run('node.vector.getHoldingRegister = ' + config.funcGetHoldingRegister)\n\n    vm.run('node.vector.setCoil = ' + config.funcSetCoil)\n    vm.run('node.vector.setRegister = ' + config.funcSetRegister)\n\n    node.startServer = function () {\n      try {\n        if (node.modbusServer === null) {\n          try {\n            node.modbusServer = new ModbusRTU.ServerTCP(node.vector, {\n              host: node.serverAddress,\n              port: node.serverPort,\n              debug: node.logEnabled,\n              unitID: node.unitId\n            })\n          } catch (err) {\n            node.error(err, {payload: 'server net error -> for port 502 on unix, you have to be a super user'})\n          }\n\n          node.modbusServer.on('socketError', function (err) {\n            internalDebugLog(err.message)\n            if (node.showErrors) {\n              node.warn(err)\n            }\n            mbBasics.setNodeStatusTo('error', node)\n\n            node.modbusServer.close(function () {\n              node.startServer()\n            })\n          })\n\n          node.modbusServer._server.on('connection', function (sock) {\n            internalDebugLog('Modbus Flex Server client connection')\n            if (sock) {\n              internalDebugLog('Modbus Flex Server client to ' + JSON.stringify(sock.address()) + ' from ' + sock.remoteAddress + ' ' + sock.remotePort)\n            }\n            mbBasics.setNodeStatusTo('active', node)\n          })\n        }\n      } catch (err) {\n        internalDebugLog(err.message)\n        if (node.showErrors) {\n          node.warn(err)\n        }\n        mbBasics.setNodeStatusTo('error', node)\n      }\n\n      if (node.modbusServer != null) {\n        internalDebugLog('Modbus Flex Server listening on modbus://' + node.serverAddress + ':' + node.serverPort)\n        mbBasics.setNodeStatusTo('initialized', node)\n      } else {\n        internalDebugLog('Modbus Flex Server isn\\'t ready')\n        mbBasics.setNodeStatusTo('error', node)\n      }\n    }\n\n    node.startServer()\n\n    node.on('input', function (msg) {\n      node.send(buildMessage(msg))\n    })\n\n    function buildMessage (msg) {\n      return [\n        {type: 'holding', message: msg, payload: node.registers.slice(node.splitAddress * node.bufferFactor)},\n        {type: 'coils', message: msg, payload: node.coils.slice(node.splitAddress * node.bufferFactor)},\n        {type: 'input', message: msg, payload: node.registers.slice(0, node.splitAddress * node.bufferFactor)},\n        {type: 'discrete', message: msg, payload: node.coils.slice(0, node.splitAddress * node.bufferFactor)}\n      ]\n    }\n\n    node.on('close', function () {\n      mbBasics.setNodeStatusTo('closed', node)\n      if (node.modbusServer._server) {\n        node.modbusServer._server.close()\n      }\n      node.modbusServer = null\n    })\n  }\n\n  try {\n    RED.nodes.registerType('modbus-flex-server', ModbusFlexServer)\n  } catch (err) {\n    console.log(err.message)\n  }\n}\n"]}