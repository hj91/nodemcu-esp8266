{"version":3,"sources":["modbus-flex-write.js"],"names":["module","exports","RED","install","mbBasics","require","mbCore","nodes","registerType","config","internalDebugLog","this","name","ModbusFlexWrite","showStatusActivities","showErrors","node","modbusClient","server","registerForModbus","Map","bufferMessageList","initModbusClientEvents","setNodeStatusTo","msg","payload","resp","buildMessage","err","message","onModbusWriteError","getOriginalMessage","setModbusError","invalidPayloadIn","client","JSON","parse","fc","unitid","parseInt","address","quantity","Number","isInteger","error","value","indexOf","messageId","getObjectId","_msgid","emit","onModbusWriteDone","on","statlyMachine","getMachineState","done","clear","deregisterForModbus"],"mappings":"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","file":"../modbus-flex-write.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018 Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n/**\n * Modbus flexible Write node.\n * @module NodeRedModbusFlexWrite\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  let mbBasics = require('./modbus-basics')\n  let mbCore = require('./core/modbus-core')\n  let internalDebugLog = require('debug')('contribModbus:flex:write')\n\n  function ModbusFlexWrite (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n\n    let node = this\n    let modbusClient = RED.nodes.getNode(config.server)\n    modbusClient.registerForModbus(node)\n    node.bufferMessageList = new Map()\n\n    mbBasics.initModbusClientEvents(node, modbusClient)\n    mbBasics.setNodeStatusTo('waiting', node)\n\n    node.onModbusWriteDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo('writing done', node)\n      }\n\n      node.send(mbCore.buildMessage(node.bufferMessageList, msg.payload, resp, msg))\n    }\n\n    node.onModbusWriteError = function (err, msg) {\n      internalDebugLog(err.message)\n      if (node.showErrors) {\n        node.error(err, msg)\n      }\n      mbBasics.setModbusError(node, modbusClient, err, mbCore.getOriginalMessage(node.bufferMessageList, msg))\n    }\n\n    node.on('input', function (msg) {\n      if (mbBasics.invalidPayloadIn(msg)) {\n        return\n      }\n\n      if (!modbusClient.client) {\n        return\n      }\n\n      try {\n        if (typeof msg.payload === 'string') {\n          msg.payload = JSON.parse(msg.payload)\n        }\n\n        msg.payload.fc = parseInt(msg.payload.fc)\n        msg.payload.unitid = parseInt(msg.payload.unitid)\n        msg.payload.address = parseInt(msg.payload.address)\n        msg.payload.quantity = parseInt(msg.payload.quantity)\n\n        if (!(Number.isInteger(msg.payload.fc) &&\n              (msg.payload.fc === 5 ||\n                msg.payload.fc === 6 ||\n                msg.payload.fc === 15 ||\n                msg.payload.fc === 16))) {\n          node.error('FC Not Valid', msg)\n          return\n        }\n\n        if (!(Number.isInteger(msg.payload.address) &&\n              msg.payload.address >= 0 &&\n              msg.payload.address <= 65535)) {\n          node.error('Address Not Valid', msg)\n          return\n        }\n\n        if (!(Number.isInteger(msg.payload.quantity) &&\n              msg.payload.quantity >= 1 &&\n              msg.payload.quantity <= 65535)) {\n          node.error('Quantity Not Valid', msg)\n          return\n        }\n\n        /* HTTP requests for boolean and multiple data string [1,2,3,4,5] */\n        if (msg.payload.hasOwnProperty('value') && typeof msg.payload.value === 'string') {\n          if (msg.payload.value === 'true' || msg.payload.value === 'false') {\n            msg.payload.value = (msg.payload.value === 'true')\n          } else {\n            if (msg.payload.value.indexOf(',') > -1) {\n              msg.payload.value = JSON.parse(msg.payload.value)\n            }\n          }\n        }\n\n        msg.messageId = mbCore.getObjectId()\n        node.bufferMessageList.set(msg.messageId, msg)\n\n        msg = {\n          topic: msg.topic || node.id,\n          payload: {\n            value: msg.payload.value || msg.value,\n            unitid: msg.payload.unitid,\n            fc: msg.payload.fc,\n            address: msg.payload.address,\n            quantity: msg.payload.quantity,\n            messageId: msg.messageId\n          },\n          _msgid: msg._msgid\n        }\n\n        modbusClient.emit('writeModbus', msg, node.onModbusWriteDone, node.onModbusWriteError)\n      } catch (err) {\n        internalDebugLog(err.message)\n        if (node.showErrors) {\n          node.error(err, msg)\n        }\n      }\n\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo(modbusClient.statlyMachine.getMachineState(), node)\n      }\n    })\n\n    node.on('close', function (done) {\n      mbBasics.setNodeStatusTo('closed', node)\n      node.bufferMessageList.clear()\n      modbusClient.deregisterForModbus(node, done)\n    })\n  }\n\n  RED.nodes.registerType('modbus-flex-write', ModbusFlexWrite)\n}\n"]}