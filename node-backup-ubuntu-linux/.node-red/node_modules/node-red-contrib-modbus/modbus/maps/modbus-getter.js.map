{"version":3,"sources":["modbus-getter.js"],"names":["module","exports","RED","install","mbBasics","require","mbCore","nodes","registerType","config","internalDebugLog","this","name","ModbusGetter","createNode","unitid","dataType","quantity","adr","showStatusActivities","msgThruput","connection","getNode","ioFile","useIOForPayload","useIOFile","node","logIOActivities","server","bufferMessageList","Map","initModbusClientEvents","modbusClient","resp","setNodeStatusTo","data","msg","buildMessageWithIO","err","message","showErrors","onModbusCommandError","getOriginalMessage","setModbusError","invalidPayloadIn","client","messageId","getObjectId","set","payload","value","topic","functionCodeModbusRead","fc","_msgid","onModbusCommandDone","on","done","clear","deregisterForModbus"],"mappings":"aAaAA,OAAOC,QAAU,SAAUC,GAA3BF,QAAOC,sBAAyBE,UAC9B,IAAAC,EAAAC,QAAA,mBAGIC,EAASD,QAAQ,sBAFrBA,EAAQA,QAAA,yBACJD,EAAmBC,QAAA,QAAAA,CAAR,wBAoFZH,EAJDK,MAAAC,aAAA,gBA9EF,SAAuBC,GACvBP,EAAIQ,MAAAA,WAAmBL,KAAAA,GAEvBM,KAAAC,KAASC,EAATD,KACEV,KAAIK,OAAMO,EAAWC,OAErBJ,KAAKC,SAAOH,EAAZO,SACAL,KAAKI,IAALN,EAAcA,IAIdE,KAAKM,SAAWR,EAAOQ,SADvBN,KAAKO,qBAALT,EAAAU,qBACAR,KAAKM,WAAWR,EAAOQ,WAIvBN,KAAKS,WAAaX,EAAOW,WAFzBT,KAAKQ,WAAAA,KAELR,KAAKS,UAALX,EAAkBA,UAClBE,KAAKU,OAAAA,EAAad,MAAlBe,QAAAb,EAAAc,QAIAZ,KAAKa,gBAAkBf,EAAOe,gBAF9Bb,KAAKc,gBAAYhB,EAAOgB,gBAExB,IAAAC,EAAKF,KACLE,EAAKC,kBAAkBlB,IAAAA,IAEvB,IAAIiB,EAAJxB,EAAAK,MAAAe,QAAAb,EAAAmB,QACAF,EAAKG,kBAAwBC,GAI7B1B,EAAS2B,uBAAuBL,EAAMM,GAFtC5B,EAAI4B,gBAAmBzB,UAAJmB,GAEnBtB,EAAAA,oBAAS2B,SAATE,EAAsCD,GACtC5B,EAAS8B,sBAIL9B,EAAS8B,gBAAgB,eAAgBR,GAD3CA,EAAIA,KAAKP,EAAAA,mBAAsBO,EAAAO,EAAAE,KAAAF,EAAAG,KAG/BV,EAAAA,qBAAmBW,SAAAA,EAAmBX,GAJxChB,EAAA4B,EAAAC,SASMb,EAAKc,YAFXd,EAAKe,MAAAA,EAAAA,GAEHrC,EAASoC,eAAYd,EAAAM,EAAAM,EAAAhC,EAAAoC,mBAAAhB,EAAAG,kBAAAO,KAGrBhC,EAAAA,GAAAA,QAASuC,SAAejB,GAL1BtB,EAAAwC,iBAAAR,IAUIJ,EAAAa,SAIAT,EAAAU,UAAAxC,EAAAyC,cACDrB,EAAAG,kBAAAmB,IAAAZ,EAAAU,UAAAV,GAEDA,EAAIU,CACJpB,MAAKG,EAAAA,OAALH,EAA2BU,GAIzBa,QAAS,CAFXb,MAAMA,EAAAa,QAAAC,OAAAd,EAAAa,QACJE,OAAOf,EAAIe,OACXF,GAAAA,EAASG,uBAAA1B,EAAAV,UACPkC,QAAOd,EAAIa,IACXlC,SAAQW,EAAKX,SACbsC,UAAWD,EAAAA,WAEXnC,OAAAA,EAAUS,QAGZ4B,EAAQlB,KAAIkB,aAAAA,EAAAA,EAAAA,oBAAAA,EAAAA,sBAKV5B,EAAKP,sBAFTa,EAAAA,gBAAkBA,EAAmBN,cAAK6B,kBAA0Bd,MAInEf,EAAA8B,GAAA,QAAA,SAAAC,GA7BHrD,EAAA8B,gBAAA,SAAAR,GAkCEA,EAAKG,kBAAkB6B,QAFzBhC,EAAAiC,oBAAiCjC,EAAA+B","file":"../modbus-getter.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018 Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n/**\n * Modbus Getter node.\n * @module NodeRedModbusGetter\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  let mbBasics = require('./modbus-basics')\n  let mbCore = require('./core/modbus-core')\n  let mbIOCore = require('./core/modbus-io-core')\n  let internalDebugLog = require('debug')('contribModbus:getter')\n\n  function ModbusGetter (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.unitid = config.unitid\n\n    this.dataType = config.dataType\n    this.adr = config.adr\n    this.quantity = config.quantity\n\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.msgThruput = config.msgThruput\n    this.connection = null\n\n    this.useIOFile = config.useIOFile\n    this.ioFile = RED.nodes.getNode(config.ioFile)\n    this.useIOForPayload = config.useIOForPayload\n    this.logIOActivities = config.logIOActivities\n\n    let node = this\n    node.bufferMessageList = new Map()\n\n    let modbusClient = RED.nodes.getNode(config.server)\n    modbusClient.registerForModbus(node)\n    mbBasics.initModbusClientEvents(node, modbusClient)\n    mbBasics.setNodeStatusTo('waiting', node)\n\n    node.onModbusCommandDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo('reading done', node)\n      }\n      node.send(mbIOCore.buildMessageWithIO(node, resp.data, resp, msg))\n    }\n\n    node.onModbusCommandError = function (err, msg) {\n      internalDebugLog(err.message)\n      if (node.showErrors) {\n        node.error(err, msg)\n      }\n      mbBasics.setModbusError(node, modbusClient, err, mbCore.getOriginalMessage(node.bufferMessageList, msg))\n    }\n\n    node.on('input', function (msg) {\n      if (mbBasics.invalidPayloadIn(msg)) {\n        return\n      }\n\n      if (!modbusClient.client) {\n        return\n      }\n\n      msg.messageId = mbCore.getObjectId()\n      node.bufferMessageList.set(msg.messageId, msg)\n\n      msg = {\n        topic: msg.topic || node.id,\n        payload: {\n          value: msg.payload.value || msg.payload,\n          unitid: node.unitid,\n          fc: mbCore.functionCodeModbusRead(node.dataType),\n          address: node.adr,\n          quantity: node.quantity,\n          messageId: msg.messageId\n        },\n        _msgid: msg._msgid\n      }\n\n      modbusClient.emit('readModbus', msg, node.onModbusCommandDone, node.onModbusCommandError)\n\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo(modbusClient.statlyMachine.getMachineState(), node)\n      }\n    })\n\n    node.on('close', function (done) {\n      mbBasics.setNodeStatusTo('closed', node)\n      node.bufferMessageList.clear()\n      modbusClient.deregisterForModbus(node, done)\n    })\n  }\n\n  RED.nodes.registerType('modbus-getter', ModbusGetter)\n}\n"]}