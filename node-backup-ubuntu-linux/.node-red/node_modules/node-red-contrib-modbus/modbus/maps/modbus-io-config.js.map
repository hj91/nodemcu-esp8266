{"version":3,"sources":["modbus-io-config.js"],"names":["module","exports","RED","install","coreIO","require","nodes","registerType","config","fs","this","name","createNode","format","addressOffset","node","lastUpdatedAt","LineByLineReader","path","setMaxListeners","UNLIMITED_LISTENERS","internalDebug","err","configData","message","line","push","JSON","parse","lineReader","on","Date","now","payload","allValueNamesFromIOFile","emit","watcher","watchFile","curr","prev","mtime","done","unwatchFile","close"],"mappings":"aAQAA,OAAOC,QAAU,SAAUC,GAA3BF,QAAOC,sBAAyBE,UAC9B,IAAAC,EAAAC,QAAA,yBA4EGH,EAJDI,MAAAC,aAAA,mBAvEFF,SAAAG,GACA,IAAMJ,EAASC,QAAQ,YAGrBH,EAAMO,MAAKJ,WAAQK,KAARF,GAKXE,KAAKC,KAAOH,EAAOG,KAFnBT,KAAII,KAAMM,EAAAA,KAIVF,KAAKG,OAASL,EAAOK,OAFrBH,KAAKC,cAAcA,EAAnBG,cAEA,IAAAC,EAAAL,KACAK,EAAKD,gBAPuB,GAW5BC,EAAKC,cAAgB,KAFrB,IAAID,EAAJ,IAAAX,EAAAa,iBAAAF,EAAAG,MACAH,EAAKI,cAAgBC,gBAAAA,EAArBF,MACAH,EAAKC,WAAL,GAEAZ,EAAOiB,GAAAA,QAAc,SAAAC,GACrBP,EAAKQ,cAALD,EAAAE,WAGEpB,EAAOiB,GAAAA,OAAP,SAAyBG,GAD3BC,GAMIV,EAAKQ,WAAWG,KAAKC,KAAKC,MAAMH,MACjCI,EAAAC,GAAA,MAAA,WAHHf,EAAAC,cAAAe,KAAAC,MAQE5B,EAAOiB,cAAc,0BAA4BN,EAAKG,MAFxDW,EAAAA,KAAWC,CAAGG,QAAO7B,EAAA8B,wBAAYnB,GAAAJ,KAAA,kCAAAO,KAAAH,EAAAG,OAC/BH,EAAKC,KAAAA,gBAAqBgB,EAA1BT,cAGAR,EAAKoB,cAAK,+BAAVpB,EAAAG,MAKFH,EAAKqB,QAAU3B,EAAG4B,UAAUtB,EAAKG,KAAM,SAACoB,EAAMC,GAC5CnC,GAHFA,EAAOiB,cAAPjB,yBAAqBkC,EAAAE,OAInBpC,EAAOiB,cAAP,2BAAgDkB,EAAKC,OADrDpC,EAAOiB,QAAAA,EAAPmB,MAAA,CACApC,EAAOiB,cAAP,kBAAAN,EAAAG,MAIEH,EAAKQ,WAAa,UAFXiB,EAALxB,cAEFD,IAAAA,EAAA,IAAAX,EAAAa,iBAAAF,EAAAG,MACAW,EAAOd,GAAKC,QAAAA,SAAZM,GAIElB,EAAOiB,cAAcC,EAAIE,WAAzBpB,EAAOiB,GAAAA,OAAP,SAAyBG,GAD3BC,GAMIV,EAAKQ,WAAWG,KAAKC,KAAKC,MAAMH,MACjCI,EAAAC,GAAA,MAAA,WAHHf,EAAAC,cAAAe,KAAAC,MAQE5B,EAAOiB,cAAc,4BAA8BN,EAAKG,MAF1DW,EAAAA,KAAWC,CAAXG,QAAqB7B,EAAA8B,wBAAYnB,GAAAJ,KAAA,kCAAAO,KAAAH,EAAAG,OAC/BH,EAAKC,KAAAA,gBAAqBgB,EAA1BT,cAGAR,EAAKoB,cAAK,iCAAVpB,EAAAG,SAIHH,EAAAe,GAAA,QAAA,SAAAW,GA5BHhC,EAAAiC,YAAA3B,EAAAG,MAiCEH,EAAKqB,QAAQO,QAFf5B","file":"../modbus-io-config.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018 Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-modbus\n node-red-contrib-modbusio\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const coreIO = require('./core/modbus-io-core')\n\n  function ModbusIOConfigNode (config) {\n    const fs = require('fs-extra')\n    const UNLIMITED_LISTENERS = 0\n\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.path = config.path\n    this.format = config.format\n    this.addressOffset = config.addressOffset\n\n    let node = this\n    node.setMaxListeners(UNLIMITED_LISTENERS)\n    node.lastUpdatedAt = null\n    let lineReader = new coreIO.LineByLineReader(node.path)\n    coreIO.internalDebug('Read IO File ' + node.path)\n    node.configData = []\n\n    lineReader.on('error', function (err) {\n      coreIO.internalDebug(err.message)\n    })\n\n    lineReader.on('line', function (line) {\n      if (line) {\n        node.configData.push(JSON.parse(line))\n      }\n    })\n\n    lineReader.on('end', function () {\n      node.lastUpdatedAt = Date.now()\n      coreIO.internalDebug('Read IO Done From File ' + node.path)\n      node.warn({ payload: coreIO.allValueNamesFromIOFile(node), name: 'Modbus Value Names From IO File', path: node.path })\n      node.emit('updatedConfig', node.configData)\n    })\n\n    coreIO.internalDebug('Loading IO File Started For ' + node.path)\n\n    node.watcher = fs.watchFile(node.path, (curr, prev) => {\n      coreIO.internalDebug(`the current mtime is: ${curr.mtime}`)\n      coreIO.internalDebug(`the previous mtime was: ${prev.mtime}`)\n\n      if (curr.mtime !== prev.mtime) {\n        coreIO.internalDebug('Reload IO File ' + node.path)\n        node.configData = []\n        delete node.lastUpdatedAt\n\n        let lineReader = new coreIO.LineByLineReader(node.path)\n        lineReader.on('error', function (err) {\n          coreIO.internalDebug(err.message)\n        })\n\n        lineReader.on('line', function (line) {\n          if (line) {\n            node.configData.push(JSON.parse(line))\n          }\n        })\n\n        lineReader.on('end', function () {\n          node.lastUpdatedAt = Date.now()\n          coreIO.internalDebug('Reload IO Done From File ' + node.path)\n          node.warn({ payload: coreIO.allValueNamesFromIOFile(node), name: 'Modbus Value Names From IO File', path: node.path })\n          node.emit('updatedConfig', node.configData)\n        })\n\n        coreIO.internalDebug('Reloading IO File Started For ' + node.path)\n      }\n    })\n\n    node.on('close', function (done) {\n      fs.unwatchFile(node.path)\n      node.watcher.close()\n      done()\n    })\n  }\n\n  RED.nodes.registerType('modbus-io-config', ModbusIOConfigNode)\n}\n"]}