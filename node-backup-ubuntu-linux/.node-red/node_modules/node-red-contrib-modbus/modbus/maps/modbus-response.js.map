{"version":3,"sources":["modbus-response.js"],"names":["module","exports","RED","install","mbBasics","require","nodes","registerType","config","this","registerShowMax","node","setNodeStatusTo","on","msg","inputType","payload","hasOwnProperty","data","length","setNodeStatusResponse","setNodeStatusByResponseTo","JSON","stringify"],"mappings":"aAeAA,OAAOC,QAAU,SAAUC,GAA3BF,QAAOC,sBAAyBE,UAC9B,IAAAC,EAAAC,QAAA,mBA8CGH,EAFDI,MAAAC,aAAA,kBA3CFF,SAAQG,GACRN,EAAIE,MAAAA,WAAmBK,KAAAD,GAEvBC,KAAAC,gBAAyBF,EAAQE,gBAK/B,IAAIC,EAAOF,KAEXL,EAASQ,gBAAgB,cAAeD,GAExCA,EAAKE,GAAG,QAAS,SAAUC,GAF3BV,IAAAA,EAASQ,UAULG,OARCF,EAAGG,QAASC,eAAe,UAC9BF,EAAIA,QAGFA,EAAAA,QAAYE,eAAZ,aACDF,EAAA,WAGCA,GACD,IAAA,OAIOD,EAAIE,QAAQE,KAAKC,OAASR,EAAKD,gBAFvCN,EAAQW,sBAARD,EAAAE,QAAAE,KAAAC,OAAAR,GAEIP,EAAQY,0BAA2BN,SAAAA,EAAnCM,QAAoDL,GAEnD,MACCP,IAAAA,UACDU,EAAAE,QAAAG,QAAAL,EAAAE,QAAAG,OAAAR,EAAAD,gBACDN,EAAAgB,sBAAAN,EAAAE,QAAAG,OAAAR,GAEAP,EAAQY,0BAAkB,SAAqBL,EAAAA,QAAKD,GAEnD,MACCN,QACDA,EAAAiB,0BAAA,SAAAC,KAAAC,UAAAT,EAAAE,SAAAL,MAbLA,EAAAE,GAAA,QAAA,WAXFT,EAAAQ,gBAAA,SAAAD","file":"../modbus-response.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018 Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2016 - Jason D. Harper, Argonne National Laboratory\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc.\n All rights reserved.\n node-red-contrib-modbus\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n/**\n * Modbus Response node.\n * @module NodeRedModbusResponse\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  let mbBasics = require('./modbus-basics')\n\n  function ModbusResponse (config) {\n    RED.nodes.createNode(this, config)\n\n    this.registerShowMax = config.registerShowMax\n\n    let node = this\n\n    mbBasics.setNodeStatusTo('initialized', node)\n\n    node.on('input', function (msg) {\n      let inputType = 'default'\n\n      if (msg.payload.hasOwnProperty('data')) {\n        inputType = 'data'\n      }\n\n      if (msg.payload.hasOwnProperty('address')) {\n        inputType = 'address'\n      }\n\n      switch (inputType) {\n        case 'data':\n          if (msg.payload.data.length > node.registerShowMax) {\n            mbBasics.setNodeStatusResponse(msg.payload.data.length, node)\n          } else {\n            mbBasics.setNodeStatusByResponseTo('active', msg.payload, node)\n          }\n          break\n        case 'address':\n          if (msg.payload.length && msg.payload.length > node.registerShowMax) {\n            mbBasics.setNodeStatusResponse(msg.payload.length, node)\n          } else {\n            mbBasics.setNodeStatusByResponseTo('active', msg.payload, node)\n          }\n          break\n        default:\n          mbBasics.setNodeStatusByResponseTo('active', JSON.stringify(msg.payload), node)\n      }\n    })\n\n    node.on('close', function () {\n      mbBasics.setNodeStatusTo('closed', node)\n    })\n  }\n\n  RED.nodes.registerType('modbus-response', ModbusResponse)\n}\n"]}