"use strict";module.exports=function(n){require("source-map-support").install();var l=require("./modbus-basics"),c=require("./core/modbus-client-core");n.nodes.registerType("modbus-client",function(e){n.nodes.createNode(this,e);var t=require("modbus-serial");this.clienttype=e.clienttype,this.bufferCommands=e.bufferCommands,this.stateLogEnabled=e.stateLogEnabled,this.tcpHost=e.tcpHost,this.tcpPort=parseInt(e.tcpPort)||502,this.tcpType=e.tcpType,this.serialPort=e.serialPort,this.serialBaudrate=e.serialBaudrate,this.serialDatabits=e.serialDatabits,this.serialStopbits=e.serialStopbits,this.serialParity=e.serialParity,this.serialType=e.serialType,this.serialConnectionDelay=parseInt(e.serialConnectionDelay)||500,this.unit_id=parseInt(e.unit_id)||1,this.commandDelay=parseInt(e.commandDelay)||1,this.clientTimeout=parseInt(e.clientTimeout)||1e3,this.reconnectTimeout=parseInt(e.reconnectTimeout)||2e3;var o=this;function a(e){n.settings.verbose&&o.warn("Client -> "+e+o.serverInfo)}function i(e){n.settings.verbose&&c.internalDebug("Client -> "+e+o.serverInfo)}function s(e){o.stateLogEnabled&&i(e)}function r(e){o.bufferCommands&&i(e)}o.isFirstInitOfConnection=!0,o.closingModbus=!1,o.client=null,o.bufferCommandList=new Map,o.sendAllowed=new Map,o.unitSendingAllowed=[],o.messageAllowedStates=c.messagesAllowedStates,o.serverInfo="",o.statlyMachine=null,o.statlyMachine=c.createStatelyMachine(),s("start: "+o.statlyMachine.getMachineState()),s("FSM events:"+o.statlyMachine.getMachineEvents()),o.initQueue=function(){o.bufferCommandList.clear(),o.sendAllowed.clear(),o.unitSendingAllowed=[];for(var e=0;e<=255;e++)o.bufferCommandList.set(e,[]),o.sendAllowed.set(e,!0)},o.checkUnitId=function(e){return"tcp"===o.clienttype?0<=e&&e<=255:1<=e&&e<=247},o.setUnitIdFromPayload=function(e){var t=parseInt(e.payload.unitid);Number.isInteger(t)?(o.client.setID(t),e.queueUnitId=t):(o.checkUnitId(o.unit_id)||(o.unit_id=1),o.client.setID(o.unit_id),e.queueUnitId=o.unit_id)},!Number.isNaN(o.unit_id)&&o.checkUnitId(o.unit_id)||(o.unit_id=1),o.sequentialDequeueCommand=function(){var e=null,t=!0,n=parseInt(o.unitSendingAllowed.shift());Number.isInteger(n)&&0<o.bufferCommandList.get(n).length?(r(JSON.stringify({type:"queue check",unitid:n,sendAllowed:o.sendAllowed.get(n),queueLength:o.bufferCommandList.get(n).length})),o.sendAllowed.get(n)&&(e=o.bufferCommandList.get(n).shift())&&(o.sendAllowed.set(n,!1),r(JSON.stringify({type:"serial sending and wait",unitid:n,queueLength:o.bufferCommandList.get(n).length,sendAllowedForNext:o.sendAllowed.get(n),delay:o.commandDelay})),0<o.bufferCommandList.get(n).length&&o.unitSendingAllowed.push(n),t=!1,e.callModbus(e.msg,e.cb,e.cberr))):r(JSON.stringify({type:"queue check is not a unit",unitid:n})),t&&o.statlyMachine.empty()},o.dequeueCommand=function(){var e=o.statlyMachine.getMachineState();-1===o.messageAllowedStates.indexOf(e)?r(JSON.stringify({state:e,message:"dequeue command disallowed state",delay:o.commandDelay})):(r(JSON.stringify({state:e,message:"dequeue command "+o.clienttype,delay:o.commandDelay})),o.sequentialDequeueCommand()),o.checkQueuesAreEmpty()&&o.statlyMachine.empty()},o.checkQueuesAreEmpty=function(){for(var e=!0,t=0;t<=255;t++)e&=0<o.bufferCommandList.get(t).length;return e},o.updateServerinfo=function(){"tcp"===o.clienttype?o.serverInfo=" TCP@"+o.tcpHost+":"+o.tcpPort:o.serverInfo=" Serial@"+o.serialPort+":"+o.serialBaudrate+"bit/s",o.serverInfo+=" default Unit-Id: "+o.unit_id},o.statlyMachine.onNEW=function(e,t,n){s("after event: "+e+" old: "+t+" new: "+n)},o.statlyMachine.onINIT=function(e,t,n){s("after event: "+e+" old: "+t+" new: "+n),o.updateServerinfo(),o.initQueue();try{o.isFirstInitOfConnection?(o.isFirstInitOfConnection=!1,setTimeout(o.connectClient,500)):setTimeout(o.connectClient,o.reconnectTimeout)}catch(e){o.error(e,{payload:"client connection error"})}a("reconnect in "+o.reconnectTimeout+" ms"),i("event: "+e+" old: "+t+" new: "+n),o.emit("mbinit")},o.statlyMachine.onCONNECTED=function(e,t,n){s("event: "+e+" old: "+t+" new: "+n),o.emit("mbconnected"),o.statlyMachine.activate()},o.statlyMachine.onACTIVATED=function(e,t,n){s("event: "+e+" old: "+t+" new: "+n),o.emit("mbactive"),o.bufferCommands&&o.statlyMachine.queue()},o.statlyMachine.onQUEUEING=function(e,t,n){s("event: "+e+" old: "+t+" new: "+n),setTimeout(o.dequeueCommand,o.commandDelay),o.emit("mbqueue")},o.statlyMachine.onOPENED=function(e,t,n){i("event: "+e+" old: "+t+" new: "+n),o.emit("mbopen")},o.statlyMachine.onCLOSED=function(e,t,n){s("event: "+e+" old: "+t+" new: "+n),o.emit("mbclosed"),o.statlyMachine.break()},o.statlyMachine.onFAILED=function(e,t,n){s("event: "+e+" old: "+t+" new: "+n),o.emit("mberror","FSM Reset On State "+t),o.statlyMachine.break()},o.statlyMachine.onBROKEN=function(e,t,n){s("event: "+e+" old: "+t+" new: "+n),o.emit("mbbroken"),o.reconnectTimeout<=0&&(o.reconnectTimeout=2e3),a("try to reconnect by init in "+o.reconnectTimeout+" ms"),setTimeout(o.statlyMachine.init,o.reconnectTimeout)},o.connectClient=function(){if(o.client)try{o.client.close(function(){i("connection closed")})}catch(e){i(e.message)}if(o.client=null,o.client=new t,o.clientTimeout||(o.clientTimeout=1e3),o.reconnectTimeout||(o.reconnectTimeout=2e3),"tcp"===o.clienttype){if(!o.checkUnitId(o.unit_id))return o.error(new Error("wrong unit-id (0..255)"),{payload:o.unit_id}),void o.statlyMachine.failure();switch(o.tcpType){case"C701":i("C701 port UDP bridge"),o.client.connectC701(o.tcpHost,{port:o.tcpPort,autoOpen:!0}).then(o.setTCPConnectionOptions).then(o.setTCPConnected).catch(o.modbusTcpErrorHandling);break;case"TELNET":i("Telnet port"),o.client.connectTelnet(o.tcpHost,{port:o.tcpPort,autoOpen:!0}).then(o.setTCPConnectionOptions).catch(o.modbusTcpErrorHandling);break;case"TPC-RTU-BUFFERED":i("TCP RTU buffered port"),o.client.connectTcpRTUBuffered(o.tcpHost,{port:o.tcpPort,autoOpen:!0}).then(o.setTCPConnectionOptions).catch(o.modbusTcpErrorHandling);break;default:i("TCP port"),o.client.connectTCP(o.tcpHost,{port:o.tcpPort,autoOpen:!0}).then(o.setTCPConnectionOptions).catch(o.modbusTcpErrorHandling)}}else{if(!o.checkUnitId(o.unit_id))return o.error(new Error("wrong unit-id serial (1..247)"),{payload:o.unit_id}),void o.statlyMachine.failure();if(o.serialConnectionDelay||(o.serialConnectionDelay=500),!o.serialPort)return o.error(new Error("wrong serial port"),{payload:o.serialPort}),void o.statlyMachine.failure();switch(o.serialType){case"ASCII":i("ASCII port serial"),o.client.connectAsciiSerial(o.serialPort,{baudRate:parseInt(o.serialBaudrate),dataBits:parseInt(o.serialDatabits),stopBits:parseInt(o.serialStopbits),parity:o.serialParity,autoOpen:!1}).then(o.setSerialConnectionOptions).catch(o.modbusSerialErrorHandling);break;case"RTU":i("RTU port serial"),o.client.connectRTU(o.serialPort,{baudRate:parseInt(o.serialBaudrate),dataBits:parseInt(o.serialDatabits),stopBits:parseInt(o.serialStopbits),parity:o.serialParity,autoOpen:!1}).then(o.setSerialConnectionOptions).catch(o.modbusSerialErrorHandling);break;default:i("RTU buffered port serial"),o.client.connectRTUBuffered(o.serialPort,{baudRate:parseInt(o.serialBaudrate),dataBits:parseInt(o.serialDatabits),stopBits:parseInt(o.serialStopbits),parity:o.serialParity,autoOpen:!1}).then(o.setSerialConnectionOptions).catch(o.modbusSerialErrorHandling)}}},o.setTCPConnectionOptions=function(){o.client.setID(o.unit_id),o.client.setTimeout(o.clientTimeout),o.statlyMachine.connect()},o.setTCPConnected=function(){c.modbusSerialDebug("modbus tcp connected on "+o.tcpHost)},o.setSerialConnectionOptions=function(){o.statlyMachine.openserial(),setTimeout(o.openSerialClient,parseInt(o.serialConnectionDelay))},o.modbusErrorHandling=function(e){e.message?c.modbusSerialDebug("modbusErrorHandling:"+e.message):c.modbusSerialDebug("modbusErrorHandling:"+JSON.stringify(e)),e.errno&&c.networkErrors.includes(e.errno)&&o.statlyMachine.failure()},o.modbusTcpErrorHandling=function(e){e.message?c.modbusSerialDebug("modbusTcpErrorHandling:"+e.message):c.modbusSerialDebug("modbusTcpErrorHandling:"+JSON.stringify(e)),e.errno&&c.networkErrors.includes(e.errno)&&o.statlyMachine.failure()},o.modbusSerialErrorHandling=function(e){e.message?c.modbusSerialDebug("modbusSerialErrorHandling:"+e.message):c.modbusSerialDebug("modbusSerialErrorHandling:"+JSON.stringify(e)),o.statlyMachine.failure()},o.openSerialClient=function(){"OPENED"===o.statlyMachine.getMachineState()?(i("time to open Unit "+o.unit_id),c.modbusSerialDebug("modbus connection opened"),o.client.setID(o.unit_id),o.client.setTimeout(parseInt(o.clientTimeout)),o.client._port.on("close",o.onModbusClose),o.statlyMachine.connect()):(i("wrong state on connect serial "+o.statlyMachine.getMachineState()),c.modbusSerialDebug("modbus connection not opened state is %s",o.statlyMachine.getMachineState()),o.statlyMachine.failure())},o.onModbusClose=function(){a("modbus closed port"),c.modbusSerialDebug("modbus closed port"),o.statlyMachine.close()},o.getQueueNumber=function(e){var t=parseInt(e.payload.unitid);return Number.isInteger(t)?o.bufferCommandList.get(t).length:o.bufferCommandList.get(o.unit_id).length},o.pushToQueueByUnitId=function(e,t,n,a){var i=parseInt(t.payload.unitid);Number.isInteger(i)?(t.queueUnit=i,r(JSON.stringify({info:"push to Queue by Unit-Id",message:t.payload,unit:i})),-1===o.unitSendingAllowed.indexOf(i)&&o.unitSendingAllowed.push(i),o.bufferCommandList.get(i).push({callModbus:e,msg:t,cb:n,cberr:a})):(t.queueUnit=o.unit_id,r(JSON.stringify({info:"push to Queue by default Unit-Id",message:t.payload,unit:o.unit_id})),-1===o.unitSendingAllowed.indexOf(o.unit_id)&&o.unitSendingAllowed.push(o.unit_id),o.bufferCommandList.get(o.unit_id).push({callModbus:e,msg:t,cb:n,cberr:a}))},o.on("readModbus",function(e,t,n){var a=o.statlyMachine.getMachineState();-1!==o.messageAllowedStates.indexOf(a)?o.bufferCommands?(e.queueNumber=o.getQueueNumber(e),o.pushToQueueByUnitId(o.readModbus,e,t,n),o.statlyMachine.queue(),r(JSON.stringify({info:"queue read msg",message:e.payload,state:a,queueLength:o.bufferCommandList.get(e.queueUnit).length}))):o.readModbus(e,t,n):n(new Error("FSM Not Ready To Read At State "+a),e)}),o.readModbus=function(t,n,a){if(o.client){o.bufferCommands||o.statlyMachine.read(),o.setUnitIdFromPayload(t),o.client.setTimeout(o.clientTimeout),r(JSON.stringify({info:"read msg",message:t.payload,unitid:t.queueUnitId,timeout:o.client.getTimeout(),state:o.statlyMachine.getMachineState()}));try{switch(parseInt(t.payload.fc)){case 1:o.client.readCoils(parseInt(t.payload.address),parseInt(t.payload.quantity)).then(function(e){o.activateSending(t),n(e,t)}).catch(function(e){o.activateSending(t),a(e,t),o.modbusErrorHandling(e)});break;case 2:o.client.readDiscreteInputs(parseInt(t.payload.address),parseInt(t.payload.quantity)).then(function(e){o.activateSending(t),n(e,t)}).catch(function(e){o.activateSending(t),a(e,t),o.modbusErrorHandling(e)});break;case 3:o.client.readHoldingRegisters(parseInt(t.payload.address),parseInt(t.payload.quantity)).then(function(e){o.activateSending(t),n(e,t)}).catch(function(e){o.activateSending(t),a(e,t),o.modbusErrorHandling(e)});break;case 4:o.client.readInputRegisters(parseInt(t.payload.address),parseInt(t.payload.quantity)).then(function(e){o.activateSending(t),n(e,t)}).catch(function(e){o.activateSending(t),a(e,t),o.modbusErrorHandling(e)});break;default:o.activateSending(t),a(new Error("Function Code Unknown"),t),c.internalDebug("Function Code Unknown %s",t.payload.fc)}}catch(e){c.internalDebug(e.message),o.modbusErrorHandling(e)}}},o.on("writeModbus",function(e,t,n){var a=o.statlyMachine.getMachineState();-1!==o.messageAllowedStates.indexOf(a)?o.bufferCommands?(e.queueNumber=o.getQueueNumber(e),o.pushToQueueByUnitId(o.writeModbus,e,t,n),o.statlyMachine.queue(),r(JSON.stringify({info:"queue write msg",message:e.payload,state:a,queueLength:o.bufferCommandList.get(e.queueUnit).length}))):o.writeModbus(e,t,n):n(new Error("FSM Not Ready To Write At State "+a),e)}),o.writeModbus=function(t,n,a){if(o.client){o.bufferCommands||o.statlyMachine.write(),o.setUnitIdFromPayload(t),o.client.setTimeout(o.clientTimeout),r(JSON.stringify({info:"write msg",message:t.payload,unitid:t.queueUnitId,timeout:o.client.getTimeout(),state:o.statlyMachine.getMachineState()}));try{switch(parseInt(t.payload.fc)){case 15:parseInt(t.payload.value.length)!==parseInt(t.payload.quantity)?(o.activateSending(t),a(new Error("Quantity should be less or equal to coil payload array length: "+t.payload.value.length+" Addr: "+t.payload.address+" Q: "+t.payload.quantity),t)):o.client.writeCoils(parseInt(t.payload.address),t.payload.value).then(function(e){o.activateSending(t),n(e,t)}).catch(function(e){o.activateSending(t),a(e,t),o.modbusErrorHandling(e)});break;case 5:t.payload.value?t.payload.value=!0:t.payload.value=!1,o.client.writeCoil(parseInt(t.payload.address),t.payload.value).then(function(e){o.activateSending(t),n(e,t)}).catch(function(e){o.activateSending(t),a(e,t),o.modbusErrorHandling(e)});break;case 16:parseInt(t.payload.value.length)!==parseInt(t.payload.quantity)?(o.activateSending(t),a(new Error("Quantity should be less or equal to register payload array length: "+t.payload.value.length+" Addr: "+t.payload.address+" Q: "+t.payload.quantity),t)):o.client.writeRegisters(parseInt(t.payload.address),t.payload.value).then(function(e){o.activateSending(t),n(e,t)}).catch(function(e){o.activateSending(t),a(e,t),o.modbusErrorHandling(e)});break;case 6:o.client.writeRegister(parseInt(t.payload.address),parseInt(t.payload.value)).then(function(e){o.activateSending(t),n(e,t)}).catch(function(e){o.activateSending(t),a(e,t),o.modbusErrorHandling(e)});break;default:o.activateSending(t),a(new Error("Function Code Unknown"),t),c.internalDebug("Function Code Unknown %s",t.payload.fc)}}catch(e){c.internalDebug(e.message),o.modbusErrorHandling(e)}}},o.activateSending=function(e){o.bufferCommands&&(o.sendAllowed.set(e.queueUnit,!0),r(JSON.stringify({info:"queue response activate sending",message:e.payload,queueLength:o.bufferCommandList.length}))),o.statlyMachine.activate()},i("initialized"),o.setMaxListeners(0),o.on("reconnect",function(){o.statlyMachine.failure().close()}),o.on("dynamicReconnect",function(e){if(l.invalidPayloadIn(e))throw new Error("Message Or Payload Not Valid");switch(c.internalDebug("Dynamic Reconnect Parameters "+JSON.stringify(e.payload)),e.payload.connectorType){case"TCP":o.tcpHost=e.payload.tcpHost||o.tcpHost,o.tcpPort=e.payload.tcpPort||o.tcpPort,o.tcpType=e.payload.tcpType||o.tcpType,c.internalDebug("New Connection Data "+o.tcpHost+" "+o.tcpPort+" "+o.tcpType);break;case"SERIAL":e.payload.serialPort&&(o.serialPort=parseInt(e.payload.serialPort)||o.serialPort),e.payload.serialBaudrate&&(o.serialBaudrate=parseInt(e.payload.serialBaudrate)||o.serialBaudrate),o.serialDatabits=e.payload.serialDatabits||o.serialDatabits,o.serialStopbits=e.payload.serialStopbits||o.serialStopbits,o.serialParity=e.payload.serialParity||o.serialParity,o.serialType=e.payload.serialType||o.serialType,e.payload.serialConnectionDelay&&(o.serialConnectionDelay=parseInt(e.payload.serialConnectionDelay)||o.serialConnectionDelay),c.internalDebug("New Connection Data "+o.serialPort+" "+o.serialBaudrate+" "+o.serialType);break;default:c.internalDebug("Unknown Dynamic Reconnect Type "+e.payload.connectorType)}e.payload.unitId&&(o.unit_id=parseInt(e.payload.unitId)||o.unit_id),e.payload.commandDelay&&(o.commandDelay=parseInt(e.payload.commandDelay)||o.commandDelay),e.payload.clientTimeout&&(o.clientTimeout=parseInt(e.payload.clientTimeout)||o.clientTimeout),e.payload.reconnectTimeout&&(o.reconnectTimeout=parseInt(e.payload.reconnectTimeout)||o.reconnectTimeout),c.internalDebug("Dynamic Reconnect Starts"),o.statlyMachine.failure().close()}),o.on("close",function(t){o.statlyMachine.failure().stop(),i("close node"),o.client?o.client.close(function(){i("connection closed"),t()}).catch(function(e){i(e.message),t()}):t()}),o.registeredNodeList={},o.registerForModbus=function(e){o.registeredNodeList[e.id]=e,1===Object.keys(o.registeredNodeList).length&&(o.closingModbus=!1,o.statlyMachine.init())},o.deregisterForModbus=function(e,t){delete o.registeredNodeList[e.id],o.closingModbus&&t(),0===Object.keys(o.registeredNodeList).length?(o.closingModbus=!0,o.client?o.client.close(function(){o.statlyMachine.close().break().stop(),t()}).catch(function(e){o.statlyMachine.failure().stop(),i(e.message),t()}):t()):t()}}),n.httpAdmin.get("/modbus/serial/ports",n.auth.needsPermission("serial.read"),function(e,n){require("serialport").list(function(e,t){e&&console.log(e),n.json(t)})})};
//# sourceMappingURL=maps/modbus-client.js.map
