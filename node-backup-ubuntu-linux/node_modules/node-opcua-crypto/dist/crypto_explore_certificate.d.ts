/**
 * @module node_opcua_crypto
 */
import { Certificate } from "./common";
export declare type SignatureValue = string;
export interface AttributeTypeAndValue {
    [key: string]: any;
}
export interface Validity {
    notBefore: Date;
    notAfter: Date;
}
export interface TbsCertificate {
    version: number;
    serialNumber: string;
    issuer: any;
    signature: AlgorithmIdentifier;
    validity: Validity;
    subject: any;
    subjectPublicKeyInfo: any;
    extensions: any | null;
}
export interface AlgorithmIdentifier {
    identifier: any;
}
export interface CertificateInternals {
    tbsCertificate: TbsCertificate;
    signatureAlgorithm: AlgorithmIdentifier;
    signatureValue: SignatureValue;
}
/**
 * explore a certificate structure
 * @param certificate
 * @returns a json object that exhibits the internal data of the certificate
 */
export declare function exploreCertificate(certificate: Certificate): CertificateInternals;
/**
 * @method combine_der
 * combine an array of certificates into a single blob
 * @param certificates a array with the individual DER certificates of the chain
 * @return a concatenated buffer containing the certificates
 */
export declare function combine_der(certificates: Certificate[]): Certificate;
/**
 * @method split_der
 * split a multi chain certificates
 * @param certificateChain  the certificate chain in der (binary) format}
 * @returns an array of Der , each element of the array is one certificate of the chain
 */
export declare function split_der(certificateChain: Certificate): Certificate[];
