"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const lib_1 = require("../lib");
const helpers_1 = require("./helpers");
describe("toolbox", function () {
    this.timeout(400000);
    const test = helpers_1.beforeTest(this);
    const tmpFolder = path.join(__dirname, "../tmp");
    const privateKey = path.join(tmpFolder, "some_private_key");
    before((done) => {
        lib_1.mkdir(tmpFolder);
        lib_1.ensure_openssl_installed(() => {
            lib_1.createPrivateKey(privateKey, 2048, () => {
                fs.existsSync(privateKey).should.eql(true);
                done();
            });
        });
    });
    it("should getPublicKeyFromPrivateKey", (done) => {
        const publicKey = path.join(tmpFolder, "some_public_key");
        lib_1.getPublicKeyFromPrivateKey(privateKey, publicKey, (err) => {
            fs.existsSync(publicKey).should.eql(true);
            const data = fs.readFileSync(publicKey, "ascii");
            data.should.match(/-----BEGIN PUBLIC KEY-----/);
            data.should.match(/-----END PUBLIC KEY-----/);
            done(err);
        });
    });
    it("should getPublicKeyFromCertificate", (done) => {
        const sampleCertificate = path.join(__dirname, "fixtures/sample_self_signed_certificate.pem");
        const publicKey = path.join(tmpFolder, "some_public_key2");
        lib_1.getPublicKeyFromCertificate(sampleCertificate, publicKey, (err) => {
            fs.existsSync(publicKey).should.eql(true);
            const data = fs.readFileSync(publicKey, "ascii");
            data.should.match(/-----BEGIN PUBLIC KEY-----/);
            data.should.match(/-----END PUBLIC KEY-----/);
            data.should.match(/-----BEGIN CERTIFICATE-----/);
            data.should.match(/-----END CERTIFICATE-----/);
            done(err);
        });
    });
});
//# sourceMappingURL=test_toolbox.js.map