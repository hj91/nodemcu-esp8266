// --------- This code has been automatically generated !!! 2018-09-03T20:28:01.494Z
"use strict";
/**
 * @module opcua.address_space.types
 */
const assert = require("node-opcua-assert").assert;
const util = require("util");
const _  = require("underscore");
const makeNodeId = require("node-opcua-nodeid").makeNodeId;
const schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
const extract_all_fields                       = schema_helpers.extract_all_fields;
const resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
const initialize_field                         = schema_helpers.initialize_field;
const initialize_field_array                   = schema_helpers.initialize_field_array;
const check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
const _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
const ec = require("node-opcua-basic-types");
const encodeArray = ec.encodeArray;
const decodeArray = ec.decodeArray;
const makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
const generate_new_id = require("node-opcua-factory").generate_new_id;
const _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
const schema = require("../schemas/ResponseHeader_schema").ResponseHeader_Schema;
const getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
const DiagnosticInfo = getFactory("DiagnosticInfo");
const BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class ResponseHeader
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 */
function ResponseHeader(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    const self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        self.serviceDiagnostics =  null; /* new DiagnosticInfo(null); */
        return ;
    }

    /**
      * 
      * @property timeStamp
      * @type {UtcTime}
      * @default  function () {
            return new Date();
        }
      */
    self.timeStamp = initialize_field(schema.fields[0], options.timeStamp);

    /**
      * 
      * @property requestHandle
      * @type {IntegerId}
      */
    self.requestHandle = initialize_field(schema.fields[1], options.requestHandle);

    /**
      * 
      * @property serviceResult
      * @type {StatusCode}
      */
    self.serviceResult = initialize_field(schema.fields[2], options.serviceResult);

    /**
      * The diagnostics associated with the ServiceResult.
      * @property serviceDiagnostics
      * @type {DiagnosticInfo}
      */
    self.serviceDiagnostics =  new DiagnosticInfo( options.serviceDiagnostics);

    /**
      * 
      * @property stringTable
      * @type {String[]}
      */
    self.stringTable = initialize_field_array(schema.fields[4], options.stringTable);

    /**
      * 
      * @property additionalHeader
      * @type {ExtensionObject}
      */
    self.additionalHeader = initialize_field(schema.fields[5], options.additionalHeader);

   // Object.preventExtensions(self);
}
util.inherits(ResponseHeader,BaseUAObject);
ResponseHeader.prototype.encodingDefaultBinary = makeExpandedNodeId(394,0);
ResponseHeader.prototype.encodingDefaultXml = makeExpandedNodeId(393,0);
ResponseHeader.prototype._schema = schema;

const encode_UtcTime = _defaultTypeMap.UtcTime.encode;
const decode_UtcTime = _defaultTypeMap.UtcTime.decode;
const encode_IntegerId = _defaultTypeMap.IntegerId.encode;
const decode_IntegerId = _defaultTypeMap.IntegerId.decode;
const encode_StatusCode = _defaultTypeMap.StatusCode.encode;
const decode_StatusCode = _defaultTypeMap.StatusCode.decode;
const encode_String = _defaultTypeMap.String.encode;
const decode_String = _defaultTypeMap.String.decode;
const encode_ExtensionObject = _defaultTypeMap.ExtensionObject.encode;
const decode_ExtensionObject = _defaultTypeMap.ExtensionObject.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
ResponseHeader.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_UtcTime(this.timeStamp,stream);
    encode_IntegerId(this.requestHandle,stream);
    encode_StatusCode(this.serviceResult,stream);
   this.serviceDiagnostics.encode(stream,options);
    encodeArray(this.stringTable, stream, encode_String);
    encode_ExtensionObject(this.additionalHeader,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 */
ResponseHeader.prototype.decode = function(stream) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream);
    this.timeStamp = decode_UtcTime(stream);
    this.requestHandle = decode_IntegerId(stream);
    this.serviceResult = decode_StatusCode(stream);
    this.serviceDiagnostics.decode(stream);
    this.stringTable = decodeArray(stream, decode_String);
    this.additionalHeader = decode_ExtensionObject(stream);
};
ResponseHeader.possibleFields = [
  "timeStamp",
         "requestHandle",
         "serviceResult",
         "serviceDiagnostics",
         "stringTable",
         "additionalHeader"
];


exports.ResponseHeader = ResponseHeader;
const register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("ResponseHeader",ResponseHeader);
