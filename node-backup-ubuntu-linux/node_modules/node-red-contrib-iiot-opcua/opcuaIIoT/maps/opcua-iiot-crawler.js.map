{"version":3,"sources":["opcua-iiot-crawler.js"],"names":["module","exports","RED","require","install","coreBrowser","nodes","registerType","config","OPCUAIIoTCrawler","createNode","this","name","justValue","singleResult","showStatusActivities","showErrors","activateUnsetFilter","activateFilters","negateFilter","filters","delayPerMessage","node","initClientNode","filterCrawlerResults","crawlerResultToFilter","crawlerResult","filteredEntries","length","forEach","item","itemIsNotToFilter","push","references","result","core","checkItemForUnsetState","element","checkCrawlerItemIsNotToFilter","crawl","session","msg","checkSessionNotValid","opcuaSession","internalDebugLog","browseTopic","setNodeStatusTo","sendMessage","catch","err","message","browseErrorHandling","crawlAddressSpaceItems","rootNodeId","entry","nodeId","crawlNodeList","crawlForResults","crawlForSingleResult","originMessage","crawlerResults","assign","nodetype","payload","crawlerResultsCount","connector","setTimeout","send","messageList","shift","FAKTOR_SEC_TO_MSEC","addressItemsToBrowse","addressSpaceItems","error","Error","on","checkConnectorState","extractNodeIdFromTopic","registerToConnector","done"],"mappings":"AAQA,aAOAA,OAAOC,QAAU,SAAUC,GACzBC,QAAQ,sBAAsBC,UAC9B,IAAIC,EAAcF,QAAQ,kCA4K1BD,EAAII,MAAMC,aAAa,qBA1KvB,SAA2BC,GAA3BN,EAAAI,MAASG,WAAAA,KAAkBD,GACzBN,KAAII,KAAMI,EAAAA,KACVC,KAAKC,UAAOJ,EAAZK,UACAF,KAAKE,aAAYL,EAAOK,aACxBF,KAAKG,qBAAsBA,EAAAA,qBAC3BH,KAAKI,WAAAA,EAALC,WACAL,KAAKK,oBAAoBA,EAAAA,oBACzBL,KAAKM,gBAAAA,EAAsBT,gBAC3BG,KAAKO,aAALV,EAAuBA,aACvBG,KAAKQ,QAAAA,EAAeX,QACpBG,KAAKS,gBAAiBA,EAAtBC,iBAAA,GACAV,KAAKU,UAAAA,EAALf,MAAuBE,QAAOa,EAAAA,WAG9B,IAAIC,EAAOjB,EAAYkB,eAAeZ,MAEtCW,EAAKE,qBAAuB,SAAUC,GACpC,IAAIC,EAAgBD,GAAyB,GACzCE,EAAkB,GAmBtB,OAjBIL,EAAKJ,iBAAmBI,EAAKF,SAAiC,EAAtBE,EAAKF,QAAQQ,SACvDF,EAAcG,QAAQ,SAAUC,GAC1BR,EAAKS,kBAAkBD,IACzBH,EAAgBK,KAAKF,KAGzBJ,EAAgBC,GAGdL,EAAKT,WACPa,EAAcG,QAAQ,SAAUC,GAC1BA,EAAKG,mBACAH,EAAI,aAKVJ,GAGTJ,EAAKS,kBAAoB,SAAUD,GACjC,IAAII,EAAS7B,EAAY8B,KAAKC,uBAAuBd,EAAMQ,GAQ3D,OANII,GACFZ,EAAKF,QAAQS,QAAQ,SAAUQ,GAC7BH,EAAS7B,EAAY8B,KAAKG,8BAA8BhB,EAAMQ,EAAMO,EAASH,KAIzEZ,EAAKH,cAAiBe,EAASA,GAGzCZ,EAAKiB,MAAQ,SAAUC,EAASC,GAC1BpC,EAAY8B,KAAKO,qBAAqBpB,EAAKqB,aAAc,aAI7DtC,EAAYuC,iBAAiB,gCAAkCtB,EAAKuB,aAEhEvB,EAAKP,sBACPV,EAAY8B,KAAKW,gBAAgBxB,EAAM,YAGzCjB,EAAYkC,MAAMC,EAASlB,EAAKuB,YAAaJ,GAEzCpC,KAAAA,SAAYuC,GACZtB,EAAKyB,iBAALb,EAAsCV,WAAAA,oBAALU,EAA0CA,cAAOR,QACjFsB,EAAMD,YAAUE,EAAKC,QAAA5B,EAAAE,qBAAAU,EAAAgB,QAAAhB,EAAAR,kBACtBrB,MAAAA,SAAY8C,GALhB9C,EAAA8C,oBAAA7B,EAAA2B,EAAAR,OAUApC,EAAAA,qBAAY+C,SAAuBZ,EAASC,GAExCpC,EAAAA,uBAA6B6B,EAAOmB,GACpC/B,KAAKyB,SAALb,GACCc,EAAMJ,iBAAeV,EAAAmB,WAAA,oBAAAnB,EAAAR,cAAAE,QACtBvB,EAAAA,YAAY8C,EAAAA,QAAoB7B,EAAM2B,qBAAtCf,EAAAR,kBALJsB,MAAA,SAAAC,GADF5C,EAAA8C,oBAAA7B,EAAA2B,EAAAR,MAYIpC,EAAAA,gBAAkBmC,SAASc,EAAMC,GAE7BlD,EAAAA,kBAAYuC,IAAAA,SAAAA,GACZtB,EAAKyB,MAALP,EAAwBU,EAAxBK,QACCP,KAJL,SAIWd,GACP7B,EAAY8C,iBAAZjB,EAAsCe,WAAtC,oBAAAf,EAAAR,cAAAE,QALJN,EAAAyB,YAAAb,EAAAgB,QAAA5B,EAAAE,qBAAAU,EAAAR,kBADFsB,MAAA,SAAAC,GADF5C,EAAA8C,oBAAA7B,EAAA2B,EAAAR,QAeGnB,EAAAkC,cAAA,SAAAhB,EAAAC,GAFGnB,EAAKP,sBAITV,EAASS,KAAAA,gBAAcQ,EAAA,YAGrBA,EAAKmC,aACNnC,EAAAoC,qBAAAlB,EAAAC,GADCnB,EAAKmC,gBAAgBjB,EAASC,IAQhCA,EAAGM,YAAW,SAAAY,EAAAjC,GACZkC,IAAAA,EAAAA,OAAcC,OAAEnC,GAAAA,GADJe,EAAdqB,SAAA,QAIArB,EAAInB,QAAKuB,CACPJ,eAAYI,GAGVvB,EAAKuB,aAAY,KAAAvB,EAAAuB,cACnBJ,EAAIsB,QAAQC,YAAAA,EAAZnB,aAEEJ,EAAIsB,YACLtB,EAAAsB,QAAAC,oBAAAtC,EAAAE,OAFGN,EAAK2C,YAGTxB,EAAIsB,QAAQvB,SAAUlB,EAAKqB,UAAa/B,UAAxC6B,EAAIsB,QAAQvB,QAAUlB,EAAKqB,aAAa/B,MAAQ,QAKlDU,EAAIA,YAAKP,KAAAA,GAERO,EAAAP,sBADCV,EAAY8B,KAAKW,gBAAgBxB,EAAM,UAKxC4C,WAAO7C,WA5BVC,EAAA6C,KAAA7C,EAAA8C,YAAAC,UA4BK/C,EAAKD,gBAAkBhB,EAAY8B,KAAKmC,qBAKzChD,EAAAA,cAAgBqB,SAAAA,GADlBrB,EAEOuB,aAAA,KAAAvB,EAAAuB,YACLvB,EAAImB,MAAI8B,EAAAA,aAAsB9B,IAE7BA,EAAA8B,uBADC9B,EAAI+B,kBAAoB/B,EAAI8B,sBAK5BjD,EAAKkC,mBAAmBb,EAAAA,kBAAxBf,QAFFvB,EAGOuC,iBAAA,wCACLtB,EAAKmD,cAAUC,EAAM/B,aAAAF,IAExBnB,EAAAmD,MAAA,IAAAC,MAAA,0CAAAjC,KAKCnB,EAAAqD,GAAA,QAAA,SAAAlC,GACDpC,EAAA8B,KAAAyC,oBAAAtD,EAAAmB,EAAA,aAHHnB,EAAAuB,YAAAxC,EAAAwE,uBAAApC,EAAAnB,GASAjB,EAAAA,cAAiByE,MAIhBzE,EAFD8B,KAAA2C,oBAAAxD,GAAAA,EAAKqD,GAAG,QAAS,SAACI,GAKhBzE,EAAMC,KAAAA,sBAAVe,EAA6Cb","file":"../opcua-iiot-crawler.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Crawler Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreBrowser = require('./core/opcua-iiot-core-browser')\n\n  function OPCUAIIoTCrawler (config) {\n    RED.nodes.createNode(this, config)\n    this.name = config.name\n    this.justValue = config.justValue\n    this.singleResult = config.singleResult\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.activateUnsetFilter = config.activateUnsetFilter\n    this.activateFilters = config.activateFilters\n    this.negateFilter = config.negateFilter\n    this.filters = config.filters\n    this.delayPerMessage = config.delayPerMessage || 0.2\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let node = coreBrowser.initClientNode(this)\n\n    node.filterCrawlerResults = function (crawlerResultToFilter) {\n      let crawlerResult = crawlerResultToFilter || []\n      let filteredEntries = []\n\n      if (node.activateFilters && node.filters && node.filters.length > 0) {\n        crawlerResult.forEach(function (item) {\n          if (node.itemIsNotToFilter(item)) {\n            filteredEntries.push(item)\n          }\n        })\n        crawlerResult = filteredEntries\n      }\n\n      if (node.justValue) {\n        crawlerResult.forEach(function (item) {\n          if (item.references) {\n            delete item['references']\n          }\n        })\n      }\n\n      return crawlerResult\n    }\n\n    node.itemIsNotToFilter = function (item) {\n      let result = coreBrowser.core.checkItemForUnsetState(node, item)\n\n      if (result) {\n        node.filters.forEach(function (element) {\n          result = coreBrowser.core.checkCrawlerItemIsNotToFilter(node, item, element, result)\n        })\n      }\n\n      return (node.negateFilter) ? !result : result\n    }\n\n    node.crawl = function (session, msg) {\n      if (coreBrowser.core.checkSessionNotValid(node.opcuaSession, 'Crawler')) {\n        return\n      }\n\n      coreBrowser.internalDebugLog('Browse Topic To Call Crawler ' + node.browseTopic)\n\n      if (node.showStatusActivities) {\n        coreBrowser.core.setNodeStatusTo(node, 'crawling')\n      }\n\n      coreBrowser.crawl(session, node.browseTopic, msg)\n        .then(function (result) {\n          coreBrowser.internalDebugLog(result.rootNodeId + ' Crawler Results ' + result.crawlerResult.length)\n          node.sendMessage(result.message, node.filterCrawlerResults(result.message, result.crawlerResult))\n        }).catch(function (err) {\n          coreBrowser.browseErrorHandling(node, err, msg)\n        })\n    }\n\n    node.crawlForSingleResult = function (session, msg) {\n      coreBrowser.crawlAddressSpaceItems(session, msg)\n        .then(function (result) {\n          coreBrowser.internalDebugLog(result.rootNodeId + ' Crawler Results ' + result.crawlerResult.length)\n          node.sendMessage(result.message, node.filterCrawlerResults(result.crawlerResult))\n        }).catch(function (err) {\n          coreBrowser.browseErrorHandling(node, err, msg)\n        })\n    }\n\n    node.crawlForResults = function (session, msg) {\n      msg.addressSpaceItems.map((entry) => {\n        coreBrowser.crawl(session, entry.nodeId)\n          .then(function (result) {\n            coreBrowser.internalDebugLog(result.rootNodeId + ' Crawler Results ' + result.crawlerResult.length)\n            node.sendMessage(result.message, node.filterCrawlerResults(result.crawlerResult))\n          }).catch(function (err) {\n            coreBrowser.browseErrorHandling(node, err, msg)\n          })\n      })\n    }\n\n    node.crawlNodeList = function (session, msg) {\n      if (node.showStatusActivities) {\n        coreBrowser.core.setNodeStatusTo(node, 'crawling')\n      }\n\n      if (node.singleResult) {\n        node.crawlForSingleResult(session, msg)\n      } else {\n        node.crawlForResults(session, msg)\n      }\n    }\n\n    node.sendMessage = function (originMessage, crawlerResult) {\n      let msg = Object.assign({}, originMessage)\n      msg.nodetype = 'crawl'\n\n      msg.payload = {\n        crawlerResults: crawlerResult\n      }\n\n      if (node.browseTopic && node.browseTopic !== '') {\n        msg.payload.browseTopic = node.browseTopic\n      }\n\n      if (!node.justValue) {\n        msg.payload.crawlerResultsCount = crawlerResult.length\n        if (node.connector) {\n          msg.payload.endpoint = node.connector.endpoint\n        }\n        msg.payload.session = node.opcuaSession.name || 'none'\n      }\n\n      node.messageList.push(msg)\n\n      if (node.showStatusActivities) {\n        coreBrowser.core.setNodeStatusTo(node, 'active')\n      }\n\n      setTimeout(() => {\n        node.send(node.messageList.shift())\n      }, node.delayPerMessage * coreBrowser.core.FAKTOR_SEC_TO_MSEC)\n    }\n\n    node.startCrawling = function (msg) {\n      if (node.browseTopic && node.browseTopic !== '') {\n        node.crawl(node.opcuaSession, msg)\n      } else {\n        if (msg.addressItemsToBrowse) {\n          msg.addressSpaceItems = msg.addressItemsToBrowse\n        }\n\n        if (msg.addressSpaceItems && msg.addressSpaceItems.length) {\n          coreBrowser.internalDebugLog('Start Crawling On AddressSpace Items')\n          node.crawlNodeList(node.opcuaSession, msg)\n        } else {\n          node.error(new Error('No AddressSpace Items Or Root To Crawl'), msg)\n        }\n      }\n    }\n\n    node.on('input', function (msg) {\n      if (!coreBrowser.core.checkConnectorState(node, msg, 'Crawler')) {\n        return\n      }\n\n      node.browseTopic = coreBrowser.extractNodeIdFromTopic(msg, node)\n      node.startCrawling(msg)\n    })\n\n    coreBrowser.core.registerToConnector(node)\n\n    node.on('close', (done) => {\n      coreBrowser.core.deregisterToConnector(node, done)\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Crawler', OPCUAIIoTCrawler)\n}\n"]}