{"version":3,"sources":["opcua-iiot-flex-connector.js"],"names":["module","exports","RED","require","install","coreConnector","nodes","registerType","config","OPCUAIIoTFlexConnector","createNode","this","name","showStatusActivities","showErrors","connector","node","fill","shape","text","msg","internalDebugLog","payload","endpoint","includes","error","Error","core","registerToConnector","on","done","deregisterToConnector"],"mappings":"AAOA,aAOAA,OAAOC,QAAU,SAAUC,GACzBC,QAAQ,sBAAsBC,UAC9B,IAAIC,EAAgBF,QAAQ,oCAyC5BD,EAAII,MAAMC,aAAa,4BAvCvB,SAAiCC,GAAjCN,EAAAI,MAASG,WAAAA,KAAAA,GACPP,KAAII,KAAMI,EAAAA,KACVC,KAAKC,qBAALJ,EAAAK,qBACAF,KAAKE,WAAAA,EAALC,WACAH,KAAKG,UAALZ,EAAkBM,MAAOM,QAAzBN,EAAAO,WAGA,IAAIC,EAAOL,KAEEM,EAAAA,OAAM,CAAAA,KAAP,OAAAC,MAAA,OAAAC,KAAA,QAA8BA,EAAAA,GAAM,QAAA,SAAAC,GAAhDf,EAAAgB,iBAAA,kCAGEhB,EAAAA,UAGMe,EAAIE,QAAQC,UAAYH,EAAIE,QAAQC,SAASC,SAAS,aADxDR,EAAJK,iBAAoB,6BAClBhB,EAAgBkB,iBAAgBD,EAAAA,SAC9BjB,EAAAA,UAAcgB,uBAAiBD,EAAAE,QAAA,WAC/BjB,EAAcgB,iBAAiBD,6BAC/BJ,EAAKD,KAAAA,OAGJV,EAHDgB,iBAAA,kDAHFL,EAOOS,MAAA,IAAAC,MAAA,kDAAAN,KAGNf,EAAAgB,iBAAA,gDAXHL,EAYOS,MAAA,IAAAC,MAAA,gDAAAN,MAIRf,EAnBDsB,KAAAC,oBAAAZ,GAuBAA,EAAKa,GAAG,QAAS,SAAAC,GACfzB,EAAcsB,KAAKI,sBAAsBf,EAAMc","file":"../opcua-iiot-flex-connector.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2018 - Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Event Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreConnector = require('./core/opcua-iiot-core-connector')\n\n  function OPCUAIIoTFlexConnector (config) {\n    RED.nodes.createNode(this, config)\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let node = this\n\n    node.status({fill: 'blue', shape: 'ring', text: 'new'})\n\n    node.on('input', function (msg) {\n      coreConnector.internalDebugLog('connector change request input')\n\n      if (node.connector) {\n        if (msg.payload.endpoint && msg.payload.endpoint.includes('opc.tcp:')) {\n          coreConnector.internalDebugLog('connector change possible')\n          coreConnector.internalDebugLog(msg.payload)\n          node.connector.restartWithNewSettings(msg.payload, () => {\n            coreConnector.internalDebugLog('connector change injected')\n            node.send(msg)\n          })\n        } else {\n          coreConnector.internalDebugLog('Connector Change Not Possible - Wrong Endpoint')\n          node.error(new Error('Connector Change Not Possible - Wrong Endpoint'), msg)\n        }\n      } else {\n        coreConnector.internalDebugLog('Connector Change Not Possible - No Connector')\n        node.error(new Error('Connector Change Not Possible - No Connector'), msg)\n      }\n    })\n\n    coreConnector.core.registerToConnector(node)\n\n    node.on('close', (done) => {\n      coreConnector.core.deregisterToConnector(node, done)\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Flex-Connector', OPCUAIIoTFlexConnector)\n}\n"]}