{"version":3,"sources":["opcua-iiot-flex-server.js"],"names":["module","exports","RED","require","install","coreServer","scriptObjects","nodes","node","opcuaServer","config","createNode","this","internalDebugLog","OPCUAIIoTFlexServer","__dirname","readConfigOfServerNode","vm","loadNodeSets","sandbox","constructAddressSpaceScript","server","eventObjects","run","addressSpaceScript","serverOptions","buildServerOptions","isValidUser","userManager","userName","password","setDiscoveryOptions","createServer","settings","verbose","detailDebugLog","JSON","stringify","core","setNodeStatusTo","initialize","postInitialize","createServerObject","setOPCUAServerListener","initRegisterServerMethod","err","emit","message","handleServerError","payload","constructAddressSpaceFromScript","then","start","catch","initNewServer","msg","injectType","initialized","Error","executeOpcuaCommand","send","restartServer","flex","on","done","closeServer","simulatorInterval","shutdown","delayToClose"],"mappings":"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","file":"../opcua-iiot-flex-server.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Server Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreServer = require('./core/opcua-iiot-core-server')\n  const {VM} = require('vm2')\n  let scriptObjects = {}\n\n  function OPCUAIIoTFlexServer (config) {\n    RED.nodes.createNode(this, config)\n    coreServer.flex.internalDebugLog('Open Server Node')\n\n    let node = coreServer.readConfigOfServerNode(this, config)\n    node = coreServer.initServerNode(this)\n    node = coreServer.loadNodeSets(node, __dirname)\n    node = coreServer.loadCertificates(node)\n\n    const vm = new VM({\n      sandbox: {\n        node,\n        coreServer,\n        scriptObjects,\n        RED\n      }\n    })\n\n    node.constructAddressSpaceScript = function (server, constructAddressSpaceScript, eventObjects) {\n      server.internalDebugLog('Init Function Block Flex Server')\n    }\n\n    vm.run('node.constructAddressSpaceScript = ' + config.addressSpaceScript)\n\n    node.buildServerOptions = function () {\n      let serverOptions = coreServer.buildServerOptions(node, 'Flex')\n      serverOptions.userManager = {\n        isValidUser: function (userName, password) {\n          return coreServer.checkUser(node, userName, password)\n        }\n      }\n      return coreServer.setDiscoveryOptions(node, serverOptions)\n    }\n\n    node.createServer = function (serverOptions) {\n      if (RED.settings.verbose) {\n        coreServer.flex.detailDebugLog('serverOptions:' + JSON.stringify(serverOptions))\n      }\n      node.opcuaServer = coreServer.createServerObject(node, serverOptions)\n      coreServer.core.setNodeStatusTo(node, 'waiting')\n      node.opcuaServer.initialize(node.postInitialize)\n      coreServer.setOPCUAServerListener(node)\n    }\n\n    node.initNewServer = function () {\n      node = coreServer.initRegisterServerMethod(node)\n      let serverOptions = node.buildServerOptions()\n      serverOptions = coreServer.setDiscoveryOptions(node, serverOptions)\n\n      try {\n        node.createServer(serverOptions)\n      } catch (err) {\n        node.emit('server_create_error')\n        coreServer.flex.internalDebugLog(err.message)\n        coreServer.handleServerError(node, err, {payload: 'Flex Server Failure! Please, check the server settings!'})\n      }\n    }\n\n    node.postInitialize = function () {\n      node.eventObjects = {} // event objects should stay in memory\n      coreServer.constructAddressSpaceFromScript(node.opcuaServer, node.constructAddressSpaceScript, node.eventObjects)\n        .then(function () {\n          coreServer.start(node.opcuaServer, node).then(function () {\n            coreServer.core.setNodeStatusTo(node, 'active')\n            node.emit('server_running')\n          }).catch(function (err) {\n            node.emit('server_start_error')\n            coreServer.core.setNodeStatusTo(node, 'errors')\n            coreServer.handleServerError(node, err, {payload: 'Server Start Failure'})\n          })\n        }).catch(function (err) {\n          coreServer.handleServerError(node, err, {payload: 'Server Address Space Failure'})\n        })\n    }\n\n    node.initNewServer()\n\n    node.on('input', function (msg) {\n      if (!node.opcuaServer || !node.initialized) {\n        coreServer.handleServerError(node, new Error('Server Not Ready For Inputs'), msg)\n        return\n      }\n\n      if (msg.injectType === 'CMD') {\n        node.executeOpcuaCommand(msg)\n      } else {\n        coreServer.handleServerError(node, new Error('Unknown Flex Inject Type ' + msg.injectType), msg)\n      }\n    })\n\n    node.executeOpcuaCommand = function (msg) {\n      if (msg.commandType === 'restart') {\n        node.restartServer()\n        node.send(msg)\n      } else {\n        coreServer.handleServerError(node, new Error('Unknown Flex OPC UA Command'), msg)\n      }\n    }\n\n    node.restartServer = function () {\n      coreServer.flex.internalDebugLog('Restart OPC UA Server')\n      coreServer.restartServer(node)\n\n      if (node.opcuaServer) {\n        coreServer.flex.internalDebugLog('OPC UA Server restarted')\n      } else {\n        coreServer.flex.internalDebugLog('Can not restart OPC UA Server')\n      }\n    }\n\n    node.on('close', function (done) {\n      node.closeServer(() => {\n        coreServer.flex.internalDebugLog('Close Server Node')\n        done()\n      })\n    })\n\n    node.closeServer = function (done) {\n      if (coreServer.simulatorInterval) {\n        clearInterval(coreServer.simulatorInterval)\n        coreServer.simulatorInterval = null\n      }\n\n      if (node.opcuaServer) {\n        node.opcuaServer.shutdown(node.delayToClose, done)\n      } else {\n        done()\n      }\n    }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Flex-Server', OPCUAIIoTFlexServer)\n}\n"]}