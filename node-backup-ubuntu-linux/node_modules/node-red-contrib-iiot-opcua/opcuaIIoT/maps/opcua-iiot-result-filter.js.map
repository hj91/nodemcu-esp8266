{"version":3,"sources":["opcua-iiot-result-filter.js"],"names":["module","exports","RED","require","install","coreFilter","nodes","registerType","config","createNode","this","nodeId","datatype","fixedValue","OPCUAIIoTResultFilter","withPrecision","precision","fixPoint","parseInt","justValue","entry","withValueCheck","topic","minvalue","maxvalue","node","name","subscribed","convertDataType","nodeIdToFilter","msg","status","nodeList","core","buildNodeListFromClient","length","doFilter","some","element","index","array","toString","isNodeIdToFindInsideMsg","addressSpaceItems","_","filter","messageIsToFilter","payload","internalDebugLog","result","filterResult","message","send","input","filterByType","filterByListenType","filterByBrowserType","nodetype","showErrors","error","Error","filterByReadType","convertedResult","filterByWriteType","toFixed","parseFloat","Number","toPrecision","defaultvalue","err","convertResultByDataType","resultDataType","hasOwnProperty","convertResultValue","convertResult","filtertype","extractValueFromOPCUAArrayStructure","entryIndex","value","extractValueFromOPCUAStructure","convertDataValueByDataType","shape","text"],"mappings":"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","file":"../opcua-iiot-result-filter.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * OPC UA node representation for Node-RED OPC UA IIoT nodes.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreFilter = require('./core/opcua-iiot-core-filter')\n  const _ = require('underscore')\n\n  function OPCUAIIoTResultFilter (config) {\n    RED.nodes.createNode(this, config)\n    this.nodeId = config.nodeId\n    this.datatype = config.datatype\n    this.fixedValue = config.fixedValue\n    this.fixPoint = parseInt(config.fixPoint) | 2\n    this.withPrecision = config.withPrecision\n    this.precision = parseInt(config.precision) | 2\n    this.entry = config.entry\n    this.justValue = config.justValue\n    this.withValueCheck = config.withValueCheck\n    this.minvalue = config.minvalue\n    this.maxvalue = config.maxvalue\n    this.defaultvalue = config.defaultvalue\n    this.topic = config.topic\n    this.name = config.name\n    this.showErrors = config.showErrors\n\n    let node = this\n    node.subscribed = false\n\n    if (node.withValueCheck) {\n      node.minvalue = node.convertDataType(node.minvalue)\n      node.maxvalue = node.convertDataType(node.maxvalue)\n    }\n\n    node.status({fill: 'blue', shape: 'ring', text: 'new'})\n\n    node.nodeIdToFilter = function (msg) {\n      let doFilter = true\n      let nodeList = coreFilter.core.buildNodeListFromClient(msg)\n      let elementNodeId = null\n\n      if (nodeList && nodeList.length) {\n        doFilter = !nodeList.some(function (element, index, array) {\n          elementNodeId = element.nodeId || element\n          return elementNodeId.toString() === node.nodeId.toString()\n        })\n      }\n\n      return doFilter\n    }\n\n    node.isNodeIdToFindInsideMsg = function (msg) {\n      if (msg.addressSpaceItems) {\n        let filteredNodeIds = _.filter(msg.addressSpaceItems, function (entry) {\n          return entry.nodeId === node.nodeId\n        })\n\n        if (filteredNodeIds.length < 1) {\n          return true\n        }\n      } else {\n        if (msg.topic !== node.nodeId) { // TODO: that is very old and should be deleted\n          return true\n        }\n      }\n    }\n\n    node.messageIsToFilter = function (msg) {\n      if (node.nodeIdToFilter(msg)) {\n        return true\n      } else {\n        return node.isNodeIdToFindInsideMsg(msg)\n      }\n    }\n\n    node.on('input', function (msg) {\n      if (!msg.hasOwnProperty('payload') || msg.payload === null || msg.payload === void 0) { // values with false has to be true\n        coreFilter.internalDebugLog('filtering message without payload')\n        return\n      }\n\n      if (node.messageIsToFilter(msg)) {\n        coreFilter.internalDebugLog('filtering message on filter')\n        return\n      }\n\n      const message = Object.assign({}, msg)\n      const result = node.filterResult(message)\n\n      if (node.justValue) {\n        node.send({payload: result, topic: node.topic || message.topic, nodeId: node.nodeId, justValue: node.justValue})\n      } else {\n        node.send({payload: result, topic: node.topic || message.topic, nodeId: node.nodeId, input: message, justValue: node.justValue})\n      } // here node topic first to overwrite for dashboard\n    })\n\n    node.filterByType = function (msg) {\n      let result = null\n      switch (msg.nodetype) {\n        case 'read':\n          result = node.filterByReadType(msg)\n          break\n        case 'write':\n          result = node.filterByWriteType(msg)\n          break\n        case 'listen':\n          result = node.filterByListenType(msg)\n          break\n        case 'browse':\n        case 'crawl':\n          result = node.filterByBrowserType(msg)\n          break\n        default:\n          coreFilter.internalDebugLog('unknown node type injected to filter for ' + msg.nodetype)\n          if (node.showErrors) {\n            node.error(new Error('unknown node type injected to filter for ' + msg.nodetype), msg)\n          }\n      }\n\n      return result\n    }\n\n    node.convertResult = function (msg, result) {\n      try {\n        let convertedResult = null\n        if (node.fixPoint >= 0 && node.fixedValue) {\n          convertedResult = Number.parseFloat(result).toFixed(node.fixPoint)\n          convertedResult = parseFloat(convertedResult)\n        }\n\n        if (node.precision >= 0 && node.withPrecision) {\n          convertedResult = Number.parseFloat(result).toPrecision(node.precision)\n          convertedResult = parseFloat(convertedResult)\n        }\n\n        if (node.withValueCheck) {\n          if (convertedResult < node.minvalue || convertedResult > node.maxvalue) {\n            convertedResult = node.defaultvalue\n          }\n        }\n\n        return convertedResult\n      } catch (err) {\n        coreFilter.internalDebugLog('result converting error ' + err.message)\n        if (node.showErrors) {\n          node.error(err, msg)\n        }\n        return result\n      }\n    }\n\n    node.convertResultByDataType = function (msg, result) {\n      let resultDataType = typeof result\n      if (result.hasOwnProperty('datatype')) {\n        resultDataType = result.datatype || resultDataType\n      }\n\n      if (resultDataType && resultDataType.toString() !== node.datatype.toString()) {\n        result = node.convertDataType(result)\n      }\n      return result\n    }\n\n    node.convertResultValue = function (msg, result) {\n      if (result === null || result === void 0) {\n        coreFilter.internalDebugLog('result null or undefined')\n        return\n      }\n\n      if (result.hasOwnProperty('value')) {\n        result = result.value\n      }\n\n      result = node.convertResultByDataType(msg, result)\n\n      if (result === null || result === void 0) {\n        coreFilter.internalDebugLog('converted result null or undefined')\n        if (node.showErrors) {\n          node.error(new Error('converted result null or undefined'), msg)\n        }\n      } else {\n        result = node.convertResult(msg, result)\n      }\n\n      return result\n    }\n\n    node.filterResult = function (msg) {\n      msg.filtertype = 'filter'\n      let result = node.filterByType(msg) || msg.payload\n\n      if (msg.nodetype === 'read' || msg.nodetype === 'listen') {\n        result = node.convertResultValue(msg, result)\n      }\n      return result\n    }\n\n    node.extractValueFromOPCUAArrayStructure = function (msg, entryIndex) {\n      let result = null\n      let payload = msg.payload[entryIndex]\n\n      if (!payload) {\n        return result\n      }\n\n      if (payload.hasOwnProperty('value')) {\n        if (payload.value.hasOwnProperty('value')) {\n          result = payload.value.value\n        } else {\n          result = payload.value\n        }\n      } else {\n        result = payload\n      }\n\n      return result\n    }\n\n    node.extractValueFromOPCUAStructure = function (msg) {\n      let result = null\n\n      if (msg.payload.hasOwnProperty('value')) {\n        if (msg.payload.value.hasOwnProperty('value')) {\n          result = msg.payload.value.value\n        } else {\n          result = msg.payload.value\n        }\n      } else {\n        result = msg.payload\n      }\n\n      return result\n    }\n\n    node.filterByReadType = function (msg) {\n      let result = null\n\n      if (msg.payload.length >= node.entry) {\n        result = node.extractValueFromOPCUAArrayStructure(msg, node.entry - 1)\n      } else {\n        result = node.extractValueFromOPCUAStructure(msg)\n      }\n\n      if (result.hasOwnProperty('value')) {\n        result = result.value\n      }\n\n      return result\n    }\n\n    node.filterByWriteType = function (msg) {\n      return null // has no value\n    }\n\n    node.filterByListenType = function (msg) {\n      let result = null\n\n      if (msg.payload && msg.payload.hasOwnProperty('value')) {\n        result = msg.payload.value\n      } else {\n        result = msg.payload\n      }\n\n      if (result && result.hasOwnProperty('value')) {\n        result = result.value\n      }\n\n      return result\n    }\n\n    node.filterByBrowserType = function (msg) {\n      return null // has no value\n    }\n\n    node.convertDataType = function (result) {\n      coreFilter.internalDebugLog('data type convert for ' + node.nodeId)\n      return coreFilter.core.convertDataValueByDataType({value: result}, node.datatype)\n    }\n\n    node.status({fill: 'green', shape: 'dot', text: 'active'})\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Result-Filter', OPCUAIIoTResultFilter)\n}\n"]}