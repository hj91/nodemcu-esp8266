{"version":3,"sources":["opcua-iiot-server-aso.js"],"names":["module","exports","RED","require","install","core","nodes","registerType","config","OPCUAIIoTASO","createNode","nodeId","this","browsename","displayname","objecttype","referencetype","referenceNodeId","datatype","value","name","node","internalDebugLog","on","msg","nodetype","topic","payload","injectType","includes","nodeOPCUA","OBJECTS_ROOT","Organizes","JSON","stringify","send","error","Error","done"],"mappings":"AAOA,aAOAA,OAAOC,QAAU,SAAUC,GACzBC,QAAQ,sBAAsBC,UAC9B,IAAIC,EAAOF,QAAQ,0BAFrBD,EAAAI,MAAAC,aAAA,wBAIE,SAAuBC,GAAvBN,EAAAI,MAASG,WAAcD,KAAvBA,GACEN,KAAII,OAAMI,EAAWC,OACrBC,KAAKD,WAASH,EAAOG,WACrBC,KAAKC,YAAaL,EAAOK,YACzBD,KAAKE,WAALN,EAAyBO,WACzBH,KAAKG,cAAaP,EAAOO,cACzBH,KAAKI,gBAAgBR,EAAOQ,gBAC5BJ,KAAKK,SAAAA,EAAkBT,SACvBI,KAAKM,MAALV,EAAgBA,MAChBI,KAAKO,KAALX,EAAmBY,KAGnB,IAAIC,EAAOT,KACXP,EAAKiB,iBAAiB,iBAGpBD,EAAAE,GAAIC,QAAIC,SAAaD,GACDE,WAAlBL,EAAKV,WACLU,EAAKH,OAALM,EAAgBA,OAAIN,EAAYG,OAChCA,EAAKF,SAAWK,EAACG,UAAeN,EAACF,SAClCE,EAAAF,MAAAK,EAAAG,SAAAN,EAAAF,OAEMQ,EAAAA,CAAAA,QAAa,GACpBH,MAAY,2BADNA,SAAN,SACAA,WAAY,OAERI,EAAAA,OAAJC,SAAA,OAAAR,EAAAV,OAAAkB,SAAA,OAAAR,EAAAV,OAAAkB,SAAA,OAGEL,EAAIG,QAAQhB,OAASU,EAAKV,OAD5Ba,EAAIH,QAAKV,WAAgBU,EAArBR,WACFW,EAAIG,QAAQhB,YAAcA,EAAAA,YAC1Ba,EAAIG,QAAQd,WAAaQ,EAAKR,WAC9BW,EAAIG,QAAQb,SAAZO,EAA0BA,SAC1BG,EAAIG,QAAQZ,MAAAA,EAAaM,MAEzBG,EAAIG,QAAQR,gBAAZE,EAAAJ,iBAAAZ,EAAAyB,UAAAC,aAEAP,EAAIG,QAAQV,cAAZI,EAA8BA,eAAAhB,EAAwBA,UAAKyB,iBAA3DE,UAGA3B,EAAKiB,iBAAiB,yBAA2BW,KAAKC,UAAUV,IAChEH,EAAKc,KAAKX,IAEVH,EAAKe,MAAM,IAAIC,MAAM,2BAA4Bb,KAKnDnB,EAAAA,GAAKiB,QAAAA,SAAAA,GACLgB,EAAIhB,iBAAA,kBAFNgB","file":"../opcua-iiot-server-aso.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Address space object Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let core = require('./core/opcua-iiot-core')\n\n  function OPCUAIIoTASO (config) {\n    RED.nodes.createNode(this, config)\n    this.nodeId = config.nodeId\n    this.browsename = config.browsename\n    this.displayname = config.displayname\n    this.objecttype = config.objecttype\n    this.referencetype = config.referencetype\n    this.referenceNodeId = config.referenceNodeId\n    this.datatype = config.datatype\n    this.value = config.value\n    this.name = config.name\n\n    let node = this\n    core.internalDebugLog('Open ASO Node')\n\n    node.on('input', function (msg) {\n      if (msg.nodetype === 'inject') {\n        node.nodeId = msg.topic || node.nodeId\n        node.datatype = msg.datatype || node.datatype\n        node.value = msg.payload || node.value\n      }\n\n      msg = {payload: {}} // clean message\n      msg.topic = 'ServerAddressSpaceObject'\n      msg.nodetype = 'inject'\n      msg.injectType = 'ASO'\n\n      if (node.nodeId.includes('i=') || node.nodeId.includes('s=') || node.nodeId.includes('b=')) {\n        msg.payload.nodeId = node.nodeId\n        msg.payload.browsename = node.browsename\n        msg.payload.displayname = node.displayname\n        msg.payload.objecttype = node.objecttype\n        msg.payload.datatype = node.datatype\n        msg.payload.value = node.value\n\n        msg.payload.referenceNodeId = node.referenceNodeId || core.nodeOPCUA.OBJECTS_ROOT\n        msg.payload.referencetype = node.referencetype || core.nodeOPCUA.ReferenceTypeIds.Organizes\n\n        core.internalDebugLog('node msg stringified: ' + JSON.stringify(msg))\n        node.send(msg)\n      } else {\n        node.error(new Error('ASO NodeId Is Not Valid'), msg)\n      }\n    })\n\n    node.on('close', (done) => {\n      core.internalDebugLog('Close ASO Node')\n      done()\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Server-ASO', OPCUAIIoTASO)\n}\n"]}