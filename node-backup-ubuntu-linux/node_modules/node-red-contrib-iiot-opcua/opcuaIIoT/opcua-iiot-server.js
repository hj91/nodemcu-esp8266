"use strict";module.exports=function(r){require("source-map-support").install();var o=require("./core/opcua-iiot-core-server");r.nodes.registerType("OPCUA-IIoT-Server",function(e){r.nodes.createNode(this,e),o.internalDebugLog("Open Server Node"),this.asoDemo=e.asoDemo;var t=o.readConfigOfServerNode(this,e);t=o.initServerNode(this),t=o.loadNodeSets(t,__dirname),(t=o.loadCertificates(t)).buildServerOptions=function(){var e=o.buildServerOptions(t,"Fix");return e.userManager={isValidUser:function(e,r){return o.checkUser(t,e,r)}},o.setDiscoveryOptions(t,e)},t.createServer=function(e){r.settings.verbose&&o.detailDebugLog("serverOptions:"+JSON.stringify(e)),t.opcuaServer=o.createServerObject(t,e),o.core.setNodeStatusTo(t,"waiting"),t.opcuaServer.initialize(t.postInitialize),o.setOPCUAServerListener(t)},t.initNewServer=function(){var e=(t=o.initRegisterServerMethod(t)).buildServerOptions();e=o.setDiscoveryOptions(t,e);try{t.createServer(e)}catch(e){t.emit("server_create_error"),o.handleServerError(t,e,{payload:"Server Failure! Please, check the server settings!"})}},t.postInitialize=function(){o.constructAddressSpace(t.opcuaServer,t.asoDemo).then(function(e){e?o.handleServerError(t,e,{payload:"Server Address Space Problem"}):o.start(t.opcuaServer,t).then(function(){o.core.setNodeStatusTo(t,"active"),t.emit("server_running")}).catch(function(e){t.opcuaServer=null,t.emit("server_start_error"),o.core.setNodeStatusTo(t,"errors"),o.handleServerError(t,e,{payload:"Server Start Failure"})})}).catch(function(e){o.handleServerError(t,e,{payload:"Server Address Space Failure"})})},t.initNewServer(),t.on("input",function(e){if(t.opcuaServer&&t.initialized){switch(e.injectType){case"ASO":t.changeAddressSpace(e);break;case"CMD":t.executeOpcuaCommand(e);break;default:o.handleServerError(t,new Error("Unknown Inject Type "+e.injectType),e)}t.send(e)}else o.handleServerError(t,new Error("Server Not Ready For Inputs"),e)}),t.changeAddressSpace=function(e){e.payload.objecttype&&-1<e.payload.objecttype.indexOf("Variable")?o.addVariableToAddressSpace(t,e,e.payload.objecttype):o.addObjectToAddressSpace(t,e,e.payload.objecttype)},t.executeOpcuaCommand=function(e){switch(e.commandType){case"restart":t.restartServer();break;case"deleteNode":o.deleteNOdeFromAddressSpace(t,e);break;default:o.handleServerError(t,new Error("Unknown OPC UA Command"),e)}},t.restartServer=function(){o.internalDebugLog("Restart OPC UA Server"),o.restartServer(t),t.opcuaServer?o.internalDebugLog("OPC UA Server restarted"):o.internalDebugLog("Can not restart OPC UA Server")},t.on("close",function(e){t.closeServer(function(){o.internalDebugLog("Close Server Node"),e()})}),t.closeServer=function(e){o.destructAddressSpace(function(){t.opcuaServer.shutdown(t.delayToClose,e)})}})};
//# sourceMappingURL=maps/opcua-iiot-server.js.map
