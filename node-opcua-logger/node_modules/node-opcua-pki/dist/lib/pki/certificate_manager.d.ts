/// <reference types="node" />
import { Certificate } from "node-opcua-crypto";
import { CreateSelfSignCertificateParam } from "./toolbox";
import { SubjectOptions } from "../misc/subject";
import { CertificateStatus, ErrorCallback, Filename, KeySize } from "./common";
export interface CertificateManagerOptions {
    keySize?: KeySize;
    location: string;
}
export interface CreateSelfSignCertificateParam1 extends CreateSelfSignCertificateParam {
    outputFile?: Filename;
    subject: SubjectOptions | string;
    applicationUri: string;
    dns: any[];
    startDate: Date;
    validity: number;
}
export declare class CertificateManager {
    untrustUnknownCertificate: boolean;
    private readonly keySize;
    private readonly location;
    private readonly _thumbs;
    constructor(options: CertificateManagerOptions);
    readonly configFile: string;
    readonly rootDir: string;
    readonly privateKey: string;
    readonly randomFile: string;
    /**
     * returns the certificate status trusted/rejected
     * @param certificate
     */
    getCertificateStatus(certificate: Buffer): Promise<CertificateStatus>;
    getCertificateStatus(certificate: Buffer, callback: (err: Error | null, status?: CertificateStatus) => void): void;
    rejectCertificate(certificate: Certificate): Promise<void>;
    rejectCertificate(certificate: Certificate, callback: ErrorCallback): void;
    trustCertificate(certificate: Certificate): Promise<void>;
    trustCertificate(certificate: Certificate, callback: ErrorCallback): void;
    readonly rejectedFolder: string;
    readonly trustedFolder: string;
    isCertificateTrusted(certificate: Certificate, callback: (err: Error | null, trustedStatus: string) => void): void;
    isCertificateTrusted(certificate: Certificate): Promise<string>;
    /**
     * Verify certificate validity
     * @method verifyCertificate
     * @param certificate
     */
    verifyCertificate(certificate: Certificate): Promise<string>;
    verifyCertificate(certificate: Certificate, callback: (err: Error | null, status?: string) => void): void;
    initialize(): Promise<void>;
    initialize(callback: (err?: Error) => void): void;
    /**
     *
     * create a self-signed certificate for the CertificateManager private key
     *
     *
     * @param params
     * @param params.applicationUri   the application URI
     * @param params.altNames  array of alternate names
     * @param [params.outputFile="own/certs/self_signed_certificate.pem"]
     * @param params.subject
     * @param params.subject.commonName
     * @param params.subject.organization
     * @param params.subject.organizationUnit
     * @param params.subject.locality
     * @param params.subject.state
     * @param params.subject.country
     * @param params.validity
     * @param params.dns
     * @param params.ip
     */
    createSelfSignedCertificate(params: CreateSelfSignCertificateParam1): Promise<void>;
    createSelfSignedCertificate(params: CreateSelfSignCertificateParam1, callback: ErrorCallback): void;
    createCertificateRequest(params: CreateSelfSignCertificateParam): Promise<Filename>;
    createCertificateRequest(params: CreateSelfSignCertificateParam, callback: (err: Error | null, certificateSigningRequestFilename?: string) => void): void;
    /**
     * @internal
     * @param certificate
     * @param callback
     * @private
     */
    _getCertificateStatus(certificate: Certificate, callback: (err: Error | null, status?: CertificateStatus) => void): void;
    private _moveCertificate;
    private _readCertificates;
}
