import { SubjectOptions } from "../misc/subject";
import { ErrorCallback, Filename } from "./common";
export declare function quote(str: string): string;
export declare const g_config: any;
export declare function debugLog(...args: any[]): void;
export declare function find_openssl(callback: (err: Error | null, opensslPath?: string) => void): void;
export declare function mkdir(folder: string): void;
export declare function setEnv(varName: string, value: string): void;
export declare function hasEnv(varName: string): boolean;
export interface ExecuteOptions {
    cwd?: string;
    hideErrorMessage?: boolean;
}
export declare function execute(cmd: string, options: ExecuteOptions, callback: (err: Error | null, output: string) => void): void;
export declare function useRandFile(): boolean;
export declare function ensure_openssl_installed(callback: (err?: Error) => void): void;
export interface ExecuteOpenSSLOptions extends ExecuteOptions {
    openssl_conf?: string;
}
export declare function execute_openssl(cmd: string, options: ExecuteOpenSSLOptions, callback: (err: Error | null, output?: string) => void): void;
export declare function execute_openssl_no_failure(cmd: string, options: ExecuteOpenSSLOptions, callback: (err: Error | null, output?: string) => void): void;
export declare function displayChapter(str: string, callback: (err?: Error) => void): void;
export declare function displayTitle(str: string, callback: (err?: Error) => void): void;
export declare function displaySubtitle(str: string, callback: (err?: Error) => void): void;
export declare function getEnvironmentVarNames(): any[];
export declare function generateStaticConfig(configPath: string, options?: ExecuteOptions): string;
export declare function make_path(folderName: string, filename?: string): string;
/**
 *   calculate the public key from private key
 *   openssl rsa -pubout -in private_key.pem
 *
 * @method getPublicKeyFromPrivateKey
 * @param privateKeyFilename
 * @param publicKeyFilename
 * @param callback
 */
export declare function getPublicKeyFromPrivateKey(privateKeyFilename: string, publicKeyFilename: string, callback: (err: Error | null) => void): void;
/**
 * extract public key from a certificate
 *   openssl x509 -pubkey -in certificate.pem -nottext
 *
 * @method getPublicKeyFromCertificate
 * @param certificateFilename
 * @param publicKeyFilename
 * @param callback
 */
export declare function getPublicKeyFromCertificate(certificateFilename: string, publicKeyFilename: string, callback: (err: Error | null) => void): void;
declare type KeyLength = 1024 | 2048 | 3072 | 4096;
/**
 * create a RSA PRIVATE KEY
 *
 * @method createPrivateKey
 *
 * @param privateKeyFilename
 * @param keyLength
 * @param callback {Function}
 */
export declare function createPrivateKey(privateKeyFilename: string, keyLength: KeyLength, callback: ErrorCallback): void;
export declare function createRandomFile(randomFile: string, options: ExecuteOptions, callback: (err?: Error) => void): void;
export declare function createRandomFileIfNotExist(randomFile: string, options: ExecuteOptions, callback: ErrorCallback): void;
export interface CreateCertificateSigningRequestOptions extends ProcessAltNamesParam {
    subject?: SubjectOptions | string;
}
export interface CreateCertificateSigningRequestWithConfigOptions extends CreateCertificateSigningRequestOptions {
    rootDir: Filename;
    configFile: Filename;
    privateKey: Filename;
}
/**
 * create a certificate signing request
 *
 * @param certificateSigningRequestFilename
 * @param params
 * @param callback
 */
export declare function createCertificateSigningRequest(certificateSigningRequestFilename: string, params: CreateCertificateSigningRequestWithConfigOptions, callback: (err?: Error) => void): void;
export declare function x509Date(date: Date): string;
export interface ProcessAltNamesParam {
    dns?: string[];
    ip?: string[];
    applicationUri?: string;
}
export interface StartDateEndDateParam {
    startDate?: Date;
    endDate?: Date;
    validity?: number;
}
export interface CreateSelfSignCertificateParam extends ProcessAltNamesParam, StartDateEndDateParam {
    subject?: SubjectOptions | string;
}
export declare enum CertificatePurpose {
    NotSpecified = 0,
    ForCertificateAuthority = 1,
    ForApplication = 2,
    ForUserAuthentication = 3
}
export interface CreateSelfSignCertificateWithConfigParam extends CreateSelfSignCertificateParam {
    rootDir: Filename;
    configFile: Filename;
    privateKey: Filename;
    purpose: CertificatePurpose;
}
export interface Params extends ProcessAltNamesParam, StartDateEndDateParam {
    subject?: SubjectOptions | string;
    privateKey?: string;
    configFile?: string;
    rootDir?: string;
    outputFile?: string;
    reason?: string;
}
export declare function adjustDate(params: StartDateEndDateParam): void;
export declare function adjustApplicationUri(params: Params): void;
export declare function check_certificate_filename(certificateFile: string): boolean;
/**
 *
 * @param params
 * @param params.applicationUri
 * @param params.dns
 * @param params.ip
 * @private
 */
export declare function processAltNames(params: ProcessAltNamesParam): void;
/**
 *
 * @param certificate
 * @param params
 * @param params.configFile
 * @param params.rootDir
 * @param params.privateKey
 * @param params.applicationUri
 * @param params.dns
 * @param params.ip
 * @param params.validity certificate duration in days
 * @param params.purpose
 * @param [params.subject= "/C=FR/ST=IDF/L=Paris/O=Local NODE-OPCUA Certificate Authority/CN=ZZNodeOPCUA"]
 * @param callback
 */
export declare function createSelfSignCertificate(certificate: string, params: CreateSelfSignCertificateWithConfigParam, callback: (err?: Error | null) => void): void;
export declare const configurationFileTemplate: string;
/**
 *
 * a minimalist config file for openssl that allows
 * self-signed certificate to be generated.
 *
 */
export declare const configurationFileSimpleTemplate: string;
/**
 * @param certificate - the certificate file in PEM format, file must exist
 * @param callback
 */
export declare function dumpCertificate(certificate: Filename, callback: (err: Error | null, output?: string) => void): void;
export declare function toDer(certificatePem: string, callback: (err: Error | null, output?: string) => void): void;
export declare function fingerprint(certificatePem: string, callback: (err: Error | null, output?: string) => void): void;
export {};
